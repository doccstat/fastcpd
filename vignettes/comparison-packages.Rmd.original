---
title: "Comparison with other R packages"
output: rmarkdown::html_vignette
description: |
  Speed and result comparison with other R packages.
vignette: >
  %\VignetteIndexEntry{Comparison with other R packages}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE, comment = "#>", eval = TRUE, cache = FALSE,
  warning = FALSE, fig.width = 8, fig.height = 5,
  fig.path="comparison-packages/"
)

# devtools::install_github(c("swang87/bcp", "veseshan/DNAcopy", "vrunge/gfpop"))
# install.packages(c("bcp", "changepoint", "cpm", "CptNonPar", "strucchange", "ecp", "breakfast", "wbs", "mcp", "mosum", "not", "fpop", "jointseg", "microbenchmark", "segmented", "stepR", "VARDetect"))

if (requireNamespace("microbenchmark", quietly = TRUE)) {
  library(microbenchmark)
}

if (file.exists("comparison-packages-results.RData")) {
  # Available at https://pcloud.xingchi.li/comparison-packages-results.RData
  load("comparison-packages-results.RData")
} else {
  results <- list()
}
```

# Data setup

## Univariate mean change

```{r data-setup-univariate-mean-change}
# Univariate mean change
set.seed(1)
p <- 1
mean_data_1 <- rbind(
  mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(100, p)),
  mvtnorm::rmvnorm(400, mean = rep(50, p), sigma = diag(100, p)),
  mvtnorm::rmvnorm(300, mean = rep(2, p), sigma = diag(100, p))
)

plot.ts(mean_data_1)
```

## Univariate mean and/or variance change

```{r data-setup-univariate-mean-and-or-variance-change}
# Univariate mean and/or variance change
set.seed(1)
p <- 1
mv_data_1 <- rbind(
  mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(1, p)),
  mvtnorm::rmvnorm(400, mean = rep(10, p), sigma = diag(1, p)),
  mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(100, p)),
  mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(1, p)),
  mvtnorm::rmvnorm(400, mean = rep(10, p), sigma = diag(1, p)),
  mvtnorm::rmvnorm(300, mean = rep(10, p), sigma = diag(100, p))
)

plot.ts(mv_data_1)
```

## Multivariate mean change

```{r data-setup-multivariate-mean-change}
# Multivariate mean change
set.seed(1)
p <- 3
mean_data_3 <- rbind(
  mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(100, p)),
  mvtnorm::rmvnorm(400, mean = rep(50, p), sigma = diag(100, p)),
  mvtnorm::rmvnorm(300, mean = rep(2, p), sigma = diag(100, p))
)

plot.ts(mean_data_3)
```

## Multivariate mean and/or variance change

```{r data-setup-multivariate-mean-and-or-variance-change}
# Multivariate mean and/or variance change
set.seed(1)
p <- 4
mv_data_3 <- rbind(
  mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(1, p)),
  mvtnorm::rmvnorm(400, mean = rep(10, p), sigma = diag(1, p)),
  mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(100, p)),
  mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(1, p)),
  mvtnorm::rmvnorm(400, mean = rep(10, p), sigma = diag(1, p)),
  mvtnorm::rmvnorm(300, mean = rep(10, p), sigma = diag(100, p))
)

plot.ts(mv_data_3)
```

## Linear regression

```{r data-setup-linear-regression}
# Linear regression
set.seed(1)
n <- 300
p <- 4
x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p))
theta_0 <- rbind(c(1, 3.2, -1, 0), c(-1, -0.5, 2.5, -2), c(0.8, 0, 1, 2))
y <- c(
  x[1:100, ] %*% theta_0[1, ] + rnorm(100, 0, 3),
  x[101:200, ] %*% theta_0[2, ] + rnorm(100, 0, 3),
  x[201:n, ] %*% theta_0[3, ] + rnorm(100, 0, 3)
)
lm_data <- data.frame(y = y, x = x)

plot.ts(lm_data)
```

## Logistic regression

```{r data-setup-logistic-regression}
# Logistic regression
set.seed(1)
n <- 500
p <- 4
x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p))
theta <- rbind(rnorm(p, 0, 1), rnorm(p, 2, 1))
y <- c(
  rbinom(300, 1, 1 / (1 + exp(-x[1:300, ] %*% theta[1, ]))),
  rbinom(200, 1, 1 / (1 + exp(-x[301:n, ] %*% theta[2, ])))
)
binomial_data <- data.frame(y = y, x = x)

plot.ts(binomial_data)
```

## Poisson regression

```{r data-setup-poisson-regression}
# Poisson regression
set.seed(1)
n <- 1100
p <- 3
x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p))
delta <- rnorm(p)
theta_0 <- c(1, 0.3, -1)
y <- c(
  rpois(500, exp(x[1:500, ] %*% theta_0)),
  rpois(300, exp(x[501:800, ] %*% (theta_0 + delta))),
  rpois(200, exp(x[801:1000, ] %*% theta_0)),
  rpois(100, exp(x[1001:1100, ] %*% (theta_0 - delta)))
)
poisson_data <- data.frame(y = y, x = x)

plot.ts(log(poisson_data$y))
plot.ts(poisson_data[, -1])
```

## Lasso

```{r data-setup-lasso}
# Lasso
set.seed(1)
n <- 480
p_true <- 6
p <- 50
x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p))
theta_0 <- rbind(
  runif(p_true, -5, -2),
  runif(p_true, -3, 3),
  runif(p_true, 2, 5),
  runif(p_true, -5, 5)
)
theta_0 <- cbind(theta_0, matrix(0, ncol = p - p_true, nrow = 4))
y <- c(
  x[1:80, ] %*% theta_0[1, ] + rnorm(80, 0, 1),
  x[81:200, ] %*% theta_0[2, ] + rnorm(120, 0, 1),
  x[201:320, ] %*% theta_0[3, ] + rnorm(120, 0, 1),
  x[321:n, ] %*% theta_0[4, ] + rnorm(160, 0, 1)
)
lasso_data <- data.frame(y = y, x = x)

plot.ts(lasso_data[, seq_len(p_true + 1)])
```

## AR(3)

```{r data-setup-ar3}
# AR(3)
set.seed(1)
n <- 1000
x <- rep(0, n + 3)
for (i in 1:600) {
  x[i + 3] <- 0.6 * x[i + 2] - 0.2 * x[i + 1] + 0.1 * x[i] + rnorm(1, 0, 3)
}
for (i in 601:1000) {
  x[i + 3] <- 0.3 * x[i + 2] + 0.4 * x[i + 1] + 0.2 * x[i] + rnorm(1, 0, 3)
}
ar_data <- x[-seq_len(3)]

plot.ts(ar_data)
```

## GARCH(1, 1)

```{r data-setup-garch11}
# GARCH(1, 1)
set.seed(1)
n <- 400
sigma_2 <- rep(1, n + 1)
x <- rep(0, n + 1)
for (i in seq_len(200)) {
  sigma_2[i + 1] <- 20 + 0.5 * x[i]^2 + 0.1 * sigma_2[i]
  x[i + 1] <- rnorm(1, 0, sqrt(sigma_2[i + 1]))
}
for (i in 201:400) {
  sigma_2[i + 1] <- 1 + 0.1 * x[i]^2 + 0.5 * sigma_2[i]
  x[i + 1] <- rnorm(1, 0, sqrt(sigma_2[i + 1]))
}
garch_data <- x[-1]

plot.ts(garch_data)
```

## VAR(2)

```{r data-setup-var2}
# VAR(2)
set.seed(1)
n <- 800
p <- 2
theta_1 <- matrix(c(-0.3, 0.6, -0.5, 0.4, 0.2, 0.2, 0.2, -0.2), nrow = p)
theta_2 <- matrix(c(0.3, -0.4, 0.1, -0.5, -0.5, -0.2, -0.5, 0.2), nrow = p)
x <- matrix(0, n + 2, p)
for (i in 1:500) {
  x[i + 2, ] <- theta_1 %*% c(x[i + 1, ], x[i, ]) + rnorm(p, 0, 1)
}
for (i in 501:n) {
  x[i + 2, ] <- theta_2 %*% c(x[i + 1, ], x[i, ]) + rnorm(p, 0, 1)
}
var_data <- x[-seq_len(2), ]

plot.ts(var_data)
```

# Univariate mean change

The true change points are 300 and 700.
Some methods are plotted due to the un-retrievable change points.

```{r univariate-mean-change-fastcpd, eval = FALSE}
results[["mean_data_1"]][["fastcpd"]] <-
  fastcpd::fastcpd.mean(mean_data_1, r.progress = FALSE)@cp_set
```

```{r univariate-mean-change-fastcpd-result}
results[["mean_data_1"]][["fastcpd"]]
```

```{r univariate-mean-change-fastcpd-testthat, include = FALSE}
testthat::expect_equal(results[["mean_data_1"]][["fastcpd"]], c(300, 700), tolerance = 0.2)
```

```{r univariate-mean-change-CptNonPar, eval = FALSE}
results[["mean_data_1"]][["CptNonPar"]] <-
  CptNonPar::np.mojo(mean_data_1, G = floor(length(mean_data_1) / 6))$cpts
```

```{r univariate-mean-change-CptNonPar-result}
results[["mean_data_1"]][["CptNonPar"]]
```

```{r univariate-mean-change-CptNonPar-testthat, include = FALSE}
testthat::expect_equal(results[["mean_data_1"]][["CptNonPar"]], c(300, 700), tolerance = 0.2)
```

```{r univariate-mean-change-strucchange, eval = FALSE}
results[["mean_data_1"]][["strucchange"]] <-
  strucchange::breakpoints(y ~ 1, data = data.frame(y = mean_data_1))$breakpoints
```

```{r univariate-mean-change-strucchange-result}
results[["mean_data_1"]][["strucchange"]]
```

```{r univariate-mean-change-strucchange-testthat, include = FALSE}
testthat::expect_equal(results[["mean_data_1"]][["strucchange"]], c(300, 700), tolerance = 0.2)
```

```{r univariate-mean-change-ecp, eval = FALSE}
results[["mean_data_1"]][["ecp"]] <- ecp::e.divisive(mean_data_1)$estimates
```

```{r univariate-mean-change-ecp-result}
results[["mean_data_1"]][["ecp"]]
```

```{r univariate-mean-change-ecp-testthat, include = FALSE}
testthat::expect_equal(results[["mean_data_1"]][["ecp"]], c(1, 301, 701, 1001), tolerance = 0.2)
```

```{r univariate-mean-change-changepoint, eval = FALSE}
results[["mean_data_1"]][["changepoint"]] <-
  changepoint::cpts(changepoint::cpt.mean(c(mean_data_1)/mad(mean_data_1), method = "PELT"))
```

```{r univariate-mean-change-changepoint-result}
results[["mean_data_1"]][["changepoint"]]
```

```{r univariate-mean-change-changepoint-testthat, include = FALSE}
testthat::expect_equal(results[["mean_data_1"]][["changepoint"]], c(300, 700), tolerance = 0.2)
```

```{r univariate-mean-change-breakfast, eval = FALSE}
results[["mean_data_1"]][["breakfast"]] <-
  breakfast::breakfast(mean_data_1)$cptmodel.list[[6]]$cpts
```

```{r univariate-mean-change-breakfast-result}
results[["mean_data_1"]][["breakfast"]]
```

```{r univariate-mean-change-breakfast-testthat, include = FALSE}
testthat::expect_equal(results[["mean_data_1"]][["breakfast"]], c(300, 700), tolerance = 0.2)
```

```{r univariate-mean-change-wbs, eval = FALSE}
results[["mean_data_1"]][["wbs"]] <-
  wbs::wbs(mean_data_1)$cpt$cpt.ic$mbic.penalty
```

```{r univariate-mean-change-wbs-result}
results[["mean_data_1"]][["wbs"]]
```

```{r univariate-mean-change-wbs-testthat, include = FALSE}
testthat::expect_equal(results[["mean_data_1"]][["wbs"]], c(300, 700), tolerance = 0.2)
```

```{r univariate-mean-change-mosum, eval = FALSE}
results[["mean_data_1"]][["mosum"]] <-
  mosum::mosum(c(mean_data_1), G = 40)$cpts.info$cpts
```

```{r univariate-mean-change-mosum-result}
results[["mean_data_1"]][["mosum"]]
```

```{r univariate-mean-change-mosum-testthat, include = FALSE}
testthat::expect_equal(results[["mean_data_1"]][["mosum"]], c(300, 700), tolerance = 0.2)
```

```{r univariate-mean-change-fpop, eval = FALSE}
results[["mean_data_1"]][["fpop"]] <-
  fpop::Fpop(mean_data_1, nrow(mean_data_1))$t.est
```

```{r univariate-mean-change-fpop-result}
results[["mean_data_1"]][["fpop"]]
```

```{r univariate-mean-change-fpop-testthat, include = FALSE}
testthat::expect_equal(results[["mean_data_1"]][["fpop"]], c(300, 700, 1000), tolerance = 0.2)
```

```{r univariate-mean-change-gfpop, eval = FALSE}
results[["mean_data_1"]][["gfpop"]] <-
  gfpop::gfpop(
    data = mean_data_1,
    mygraph = gfpop::graph(
      penalty = 2 * log(nrow(mean_data_1)) * gfpop::sdDiff(mean_data_1) ^ 2,
      type = "updown"
    ),
    type = "mean"
  )$changepoints
```

```{r univariate-mean-change-gfpop-result}
results[["mean_data_1"]][["gfpop"]]
```

```{r univariate-mean-change-gfpop-testthat, include = FALSE}
testthat::expect_equal(results[["mean_data_1"]][["gfpop"]], c(300, 700, 1000), tolerance = 0.2)
```

```{r univariate-mean-change-jointseg, eval = FALSE}
results[["mean_data_1"]][["jointseg"]] <-
  jointseg::jointSeg(mean_data_1, K = 2)$bestBkp
```

```{r univariate-mean-change-jointseg-result}
results[["mean_data_1"]][["jointseg"]]
```

```{r univariate-mean-change-jointseg-testthat, include = FALSE}
testthat::expect_equal(results[["mean_data_1"]][["jointseg"]], c(300, 700), tolerance = 0.2)
```

```{r univariate-mean-change-stepR, eval = FALSE}
results[["mean_data_1"]][["stepR"]] <-
  stepR::stepFit(mean_data_1, alpha = 0.5)$rightEnd
```

```{r univariate-mean-change-stepR-result}
results[["mean_data_1"]][["stepR"]]
```

```{r univariate-mean-change-stepR-testthat, include = FALSE}
testthat::expect_equal(results[["mean_data_1"]][["stepR"]], c(300, 700, 1000), tolerance = 0.2)
```

```{r univariate-mean-change-cpm, eval = FALSE}
results[["mean_data_1"]][["cpm"]] <-
  cpm::processStream(mean_data_1, cpmType = "Student")$changePoints
```

```{r univariate-mean-change-cpm-result}
results[["mean_data_1"]][["cpm"]]
```

```{r univariate-mean-change-cpm-testthat, include = FALSE}
testthat::expect_equal(results[["mean_data_1"]][["cpm"]], c(299, 699), tolerance = 0.2)
```

```{r univariate-mean-change-segmented, eval = FALSE}
results[["mean_data_1"]][["segmented"]] <-
  segmented::stepmented(
    as.numeric(mean_data_1), npsi = 2
  )$psi[, "Est."]
```

```{r univariate-mean-change-segmented-result}
results[["mean_data_1"]][["segmented"]]
```

```{r univariate-mean-change-segmented-testthat, include = FALSE}
testthat::expect_equal(results[["mean_data_1"]][["segmented"]], c(298, 699), ignore_attr = TRUE, tolerance = 0.2)
```

```{r univariate-mean-change-mcp, eval = FALSE}
results[["mean_data_1"]][["mcp"]] <- mcp::mcp(
  list(y ~ 1, ~ 1, ~ 1),
  data = data.frame(y = mean_data_1, x = seq_len(nrow(mean_data_1))),
  par_x = "x"
)
```

```{r univariate-mean-change-mcp-result}
if (requireNamespace("mcp", quietly = TRUE)) {
  plot(results[["mean_data_1"]][["mcp"]])
}
```

```{r univariate-mean-change-not, eval = FALSE}
results[["mean_data_1"]][["not"]] <-
  not::not(mean_data_1, contrast = "pcwsConstMean")
```

```{r univariate-mean-change-not-result}
if (requireNamespace("not", quietly = TRUE)) {
  plot(results[["mean_data_1"]][["not"]])
}
```

```{r univariate-mean-change-bcp, eval = FALSE}
results[["mean_data_1"]][["bcp"]] <- bcp::bcp(mean_data_1)
```

```{r univariate-mean-change-bcp-result}
if (requireNamespace("bcp", quietly = TRUE)) {
  plot(results[["mean_data_1"]][["bcp"]])
}
```

# Univariate mean and/or variance change

The true change points are 300, 700, 1000, 1300 and 1700.
Some methods are plotted due to the un-retrievable change points.

```{r univariate-mean-and-or-variance-change-fastcpd, eval = FALSE}
results[["mv_data_1"]][["fastcpd"]] <-
  fastcpd::fastcpd.mv(mv_data_1, r.progress = FALSE)@cp_set
```

```{r univariate-mean-and-or-variance-change-fastcpd-result}
results[["mv_data_1"]][["fastcpd"]]
```

```{r univariate-mean-and-or-variance-change-fastcpd-testthat, include = FALSE}
testthat::expect_equal(results[["mv_data_1"]][["fastcpd"]], c(300, 700, 1001, 1300, 1700), tolerance = 0.2)
```

```{r univariate-mean-and-or-variance-change-ecp, eval = FALSE}
results[["mv_data_1"]][["ecp"]] <- ecp::e.divisive(mv_data_1)$estimates
```

```{r univariate-mean-and-or-variance-change-ecp-result}
results[["mv_data_1"]][["ecp"]]
```

```{r univariate-mean-and-or-variance-change-ecp-testthat, include = FALSE}
testthat::expect_equal(results[["mv_data_1"]][["ecp"]], c(1, 301, 701, 1001, 1301, 1701, 2001), tolerance = 0.2)
```

```{r univariate-mean-and-or-variance-change-changepoint, eval = FALSE}
results[["mv_data_1"]][["changepoint"]] <-
  changepoint::cpts(changepoint::cpt.meanvar(c(mv_data_1), method = "PELT"))
```

```{r univariate-mean-and-or-variance-change-changepoint-result}
results[["mv_data_1"]][["changepoint"]]
```

```{r univariate-mean-and-or-variance-change-changepoint-testthat, include = FALSE}
testthat::expect_equal(results[["mv_data_1"]][["changepoint"]], c(300, 700, 1000, 1300, 1700), tolerance = 0.2)
```

```{r univariate-mean-and-or-variance-change-CptNonPar, eval = FALSE}
results[["mv_data_1"]][["CptNonPar"]] <-
  CptNonPar::np.mojo(mv_data_1, G = floor(length(mv_data_1) / 6))$cpts
```

```{r univariate-mean-and-or-variance-change-CptNonPar-result}
results[["mv_data_1"]][["CptNonPar"]]
```

```{r univariate-mean-and-or-variance-change-CptNonPar-testthat, include = FALSE}
testthat::expect_equal(results[["mv_data_1"]][["CptNonPar"]], c(333, 700, 1300), tolerance = 0.2)
```

```{r univariate-mean-and-or-variance-change-cpm, eval = FALSE}
results[["mv_data_1"]][["cpm"]] <-
  cpm::processStream(mv_data_1, cpmType = "GLR")$changePoints
```

```{r univariate-mean-and-or-variance-change-cpm-result}
results[["mv_data_1"]][["cpm"]]
```

```{r univariate-mean-and-or-variance-change-cpm-testthat, include = FALSE}
testthat::expect_equal(results[["mv_data_1"]][["cpm"]], c(293, 300, 403, 408, 618, 621, 696, 1000, 1021, 1024, 1293, 1300, 1417, 1693, 1700, 1981), tolerance = 0.2)
```

```{r univariate-mean-and-or-variance-change-mcp, eval = FALSE}
results[["mv_data_1"]][["mcp"]] <- mcp::mcp(
  list(y ~ 1, ~ 1, ~ 1, ~ 1, ~ 1, ~ 1),
  data = data.frame(y = mv_data_1, x = seq_len(nrow(mv_data_1))),
  par_x = "x"
)
```

```{r univariate-mean-and-or-variance-change-mcp-result}
if (requireNamespace("mcp", quietly = TRUE)) {
  plot(results[["mv_data_1"]][["mcp"]])
}
```

```{r univariate-mean-and-or-variance-change-not, eval = FALSE}
results[["mv_data_1"]][["not"]] <-
  not::not(mv_data_1, contrast = "pcwsConstMeanVar")
```

```{r univariate-mean-and-or-variance-change-not-result}
if (requireNamespace("not", quietly = TRUE)) {
  plot(results[["mv_data_1"]][["not"]])
}
```

# Multivariate mean change

The true change points are 300 and 700.
Some methods are plotted due to the un-retrievable change points.

```{r multivariate-mean-change-fastcpd, eval = FALSE}
results[["mean_data_3"]][["fastcpd"]] <-
  fastcpd::fastcpd.mean(mean_data_3, r.progress = FALSE)@cp_set
```

```{r multivariate-mean-change-fastcpd-result}
results[["mean_data_3"]][["fastcpd"]]
```

```{r multivariate-mean-change-fastcpd-testthat, include = FALSE}
testthat::expect_equal(results[["mean_data_3"]][["fastcpd"]], c(300, 700), tolerance = 0.2)
```

```{r multivariate-mean-change-CptNonPar, eval = FALSE}
results[["mean_data_3"]][["CptNonPar"]] <-
  CptNonPar::np.mojo(mean_data_3, G = floor(nrow(mean_data_3) / 6))$cpts
```

```{r multivariate-mean-change-CptNonPar-result}
results[["mean_data_3"]][["CptNonPar"]]
```

```{r multivariate-mean-change-CptNonPar-testthat, include = FALSE}
testthat::expect_equal(results[["mean_data_3"]][["CptNonPar"]], c(300, 700), tolerance = 0.2)
```

```{r multivariate-mean-change-jointseg, eval = FALSE}
results[["mean_data_3"]][["jointseg"]] <-
  jointseg::jointSeg(mean_data_3, K = 2)$bestBkp
```

```{r multivariate-mean-change-jointseg-result}
results[["mean_data_3"]][["jointseg"]]
```

```{r multivariate-mean-change-jointseg-testthat, include = FALSE}
testthat::expect_equal(results[["mean_data_3"]][["jointseg"]], c(300, 700), tolerance = 0.2)
```

```{r multivariate-mean-change-strucchange, eval = FALSE}
results[["mean_data_3"]][["strucchange"]] <-
  strucchange::breakpoints(
    cbind(y.1, y.2, y.3) ~ 1, data = data.frame(y = mean_data_3)
  )$breakpoints
```

```{r multivariate-mean-change-strucchange-result}
results[["mean_data_3"]][["strucchange"]]
```

```{r multivariate-mean-change-strucchange-testthat, include = FALSE}
testthat::expect_equal(results[["mean_data_3"]][["strucchange"]], c(300, 700), tolerance = 0.2)
```

```{r multivariate-mean-change-ecp, eval = FALSE}
results[["mean_data_3"]][["ecp"]] <- ecp::e.divisive(mean_data_3)$estimates
```

```{r multivariate-mean-change-ecp-result}
results[["mean_data_3"]][["ecp"]]
```

```{r multivariate-mean-change-ecp-testthat, include = FALSE}
testthat::expect_equal(results[["mean_data_3"]][["ecp"]], c(1, 301, 701, 1001), tolerance = 0.2)
```

```{r multivariate-mean-change-bcp, eval = FALSE}
results[["mean_data_3"]][["bcp"]] <- bcp::bcp(mean_data_3)
```

```{r multivariate-mean-change-bcp-result}
if (requireNamespace("bcp", quietly = TRUE)) {
  plot(results[["mean_data_3"]][["bcp"]])
}
```

# Multivariate mean and/or variance change

The true change points are 300, 700, 1000, 1300 and 1700.
Some methods are plotted due to the un-retrievable change points.

```{r multivariate-mean-and-or-variance-change-fastcpd, eval = FALSE}
results[["mv_data_3"]][["fastcpd"]] <-
  fastcpd::fastcpd.mv(mv_data_3, r.progress = FALSE)@cp_set
```

```{r multivariate-mean-and-or-variance-change-fastcpd-result}
results[["mv_data_3"]][["fastcpd"]]
```

```{r multivariate-mean-and-or-variance-change-fastcpd-testthat, include = FALSE}
testthat::expect_equal(results[["mv_data_3"]][["fastcpd"]], c(300, 700, 1000, 1300, 1700), tolerance = 0.2)
```

```{r multivariate-mean-and-or-variance-change-ecp, eval = FALSE}
results[["mv_data_3"]][["ecp"]] <- ecp::e.divisive(mv_data_3)$estimates
```

```{r multivariate-mean-and-or-variance-change-ecp-result}
results[["mv_data_3"]][["ecp"]]
```

```{r multivariate-mean-and-or-variance-change-ecp-testthat, include = FALSE}
testthat::expect_equal(results[["mv_data_3"]][["ecp"]], c(1, 301, 701, 1001, 1301, 1701, 2001), tolerance = 0.2)
```

# Linear regression

The true change points are 100 and 200.

```{r linear-regression-fastcpd, eval = FALSE}
results[["lm_data"]][["fastcpd"]] <-
  fastcpd::fastcpd.lm(lm_data, r.progress = FALSE)@cp_set
```

```{r linear-regression-fastcpd-result}
results[["lm_data"]][["fastcpd"]]
```

```{r linear-regression-fastcpd-testthat, include = FALSE}
testthat::expect_equal(results[["lm_data"]][["fastcpd"]], c(97, 201), tolerance = 0.2)
```

```{r linear-regression-strucchange, eval = FALSE}
results[["lm_data"]][["strucchange"]] <-
  strucchange::breakpoints(y ~ . - 1, data = lm_data)$breakpoints
```

```{r linear-regression-strucchange-result}
results[["lm_data"]][["strucchange"]]
```

```{r linear-regression-strucchange-testthat, include = FALSE}
testthat::expect_equal(results[["lm_data"]][["strucchange"]], c(100, 201), tolerance = 0.2)
```

```{r linear-regression-segmented, eval = FALSE}
results[["lm_data"]][["segmented"]] <-
  segmented::segmented(
    lm(
      y ~ . - 1, data.frame(y = lm_data$y, x = lm_data[, -1], index = seq_len(nrow(lm_data)))
    ),
    seg.Z = ~ index
  )$psi[, "Est."]
```

```{r linear-regression-segmented-result}
results[["lm_data"]][["segmented"]]
```

```{r linear-regression-segmented-testthat, include = FALSE}
testthat::expect_equal(results[["lm_data"]][["segmented"]], c(233), ignore_attr = TRUE, tolerance = 0.2)
```

# Logistic regression

The true change point is 300.

```{r logistic-regression-fastcpd, eval = FALSE}
results[["binomial_data"]][["fastcpd"]] <-
  fastcpd::fastcpd.binomial(binomial_data, r.progress = FALSE)@cp_set
```

```{r logistic-regression-fastcpd-result}
results[["binomial_data"]][["fastcpd"]]
```

```{r logistic-regression-fastcpd-testthat, include = FALSE}
testthat::expect_equal(results[["binomial_data"]][["fastcpd"]], 302, tolerance = 0.2)
```

```{r logistic-regression-strucchange, eval = FALSE}
results[["binomial_data"]][["strucchange"]] <-
  strucchange::breakpoints(y ~ . - 1, data = binomial_data)$breakpoints
```

```{r logistic-regression-strucchange-result}
results[["binomial_data"]][["strucchange"]]
```

```{r logistic-regression-strucchange-testthat, include = FALSE}
testthat::expect_equal(results[["binomial_data"]][["strucchange"]], 297, tolerance = 0.2)
```

# Poisson regression

The true change points are 500, 800 and 1000.

```{r poisson-regression-fastcpd, eval = FALSE}
results[["poisson_data"]][["fastcpd"]] <-
  fastcpd::fastcpd.poisson(poisson_data, r.progress = FALSE)@cp_set
```

```{r poisson-regression-fastcpd-result}
results[["poisson_data"]][["fastcpd"]]
```

```{r poisson-regression-fastcpd-testthat, include = FALSE}
testthat::expect_equal(results[["poisson_data"]][["fastcpd"]], c(498, 805, 1003), tolerance = 0.2)
```

```{r poisson-regression-strucchange, eval = FALSE}
results[["poisson_data"]][["strucchange"]] <-
  strucchange::breakpoints(y ~ . - 1, data = poisson_data)$breakpoints
```

```{r poisson-regression-strucchange-result}
results[["poisson_data"]][["strucchange"]]
```

```{r poisson-regression-strucchange-testthat, include = FALSE}
testthat::expect_equal(results[["poisson_data"]][["strucchange"]], 935, tolerance = 0.2)
```

# Lasso

The true change points are 80, 200 and 320.

```{r lasso-fastcpd, eval = FALSE}
results[["lasso_data"]][["fastcpd"]] <-
  fastcpd::fastcpd.lasso(lasso_data, r.progress = FALSE)@cp_set
```

```{r lasso-fastcpd-result}
results[["lasso_data"]][["fastcpd"]]
```

```{r lasso-fastcpd-testthat, include = FALSE}
testthat::expect_equal(results[["lasso_data"]][["fastcpd"]], c(79, 199, 320), tolerance = 0.2)
```

```{r lasso-strucchange, eval = FALSE}
results[["lasso_data"]][["strucchange"]] <-
  strucchange::breakpoints(y ~ . - 1, data = lasso_data)$breakpoints
```

```{r lasso-strucchange-result}
results[["lasso_data"]][["strucchange"]]
```

```{r lasso-strucchange-testthat, include = FALSE}
testthat::expect_equal(results[["lasso_data"]][["strucchange"]], c(80, 200, 321), tolerance = 0.2)
```

# AR(3)

The true change point is 600.
Some methods are plotted due to the un-retrievable change points.

```{r ar3-fastcpd, eval = FALSE}
results[["ar_data"]][["fastcpd"]] <-
  fastcpd::fastcpd.ar(ar_data, 3, r.progress = FALSE)@cp_set
```

```{r ar3-fastcpd-result}
results[["ar_data"]][["fastcpd"]]
```

```{r ar3-fastcpd-testthat, include = FALSE}
testthat::expect_equal(results[["ar_data"]][["fastcpd"]], c(614), tolerance = 0.2)
```

```{r ar3-CptNonPar, eval = FALSE}
results[["ar_data"]][["CptNonPar"]] <-
  CptNonPar::np.mojo(ar_data, G = floor(length(ar_data) / 6))$cpts
```

```{r ar3-CptNonPar-result}
results[["ar_data"]][["CptNonPar"]]
```

```{r ar3-CptNonPar-testthat, include = FALSE}
testthat::expect_equal(results[["ar_data"]][["CptNonPar"]], numeric(0), tolerance = 0.2)
```

```{r ar3-segmented, eval = FALSE}
results[["ar_data"]][["segmented"]] <-
  segmented::segmented(
    lm(
      y ~ x + 1, data.frame(y = ar_data, x = seq_along(ar_data))
    ),
    seg.Z = ~ x
  )$psi[, "Est."]
```

```{r ar3-segmented-result}
results[["ar_data"]][["segmented"]]
```

```{r ar3-segmented-testthat, include = FALSE}
testthat::expect_equal(results[["ar_data"]][["segmented"]], c(690), ignore_attr = TRUE, tolerance = 0.2)
```

```{r ar3-mcp, eval = FALSE}
results[["ar_data"]][["mcp"]] <-
  mcp::mcp(
    list(y ~ 1 + ar(3), ~ 0 + ar(3)),
    data = data.frame(y = ar_data, x = seq_along(ar_data)),
    par_x = "x"
  )
```

```{r ar3-mcp-result}
if (requireNamespace("mcp", quietly = TRUE)) {
  plot(results[["ar_data"]][["mcp"]])
}
```

# GARCH(1, 1)

The true change point is 200.

```{r garch11-fastcpd, eval = FALSE}
results[["garch_data"]][["fastcpd"]] <-
  fastcpd::fastcpd.garch(garch_data, c(1, 1), r.progress = FALSE)@cp_set
```

```{r garch11-fastcpd-result}
results[["garch_data"]][["fastcpd"]]
```

```{r garch11-fastcpd-testthat, include = FALSE}
testthat::expect_equal(results[["garch_data"]][["fastcpd"]], c(205), tolerance = 0.2)
```

```{r garch11-CptNonPar, eval = FALSE}
results[["garch_data"]][["CptNonPar"]] <-
  CptNonPar::np.mojo(garch_data, G = floor(length(garch_data) / 6))$cpts
```

```{r garch11-CptNonPar-result}
results[["garch_data"]][["CptNonPar"]]
```

```{r garch11-CptNonPar-testthat, include = FALSE}
testthat::expect_equal(results[["garch_data"]][["CptNonPar"]], c(206), tolerance = 0.2)
```

```{r garch11-strucchange, eval = FALSE}
results[["garch_data"]][["strucchange"]] <-
  strucchange::breakpoints(x ~ 1, data = data.frame(x = garch_data))$breakpoints
```

```{r garch11-strucchange-result}
results[["garch_data"]][["strucchange"]]
```

```{r garch11-strucchange-testthat, include = FALSE}
testthat::expect_equal(results[["garch_data"]][["strucchange"]], NA, tolerance = 0.2)
```

# VAR(2)

The true change points is 500.

```{r var2-fastcpd, eval = FALSE}
results[["var_data"]][["fastcpd"]] <-
  fastcpd::fastcpd.var(var_data, 2, r.progress = FALSE)@cp_set
```

```{r var2-fastcpd-result}
results[["var_data"]][["fastcpd"]]
```

```{r var2-fastcpd-testthat, include = FALSE}
testthat::expect_equal(results[["var_data"]][["fastcpd"]], c(500), tolerance = 0.2)
```

```{r var2-VARDetect, eval = FALSE}
results[["var_data"]][["VARDetect"]] <- VARDetect::tbss(var_data)$cp
```

```{r var2-VARDetect-result}
results[["var_data"]][["VARDetect"]]
```

```{r var2-VARDetect-testthat, include = FALSE}
testthat::expect_equal(results[["var_data"]][["VARDetect"]], c(501), tolerance = 0.2)
```

# Detection comparison using `well_log`

```{r detection-comparison-well-log-setup}
well_log <- fastcpd::well_log
```

```{r detection-comparison-well-log, eval = FALSE}
well_log <- well_log[well_log > 1e5]

results[["well_log"]] <- list(
  fastcpd = fastcpd::fastcpd.mean(well_log, trim = 0.003)@cp_set,
  changepoint = changepoint::cpts(changepoint::cpt.mean(well_log/mad(well_log), method = "PELT")),
  CptNonPar =
    CptNonPar::np.mojo(well_log, G = floor(length(well_log) / 6))$cpts,
  strucchange = strucchange::breakpoints(
    y ~ 1, data = data.frame(y = well_log)
  )$breakpoints,
  ecp = ecp::e.divisive(matrix(well_log))$estimates,
  breakfast = breakfast::breakfast(well_log)$cptmodel.list[[6]]$cpts,
  wbs = wbs::wbs(well_log)$cpt$cpt.ic$mbic.penalty,
  mosum = mosum::mosum(c(well_log), G = 40)$cpts.info$cpts,
  # fpop = fpop::Fpop(well_log, length(well_log))$t.est,  # meaningless
  gfpop = gfpop::gfpop(
    data = well_log,
    mygraph = gfpop::graph(
      penalty = 2 * log(length(well_log)) * gfpop::sdDiff(well_log) ^ 2,
      type = "updown"
    ),
    type = "mean"
  )$changepoints,
  jointseg = jointseg::jointSeg(well_log, K = 12)$bestBkp,
  stepR = stepR::stepFit(well_log, alpha = 0.5)$rightEnd
)
```

```{r detection-comparison-well-log-result}
results[["well_log"]]
```

```{r detection-comparison-well-log-most-selected}
package_list <- sort(names(results[["well_log"]]), decreasing = TRUE)
comparison_table <- NULL
for (package_index in seq_along(package_list)) {
  package <- package_list[[package_index]]
  comparison_table <- rbind(
    comparison_table,
    data.frame(
      change_point = results[["well_log"]][[package]],
      package = package,
      y_offset = (package_index - 1) * 1000
    )
  )
}

most_selected <- sort(table(comparison_table$change_point), decreasing = TRUE)
most_selected <- sort(as.numeric(names(most_selected[most_selected >= 4])))
for (i in seq_len(length(most_selected) - 1)) {
  if (most_selected[i + 1] - most_selected[i] < 2) {
    most_selected[i] <- NA
    most_selected[i + 1] <- most_selected[i + 1] - 0.5
  }
}
(most_selected <- most_selected[!is.na(most_selected)])
```

```{r detection-comparison-well-log-plot}
if (requireNamespace("ggplot2", quietly = TRUE)) {
  ggplot2::ggplot() +
    ggplot2::geom_point(
      data = data.frame(x = seq_along(well_log), y = c(well_log)),
      ggplot2::aes(x = x, y = y)
    ) +
    ggplot2::geom_vline(
      xintercept = most_selected,
      color = "black",
      linetype = "dashed",
      alpha = 0.2
    ) +
    ggplot2::geom_point(
      data = comparison_table,
      ggplot2::aes(x = change_point, y = 50000 + y_offset, color = package),
      shape = 17,
      size = 1.9
    ) +
    ggplot2::geom_hline(
      data = comparison_table,
      ggplot2::aes(yintercept = 50000 + y_offset, color = package),
      linetype = "dashed",
      alpha = 0.1
    ) +
    ggplot2::coord_cartesian(
      ylim = c(50000 - 500, max(well_log) + 1000),
      xlim = c(-200, length(well_log) + 200),
      expand = FALSE
    ) +
    ggplot2::theme(
      panel.background = ggplot2::element_blank(),
      panel.border = ggplot2::element_rect(colour = "black", fill = NA),
      panel.grid.major = ggplot2::element_blank(),
      panel.grid.minor = ggplot2::element_blank()
    ) +
    ggplot2::xlab(NULL) + ggplot2::ylab(NULL)
}
```

# Time comparison using `well_log`

```{r time-comparison-well-log, eval = FALSE}
results[["microbenchmark"]] <- microbenchmark::microbenchmark(
  fastcpd = fastcpd::fastcpd.mean(well_log, trim = 0.003, r.progress = FALSE),
  changepoint = changepoint::cpt.mean(well_log/mad(well_log), method = "PELT"),
  CptNonPar = CptNonPar::np.mojo(well_log, G = floor(length(well_log) / 6)),
  strucchange =
    strucchange::breakpoints(y ~ 1, data = data.frame(y = well_log)),
  ecp = ecp::e.divisive(matrix(well_log)),
  breakfast = breakfast::breakfast(well_log),
  wbs = wbs::wbs(well_log),
  mosum = mosum::mosum(c(well_log), G = 40),
  fpop = fpop::Fpop(well_log, nrow(well_log)),
  gfpop = gfpop::gfpop(
    data = well_log,
    mygraph = gfpop::graph(
      penalty = 2 * log(length(well_log)) * gfpop::sdDiff(well_log) ^ 2,
      type = "updown"
    ),
    type = "mean"
  ),
  jointseg = jointseg::jointSeg(well_log, K = 12),
  stepR = stepR::stepFit(well_log, alpha = 0.5),
  not = not::not(well_log, contrast = "pcwsConstMean"),
  times = 10
)
```

```{r time-comparison-well-log-result}
results[["microbenchmark"]]
```

```{r time-comparison-well-log-plot}
if (requireNamespace("ggplot2", quietly = TRUE) && requireNamespace("microbenchmark", quietly = TRUE)) {
  ggplot2::autoplot(results[["microbenchmark"]])
}
```

# Notes

This document is generated by the following code:

```shell
R -e 'knitr::knit("vignettes/comparison-packages.Rmd.original", output = "vignettes/comparison-packages.Rmd")' && rm -rf vignettes/comparison-packages && mv -f comparison-packages vignettes
```

# Related issues

-   `mosum`: [[#4](https://github.com/doccstat/fastcpd/issues/4)].
-   `mcp`: [link 1](https://github.com/doccstat/fastcpd/actions/runs/7272426093/job/19814531091)
    and [link 2](https://github.com/doccstat/fastcpd/actions/runs/7272426093/job/19814531284).
-   `bcp`: [[#5](https://github.com/doccstat/fastcpd/issues/5)].
-   `gfpop`: [[#10](https://github.com/doccstat/fastcpd/issues/10)].

# Acknowledgements

-   [Dr. Vito Muggeo](https://www.unipa.it/persone/docenti/m/vito.muggeo),
    author of the `segmented` package for the tips about the piece-wise
    constant function.
-   [Dr. Rebecca Killick](https://www.lancaster.ac.uk/maths/people/rebecca-killick),
    author of the `changepoint` package for the tips about the package update.

# Appendix: all code snippets

```{r save-results, include = FALSE}
if (!file.exists("comparison-packages-results.RData")) {
  save(results, file = "comparison-packages-results.RData")
}
```

```{r ref.label = knitr::all_labels(), echo = TRUE, eval = FALSE}
```
