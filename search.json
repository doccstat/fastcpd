[{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007 Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":[]},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"univariate-mean-change","dir":"Articles","previous_headings":"Data setup","what":"Univariate mean change","title":"Comparison with other R packages","text":"","code":"# Univariate mean change set.seed(1) p <- 1 mean_data_1 <- rbind(   mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(100, p)),   mvtnorm::rmvnorm(400, mean = rep(50, p), sigma = diag(100, p)),   mvtnorm::rmvnorm(300, mean = rep(2, p), sigma = diag(100, p)) )  plot.ts(mean_data_1)"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"univariate-mean-andor-variance-change","dir":"Articles","previous_headings":"Data setup","what":"Univariate mean and/or variance change","title":"Comparison with other R packages","text":"","code":"# Univariate mean and/or variance change set.seed(1) p <- 1 mv_data_1 <- rbind(   mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(1, p)),   mvtnorm::rmvnorm(400, mean = rep(10, p), sigma = diag(1, p)),   mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(50, p)),   mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(1, p)),   mvtnorm::rmvnorm(400, mean = rep(10, p), sigma = diag(1, p)),   mvtnorm::rmvnorm(300, mean = rep(10, p), sigma = diag(50, p)) )  plot.ts(mv_data_1)"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"multivariate-mean-change","dir":"Articles","previous_headings":"Data setup","what":"Multivariate mean change","title":"Comparison with other R packages","text":"","code":"# Multivariate mean change set.seed(1) p <- 3 mean_data_3 <- rbind(   mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(100, p)),   mvtnorm::rmvnorm(400, mean = rep(50, p), sigma = diag(100, p)),   mvtnorm::rmvnorm(300, mean = rep(2, p), sigma = diag(100, p)) )  plot.ts(mean_data_3)"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"multivariate-mean-andor-variance-change","dir":"Articles","previous_headings":"Data setup","what":"Multivariate mean and/or variance change","title":"Comparison with other R packages","text":"","code":"# Multivariate mean and/or variance change set.seed(1) p <- 3 mv_data_3 <- rbind(   mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(1, p)),   mvtnorm::rmvnorm(400, mean = rep(10, p), sigma = diag(1, p)),   mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(50, p)),   mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(1, p)),   mvtnorm::rmvnorm(400, mean = rep(10, p), sigma = diag(1, p)),   mvtnorm::rmvnorm(300, mean = rep(10, p), sigma = diag(50, p)) )  plot.ts(mv_data_3)"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"linear-regression","dir":"Articles","previous_headings":"Data setup","what":"Linear regression","title":"Comparison with other R packages","text":"","code":"# Linear regression set.seed(1) n <- 300 p <- 4 x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p)) theta_0 <- rbind(c(1, 3.2, -1, 0), c(-1, -0.5, 2.5, -2), c(0.8, 0, 1, 2)) y <- c(   x[1:100, ] %*% theta_0[1, ] + rnorm(100, 0, 3),   x[101:200, ] %*% theta_0[2, ] + rnorm(100, 0, 3),   x[201:n, ] %*% theta_0[3, ] + rnorm(100, 0, 3) ) lm_data <- data.frame(y = y, x = x)  plot.ts(lm_data)"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"logistic-regression","dir":"Articles","previous_headings":"Data setup","what":"Logistic regression","title":"Comparison with other R packages","text":"","code":"# Logistic regression set.seed(1) n <- 500 p <- 4 x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p)) theta <- rbind(rnorm(p, 0, 1), rnorm(p, 2, 1)) y <- c(   rbinom(300, 1, 1 / (1 + exp(-x[1:300, ] %*% theta[1, ]))),   rbinom(200, 1, 1 / (1 + exp(-x[301:n, ] %*% theta[2, ]))) ) binomial_data <- data.frame(y = y, x = x)  plot.ts(binomial_data)"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"poisson-regression","dir":"Articles","previous_headings":"Data setup","what":"Poisson regression","title":"Comparison with other R packages","text":"","code":"# Poisson regression set.seed(1) n <- 1100 p <- 3 x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p)) delta <- rnorm(p) theta_0 <- c(1, 0.3, -1) y <- c(   rpois(500, exp(x[1:500, ] %*% theta_0)),   rpois(300, exp(x[501:800, ] %*% (theta_0 + delta))),   rpois(200, exp(x[801:1000, ] %*% theta_0)),   rpois(100, exp(x[1001:1100, ] %*% (theta_0 - delta))) ) poisson_data <- data.frame(y = y, x = x)  plot.ts(log(poisson_data$y)) plot.ts(poisson_data[, -1])"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"lasso","dir":"Articles","previous_headings":"Data setup","what":"Lasso","title":"Comparison with other R packages","text":"","code":"# Lasso set.seed(1) n <- 480 p_true <- 6 p <- 50 x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p)) theta_0 <- rbind(   runif(p_true, -5, -2),   runif(p_true, -3, 3),   runif(p_true, 2, 5),   runif(p_true, -5, 5) ) theta_0 <- cbind(theta_0, matrix(0, ncol = p - p_true, nrow = 4)) y <- c(   x[1:80, ] %*% theta_0[1, ] + rnorm(80, 0, 1),   x[81:200, ] %*% theta_0[2, ] + rnorm(120, 0, 1),   x[201:320, ] %*% theta_0[3, ] + rnorm(120, 0, 1),   x[321:n, ] %*% theta_0[4, ] + rnorm(160, 0, 1) ) lasso_data <- data.frame(y = y, x = x)  plot.ts(lasso_data[, seq_len(p_true + 1)])"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"ar3","dir":"Articles","previous_headings":"Data setup","what":"AR(3)","title":"Comparison with other R packages","text":"","code":"# AR(3) set.seed(1) n <- 1000 x <- rep(0, n + 3) for (i in 1:600) {   x[i + 3] <- 0.6 * x[i + 2] - 0.2 * x[i + 1] + 0.1 * x[i] + rnorm(1, 0, 3) } for (i in 601:1000) {   x[i + 3] <- 0.3 * x[i + 2] + 0.4 * x[i + 1] + 0.2 * x[i] + rnorm(1, 0, 3) } ar_data <- x[-seq_len(3)]  plot.ts(ar_data)"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"garch1-1","dir":"Articles","previous_headings":"Data setup","what":"GARCH(1, 1)","title":"Comparison with other R packages","text":"","code":"# GARCH(1, 1) set.seed(1) n <- 400 sigma_2 <- rep(1, n + 1) x <- rep(0, n + 1) for (i in seq_len(200)) {   sigma_2[i + 1] <- 20 + 0.5 * x[i]^2 + 0.1 * sigma_2[i]   x[i + 1] <- rnorm(1, 0, sqrt(sigma_2[i + 1])) } for (i in 201:400) {   sigma_2[i + 1] <- 1 + 0.1 * x[i]^2 + 0.5 * sigma_2[i]   x[i + 1] <- rnorm(1, 0, sqrt(sigma_2[i + 1])) } garch_data <- x[-1]  plot.ts(garch_data)"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"var2","dir":"Articles","previous_headings":"Data setup","what":"VAR(2)","title":"Comparison with other R packages","text":"","code":"# VAR(2) set.seed(1) n <- 800 p <- 2 theta_1 <- matrix(c(-0.3, 0.6, -0.5, 0.4, 0.2, 0.2, 0.2, -0.2), nrow = p) theta_2 <- matrix(c(0.3, -0.4, 0.1, -0.5, -0.5, -0.2, -0.5, 0.2), nrow = p) x <- matrix(0, n + 2, p) for (i in 1:500) {   x[i + 2, ] <- theta_1 %*% c(x[i + 1, ], x[i, ]) + rnorm(p, 0, 1) } for (i in 501:n) {   x[i + 2, ] <- theta_2 %*% c(x[i + 1, ], x[i, ]) + rnorm(p, 0, 1) } var_data <- x[-seq_len(2), ]  plot.ts(var_data)"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"univariate-mean-change-1","dir":"Articles","previous_headings":"","what":"Univariate mean change","title":"Comparison with other R packages","text":"true change points 300 700. methods plotted due un-retrievable change points.","code":"fastcpd::fastcpd.mean(mean_data_1, r.progress = FALSE)@cp_set #> [1] 300 700 CptNonPar::np.mojo(mean_data_1, G = floor(length(mean_data_1) / 6))$cpts #> [1] 300 700 # Slow strucchange::breakpoints(y ~ 1, data = data.frame(y = mean_data_1))$breakpoints #> [1] 300 700 # Slower ecp::e.divisive(mean_data_1)$estimates #> [1]    1  301  701 1001 # Data need to be processed changepoint::cpt.mean(c(mean_data_1))@cpts #> [1]  300 1000 breakfast::breakfast(mean_data_1)$cptmodel.list[[6]]$cpts #> [1] 300 700 wbs::wbs(mean_data_1)$cpt$cpt.ic$mbic.penalty #> [1] 300 700 # Data need to be processed. `G` is selected based on the example if (interactive()) {   mosum::mosum(c(mean_data_1), G = 40)$cpts.info$cpts } fpop::Fpop(mean_data_1, nrow(mean_data_1))$t.est #> [1]  300  700 1000 gfpop::gfpop(   data = mean_data_1,   mygraph = gfpop::graph(     penalty = 2 * log(nrow(mean_data_1)) * gfpop::sdDiff(mean_data_1) ^ 2,     type = \"updown\"   ),   type = \"mean\" )$changepoints #> [1]  300  700 1000 invisible(   suppressMessages(     capture.output(       result_InspectChangepoint <- InspectChangepoint::inspect(         t(mean_data_1),         threshold = InspectChangepoint::compute.threshold(           nrow(mean_data_1), ncol(mean_data_1)         )       )     )   ) ) result_InspectChangepoint$changepoints[, \"location\"] #> [1] 300 700 jointseg::jointSeg(mean_data_1, K = 2)$bestBkp #> [1] 300 700 Rbeast::beast(   mean_data_1, season = \"none\", print.progress = FALSE, quiet = TRUE )$trend$cp #>  [1] 701 301 NaN NaN NaN NaN NaN NaN NaN NaN stepR::stepFit(mean_data_1, alpha = 0.5)$rightEnd #> [1]  300  700 1000 cpm::processStream(mean_data_1, cpmType = \"Student\")$changePoints #> [1] 299 699 segmented::segmented(   lm(y ~ 1 + x, data.frame(y = mean_data_1, x = seq_len(nrow(mean_data_1)))),   seg.Z = ~ x )$psi[, \"Est.\"] #> [1] 495 # Slowest if (interactive()) {   plot(     mcp::mcp(       list(y ~ 1, ~ 1, ~ 1),       data = data.frame(y = mean_data_1, x = seq_len(nrow(mean_data_1))),       par_x = \"x\"     )   ) } plot(not::not(mean_data_1, contrast = \"pcwsConstMean\")) # plot(bcp::bcp(mean_data_1))"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"univariate-mean-andor-variance-change-1","dir":"Articles","previous_headings":"","what":"Univariate mean and/or variance change","title":"Comparison with other R packages","text":"true change points 300, 700, 1000, 1300 1700. methods plotted due un-retrievable change points.","code":"fastcpd::fastcpd.mv(mv_data_1, r.progress = FALSE)@cp_set #> [1]  300  700 1000 1300 1700 # Slow ecp::e.divisive(mv_data_1)$estimates #> [1]    1  301  701 1001 1301 1701 2001 # Data need to be processed changepoint::cpt.meanvar(c(mv_data_1))@cpts #> [1]  300 2000 CptNonPar::np.mojo(mv_data_1, G = floor(length(mv_data_1) / 6))$cpts #> [1]  333  700 1300 cpm::processStream(mv_data_1, cpmType = \"GLR\")$changePoints #>  [1]  293  300  403  408  618  621  696 1000 1021 1024 1293 1300 1417 1693 1981 invisible(   suppressMessages(     capture.output(       result_InspectChangepoint <- InspectChangepoint::inspect(         t(mv_data_1),         threshold = InspectChangepoint::compute.threshold(           nrow(mv_data_1), ncol(mv_data_1)         )       )     )   ) ) result_InspectChangepoint$changepoints[, \"location\"] #>   [1]  300  700  702  704  707  708  712  715  716  717  718  721  722  723  726 #>  [16]  727  729  731  732  734  736  740  742  744  746  748  750  753  755  756 #>  [31]  757  759  760  762  764  765  768  771  772  774  776  777  784  785  786 #>  [46]  789  791  792  794  798  799  801  802  803  807  809  810  813  815  817 #>  [61]  819  826  827  828  829  831  833  835  836  837  838  840  841  842  843 #>  [76]  845  848  849  852  854  860  862  864  866  868  870  872  875  879  881 #>  [91]  884  886  887  888  889  896  897  898  899  901  903  904  905  906  909 #> [106]  912  913  915  917  919  921  922  923  927  928  932  934  936  937  940 #> [121]  944  945  947  948  949  958  959  961  962  963  964  966  967  968  972 #> [136]  974  976  978  979 1300 1700 1702 1703 1704 1705 1708 1710 1712 1714 1716 #> [151] 1717 1718 1721 1723 1725 1726 1731 1733 1735 1736 1737 1739 1742 1745 1747 #> [166] 1748 1752 1754 1756 1758 1759 1768 1770 1771 1778 1785 1790 1793 1795 1796 #> [181] 1797 1799 1800 1803 1804 1805 1806 1807 1808 1821 1828 1829 1833 1835 1837 #> [196] 1840 1841 1842 1848 1849 1851 1852 1854 1855 1857 1862 1863 1865 1867 1868 #> [211] 1876 1878 1879 1880 1882 1883 1884 1886 1887 1889 1894 1898 1899 1905 1906 #> [226] 1907 1908 1909 1912 1919 1926 1927 1928 1930 1933 1934 1935 1936 1938 1940 #> [241] 1952 1955 1956 1960 1962 1963 1966 1967 1969 1970 1974 1976 1977 1978 1980 #> [256] 1985 1987 1990 1997 1998 Rbeast::beast(   mv_data_1, season = \"none\", print.progress = FALSE, quiet = TRUE )$trend$cp #>  [1] 1301  301 1794 1986 1855  703 1981 1769  709  713 # Slower if (interactive()) {   plot(     mcp::mcp(       list(y ~ 1, ~ 1, ~ 1, ~ 1, ~ 1, ~ 1),       data = data.frame(y = mv_data_1, x = seq_len(nrow(mv_data_1))),       par_x = \"x\"     )   ) } plot(not::not(mv_data_1, contrast = \"pcwsConstMeanVar\")) #> Press [enter] to continue"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"multivariate-mean-change-1","dir":"Articles","previous_headings":"","what":"Multivariate mean change","title":"Comparison with other R packages","text":"true change points 300 700. methods plotted due un-retrievable change points.","code":"fastcpd::fastcpd.mean(mean_data_3, r.progress = FALSE)@cp_set #> [1] 300 700 CptNonPar::np.mojo(mean_data_3, G = floor(nrow(mean_data_3) / 6))$cpts #> [1] 300 700 invisible(   suppressMessages(     capture.output(       result_InspectChangepoint <- InspectChangepoint::inspect(         t(mean_data_3),         threshold = InspectChangepoint::compute.threshold(           nrow(mean_data_3), ncol(mean_data_3)         )       )     )   ) ) result_InspectChangepoint$changepoints[, \"location\"] #> [1] 300 700 jointseg::jointSeg(mean_data_3, K = 2)$bestBkp #> [1] 300 700 invisible(   capture.output(     result_Rbeast <- Rbeast::beast123(       mean_data_3,       metadata = list(whichDimIsTime = 1),       season = \"none\"     )   ) ) result_Rbeast$trend$cp #>       [,1] [,2] [,3] #>  [1,]  301  701  701 #>  [2,]  701  301  301 #>  [3,]  143  132  771 #>  [4,]  NaN  NaN  NaN #>  [5,]  NaN  NaN  NaN #>  [6,]  NaN  NaN  NaN #>  [7,]  NaN  NaN  NaN #>  [8,]  NaN  NaN  NaN #>  [9,]  NaN  NaN  NaN #> [10,]  NaN  NaN  NaN # Slow strucchange::breakpoints(   cbind(y.1, y.2, y.3) ~ 1, data = data.frame(y = mean_data_3) )$breakpoints #> [1] 300 700 # Slower ecp::e.divisive(mean_data_3)$estimates #> [1]    1  301  701 1001 # plot(bcp::bcp(mean_data_3))"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"multivariate-mean-andor-variance-change-1","dir":"Articles","previous_headings":"","what":"Multivariate mean and/or variance change","title":"Comparison with other R packages","text":"true change points 300, 700, 1000, 1300 1700. methods plotted due un-retrievable change points.","code":"fastcpd::fastcpd.mv(mv_data_3, r.progress = FALSE)@cp_set #> [1]  300  700 1000 1300 1700 # Slow ecp::e.divisive(mv_data_3)$estimates #> [1]    1  301  701 1001 1301 1701 2001 invisible(   suppressMessages(     capture.output(       result_InspectChangepoint <- InspectChangepoint::inspect(         t(mv_data_3),         threshold = InspectChangepoint::compute.threshold(           nrow(mv_data_3), ncol(mv_data_3)         )       )     )   ) ) result_InspectChangepoint$changepoints[, \"location\"] #>   [1]  300  700  701  703  704  705  707  708  710  711  712  714  715  716  717 #>  [16]  719  721  722  723  725  726  730  731  732  734  735  736  738  739  740 #>  [31]  741  742  744  745  747  748  749  752  753  754  756  757  759  761  762 #>  [46]  763  764  766  768  769  770  772  773  774  776  777  778  780  781  783 #>  [61]  784  786  788  789  791  793  795  797  799  800  801  803  805  806  808 #>  [76]  809  811  813  814  816  817  819  821  822  824  825  826  828  829  830 #>  [91]  831  832  834  835  837  838  839  841  842  843  845  846  847  852  853 #> [106]  855  857  860  861  862  864  865  866  868  869  870  871  873  876  877 #> [121]  878  880  882  883  884  886  888  891  893  895  896  898  900  901  903 #> [136]  904  905  906  908  909  910  911  914  915  916  919  920  921  923  924 #> [151]  926  927  928  930  931  933  934  936  938  939  940  942  944  945  946 #> [166]  948  949  951  952  954  956  957  959  960  961  962  964  965  966  968 #> [181]  969  970  971  973  974  976  977  979  980  982  983  984  985  986  988 #> [196]  989  990  992  993  995  996  998 1000 1300 1700 1701 1702 1705 1708 1710 #> [211] 1711 1712 1713 1715 1716 1717 1718 1720 1721 1724 1725 1726 1728 1729 1730 #> [226] 1731 1733 1734 1735 1737 1738 1740 1742 1743 1745 1747 1749 1750 1752 1753 #> [241] 1754 1755 1756 1758 1759 1760 1762 1763 1764 1766 1767 1769 1770 1771 1773 #> [256] 1774 1776 1777 1779 1780 1782 1783 1785 1787 1788 1790 1791 1792 1793 1794 #> [271] 1796 1798 1800 1801 1803 1805 1809 1811 1812 1813 1814 1816 1817 1819 1820 #> [286] 1821 1823 1824 1826 1828 1830 1832 1833 1834 1836 1838 1839 1841 1842 1843 #> [301] 1846 1847 1850 1851 1853 1854 1856 1857 1859 1861 1862 1864 1865 1866 1869 #> [316] 1870 1872 1874 1876 1878 1879 1881 1882 1883 1885 1887 1888 1889 1890 1892 #> [331] 1894 1896 1898 1899 1900 1902 1904 1905 1907 1908 1909 1911 1913 1916 1918 #> [346] 1919 1920 1922 1923 1925 1926 1928 1930 1931 1933 1935 1936 1937 1939 1940 #> [361] 1942 1943 1945 1947 1948 1950 1951 1952 1953 1955 1956 1957 1959 1960 1961 #> [376] 1963 1964 1966 1967 1968 1970 1972 1974 1976 1977 1978 1982 1983 1985 1987 #> [391] 1990 1992 1993 1994 1996 1997 invisible(   capture.output(     result_Rbeast <- Rbeast::beast123(       mv_data_3,       metadata = list(whichDimIsTime = 1),       season = \"none\"     )   ) ) result_Rbeast$trend$cp #>       [,1] [,2] [,3] #>  [1,] 1301  301  301 #>  [2,]  301  701  702 #>  [3,]  701 1301 1301 #>  [4,] 1994  830  769 #>  [5,] 1978  997 1924 #>  [6,] 1905 1001  783 #>  [7,] 1912  881  790 #>  [8,] 1984 1931  756 #>  [9,] 1855 1926  833 #> [10,] 1826  887  760"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"linear-regression-1","dir":"Articles","previous_headings":"","what":"Linear regression","title":"Comparison with other R packages","text":"true change points 100 200.","code":"fastcpd::fastcpd.lm(lm_data, r.progress = FALSE)@cp_set #> [1]  97 201 strucchange::breakpoints(y ~ . - 1, data = lm_data)$breakpoints #> [1] 100 201 segmented::segmented(   lm(     y ~ . - 1,     data.frame(y = lm_data$y, x = lm_data[, -1], index = seq_len(nrow(lm_data)))   ),   seg.Z = ~ index )$psi[, \"Est.\"] #> [1] 233"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"logistic-regression-1","dir":"Articles","previous_headings":"","what":"Logistic regression","title":"Comparison with other R packages","text":"true change point 300.","code":"fastcpd::fastcpd.binomial(binomial_data, r.progress = FALSE)@cp_set #> [1] 301 strucchange::breakpoints(y ~ . - 1, data = binomial_data)$breakpoints #> [1] 297"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"poisson-regression-1","dir":"Articles","previous_headings":"","what":"Poisson regression","title":"Comparison with other R packages","text":"true change points 500, 800 1000.","code":"fastcpd::fastcpd.poisson(poisson_data, r.progress = FALSE)@cp_set #> [1]  505  800 1003 # Slow strucchange::breakpoints(y ~ . - 1, data = poisson_data)$breakpoints #> [1] 935"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"lasso-1","dir":"Articles","previous_headings":"","what":"Lasso","title":"Comparison with other R packages","text":"true change points 80, 200 320.","code":"fastcpd::fastcpd.lasso(lasso_data, r.progress = FALSE)@cp_set #> [1]  79 200 325 # Slow strucchange::breakpoints(y ~ . - 1, data = lasso_data)$breakpoints #> [1]  80 200 321"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"ar3-1","dir":"Articles","previous_headings":"","what":"AR(3)","title":"Comparison with other R packages","text":"true change point 600. methods plotted due un-retrievable change points.","code":"fastcpd::fastcpd.ar(ar_data, 3, r.progress = FALSE)@cp_set #> [1] 614 CptNonPar::np.mojo(ar_data, G = floor(length(ar_data) / 6))$cpts #> integer(0) segmented::segmented(   lm(     y ~ x + 1, data.frame(y = ar_data, x = seq_along(ar_data))   ),   seg.Z = ~ x )$psi[, \"Est.\"] #> [1] 690 # Slow if (interactive()) {   plot(     mcp::mcp(       list(y ~ 1 + ar(3), ~ 0 + ar(3)),       data = data.frame(y = ar_data, x = seq_along(ar_data)),       par_x = \"x\"     )   ) }"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"garch1-1-1","dir":"Articles","previous_headings":"","what":"GARCH(1, 1)","title":"Comparison with other R packages","text":"true change point 200.","code":"fastcpd::fastcpd.garch(garch_data, c(1, 1), r.progress = FALSE)@cp_set #> Registered S3 method overwritten by 'quantmod': #>   method            from #>   as.zoo.data.frame zoo #> Residual calculation failed. #> [1] 205 CptNonPar::np.mojo(garch_data, G = floor(length(garch_data) / 6))$cpts #> [1] 206 strucchange::breakpoints(x ~ 1, data = data.frame(x = garch_data))$breakpoints #> [1] NA"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"var2-1","dir":"Articles","previous_headings":"","what":"VAR(2)","title":"Comparison with other R packages","text":"true change points 500.","code":"fastcpd::fastcpd.var(   var_data, 2, cost_adjustment = NULL, r.progress = FALSE )@cp_set #> [1] 516 VARDetect::tbss(var_data) #> [1] \"first.brk.points:\" #>  [1] 140 196 252 308 364 420 476 532 588 644 700 #> [1] \"selected lambda1:\" #> [1] 0.2107081 #> [1] \"selected lambda2:\" #> [1] 0.02943525 #> [1] \"second.brk.points:\" #> [1] 308 364 588 #> [1] \"second.brk.points:\" #> [1] 308 476 588 #> [1] \"second.brk.points:\" #> [1] 476 532 #> [1] \"second.brk.points:\" #> [1] 476 532 #> [1] \"second.brk.points:\" #> [1] 476 532 #> no refit for the parameter estimation #> Estimated change points are: 501"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"time-comparison-using-well_log","dir":"Articles","previous_headings":"","what":"Time comparison using well_log","title":"Comparison with other R packages","text":"","code":"microbenchmark_result <- microbenchmark::microbenchmark(   fastcpd = fastcpd.mean(well_log, trim = 0.003, r.progress = FALSE),   changepoint = changepoint::cpt.mean(well_log, method = \"PELT\"),   CptNonPar = CptNonPar::np.mojo(well_log, G = floor(length(well_log) / 6)),   strucchange =     strucchange::breakpoints(y ~ 1, data = data.frame(y = well_log)),   ecp = ecp::e.divisive(matrix(well_log)),   breakfast = breakfast::breakfast(well_log),   wbs = wbs::wbs(well_log),   mosum = mosum::mosum(c(well_log), G = 40),   fpop = fpop::Fpop(well_log, nrow(well_log)),   gfpop = gfpop::gfpop(     data = well_log,     mygraph = gfpop::graph(       penalty = 2 * log(length(well_log)) * gfpop::sdDiff(well_log) ^ 2,       type = \"updown\"     ),     type = \"mean\"   ),   InspectChangepoint = InspectChangepoint::inspect(     well_log,     threshold = InspectChangepoint::compute.threshold(length(well_log), 1)   ),   jointseg = jointseg::jointSeg(well_log, K = 12),   Rbeast = Rbeast::beast(     well_log, season = \"none\", print.progress = FALSE, quiet = TRUE   ),   stepR = stepR::stepFit(well_log, alpha = 0.5),   # mcp = mcp::mcp(   #   list(y ~ 1, ~ 1, ~ 1, ~ 1, ~ 1, ~ 1, ~ 1, ~ 1, ~ 1, ~ 1, ~ 1, ~ 1),   #   data = data.frame(y = well_log, x = seq_along(well_log)),   #   par_x = \"x\"   # ),   not = not::not(well_log, contrast = \"pcwsConstMean\"),   times = 10 ) #> Unit: milliseconds #>                expr          min           lq         mean       median           uq          max neval #>             fastcpd 4.010279e+02 4.129134e+02 4.171979e+02 4.148564e+02 4.196057e+02 4.350300e+02    10 #>         changepoint 3.195488e+01 3.230887e+01 3.743290e+01 3.352390e+01 4.418598e+01 4.980063e+01    10 #>           CptNonPar 1.809139e+04 1.867986e+04 1.904000e+04 1.876936e+04 1.947816e+04 2.076009e+04    10 #>         strucchange 5.813672e+04 5.831023e+04 5.963604e+04 5.952739e+04 6.139957e+04 6.173251e+04    10 #>                 ecp 7.534981e+05 7.642983e+05 7.742041e+05 7.661485e+05 7.880130e+05 8.003981e+05    10 #>           breakfast 9.231426e+03 9.261763e+03 9.514283e+03 9.492325e+03 9.630395e+03 1.001344e+04    10 #>                 wbs 1.133042e+02 1.168601e+02 1.189637e+02 1.187244e+02 1.201765e+02 1.281057e+02    10 #>               mosum 1.082397e+00 1.167387e+00 1.213233e+00 1.209105e+00 1.286479e+00 1.320333e+00    10 #>                fpop 2.407630e+00 2.481348e+00 2.641625e+00 2.551970e+00 2.618455e+00 3.328585e+00    10 #>               gfpop 5.918783e+01 5.959448e+01 6.081621e+01 6.006626e+01 6.048699e+01 6.725864e+01    10 #>  InspectChangepoint 1.550181e+02 1.885944e+02 2.103973e+02 2.030795e+02 2.262247e+02 3.025476e+02    10 #>            jointseg 1.082510e+01 1.082948e+01 1.174498e+01 1.110779e+01 1.221183e+01 1.424236e+01    10 #>              Rbeast 6.311987e+02 6.634019e+02 6.702594e+02 6.680217e+02 6.846772e+02 7.048629e+02    10 #>               stepR 2.812109e+01 2.836331e+01 2.864408e+01 2.862293e+01 2.897236e+01 2.933441e+01    10 #>                 not 9.350182e+01 9.469137e+01 9.684097e+01 9.647117e+01 9.763828e+01 1.031233e+02    10 ggplot2::autoplot(microbenchmark_result)"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"appendix-all-code-snippets","dir":"Articles","previous_headings":"","what":"Appendix: all code snippets","title":"Comparison with other R packages","text":"","code":"knitr::opts_chunk$set(   collapse = TRUE, comment = \"#>\", eval = TRUE, cache = FALSE,   warning = FALSE, fig.width = 8, fig.height = 5 ) for (   package in c(     \"ggplot2\", \"mvtnorm\",     # \"bcp\",     \"breakfast\", \"changepoint\", \"cpm\", \"CptNonPar\", \"ecp\", \"fpop\", \"gfpop\",     \"InspectChangepoint\", \"jointseg\", \"mcp\", \"mosum\", \"not\", \"Rbeast\",     \"segmented\", \"stepR\", \"strucchange\", \"VARDetect\", \"wbs\"   ) ) {   if (!requireNamespace(package, quietly = TRUE)) utils::install.packages(     package, repos = \"https://cloud.r-project.org\", quiet = TRUE   ) } # Univariate mean change set.seed(1) p <- 1 mean_data_1 <- rbind(   mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(100, p)),   mvtnorm::rmvnorm(400, mean = rep(50, p), sigma = diag(100, p)),   mvtnorm::rmvnorm(300, mean = rep(2, p), sigma = diag(100, p)) )  plot.ts(mean_data_1) # Univariate mean and/or variance change set.seed(1) p <- 1 mv_data_1 <- rbind(   mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(1, p)),   mvtnorm::rmvnorm(400, mean = rep(10, p), sigma = diag(1, p)),   mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(50, p)),   mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(1, p)),   mvtnorm::rmvnorm(400, mean = rep(10, p), sigma = diag(1, p)),   mvtnorm::rmvnorm(300, mean = rep(10, p), sigma = diag(50, p)) )  plot.ts(mv_data_1) # Multivariate mean change set.seed(1) p <- 3 mean_data_3 <- rbind(   mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(100, p)),   mvtnorm::rmvnorm(400, mean = rep(50, p), sigma = diag(100, p)),   mvtnorm::rmvnorm(300, mean = rep(2, p), sigma = diag(100, p)) )  plot.ts(mean_data_3) # Multivariate mean and/or variance change set.seed(1) p <- 3 mv_data_3 <- rbind(   mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(1, p)),   mvtnorm::rmvnorm(400, mean = rep(10, p), sigma = diag(1, p)),   mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(50, p)),   mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(1, p)),   mvtnorm::rmvnorm(400, mean = rep(10, p), sigma = diag(1, p)),   mvtnorm::rmvnorm(300, mean = rep(10, p), sigma = diag(50, p)) )  plot.ts(mv_data_3) # Linear regression set.seed(1) n <- 300 p <- 4 x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p)) theta_0 <- rbind(c(1, 3.2, -1, 0), c(-1, -0.5, 2.5, -2), c(0.8, 0, 1, 2)) y <- c(   x[1:100, ] %*% theta_0[1, ] + rnorm(100, 0, 3),   x[101:200, ] %*% theta_0[2, ] + rnorm(100, 0, 3),   x[201:n, ] %*% theta_0[3, ] + rnorm(100, 0, 3) ) lm_data <- data.frame(y = y, x = x)  plot.ts(lm_data) # Logistic regression set.seed(1) n <- 500 p <- 4 x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p)) theta <- rbind(rnorm(p, 0, 1), rnorm(p, 2, 1)) y <- c(   rbinom(300, 1, 1 / (1 + exp(-x[1:300, ] %*% theta[1, ]))),   rbinom(200, 1, 1 / (1 + exp(-x[301:n, ] %*% theta[2, ]))) ) binomial_data <- data.frame(y = y, x = x)  plot.ts(binomial_data) # Poisson regression set.seed(1) n <- 1100 p <- 3 x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p)) delta <- rnorm(p) theta_0 <- c(1, 0.3, -1) y <- c(   rpois(500, exp(x[1:500, ] %*% theta_0)),   rpois(300, exp(x[501:800, ] %*% (theta_0 + delta))),   rpois(200, exp(x[801:1000, ] %*% theta_0)),   rpois(100, exp(x[1001:1100, ] %*% (theta_0 - delta))) ) poisson_data <- data.frame(y = y, x = x)  plot.ts(log(poisson_data$y)) plot.ts(poisson_data[, -1]) # Lasso set.seed(1) n <- 480 p_true <- 6 p <- 50 x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p)) theta_0 <- rbind(   runif(p_true, -5, -2),   runif(p_true, -3, 3),   runif(p_true, 2, 5),   runif(p_true, -5, 5) ) theta_0 <- cbind(theta_0, matrix(0, ncol = p - p_true, nrow = 4)) y <- c(   x[1:80, ] %*% theta_0[1, ] + rnorm(80, 0, 1),   x[81:200, ] %*% theta_0[2, ] + rnorm(120, 0, 1),   x[201:320, ] %*% theta_0[3, ] + rnorm(120, 0, 1),   x[321:n, ] %*% theta_0[4, ] + rnorm(160, 0, 1) ) lasso_data <- data.frame(y = y, x = x)  plot.ts(lasso_data[, seq_len(p_true + 1)]) # AR(3) set.seed(1) n <- 1000 x <- rep(0, n + 3) for (i in 1:600) {   x[i + 3] <- 0.6 * x[i + 2] - 0.2 * x[i + 1] + 0.1 * x[i] + rnorm(1, 0, 3) } for (i in 601:1000) {   x[i + 3] <- 0.3 * x[i + 2] + 0.4 * x[i + 1] + 0.2 * x[i] + rnorm(1, 0, 3) } ar_data <- x[-seq_len(3)]  plot.ts(ar_data) # GARCH(1, 1) set.seed(1) n <- 400 sigma_2 <- rep(1, n + 1) x <- rep(0, n + 1) for (i in seq_len(200)) {   sigma_2[i + 1] <- 20 + 0.5 * x[i]^2 + 0.1 * sigma_2[i]   x[i + 1] <- rnorm(1, 0, sqrt(sigma_2[i + 1])) } for (i in 201:400) {   sigma_2[i + 1] <- 1 + 0.1 * x[i]^2 + 0.5 * sigma_2[i]   x[i + 1] <- rnorm(1, 0, sqrt(sigma_2[i + 1])) } garch_data <- x[-1]  plot.ts(garch_data) # VAR(2) set.seed(1) n <- 800 p <- 2 theta_1 <- matrix(c(-0.3, 0.6, -0.5, 0.4, 0.2, 0.2, 0.2, -0.2), nrow = p) theta_2 <- matrix(c(0.3, -0.4, 0.1, -0.5, -0.5, -0.2, -0.5, 0.2), nrow = p) x <- matrix(0, n + 2, p) for (i in 1:500) {   x[i + 2, ] <- theta_1 %*% c(x[i + 1, ], x[i, ]) + rnorm(p, 0, 1) } for (i in 501:n) {   x[i + 2, ] <- theta_2 %*% c(x[i + 1, ], x[i, ]) + rnorm(p, 0, 1) } var_data <- x[-seq_len(2), ]  plot.ts(var_data) fastcpd::fastcpd.mean(mean_data_1, r.progress = FALSE)@cp_set CptNonPar::np.mojo(mean_data_1, G = floor(length(mean_data_1) / 6))$cpts # Slow strucchange::breakpoints(y ~ 1, data = data.frame(y = mean_data_1))$breakpoints # Slower ecp::e.divisive(mean_data_1)$estimates # Data need to be processed changepoint::cpt.mean(c(mean_data_1))@cpts breakfast::breakfast(mean_data_1)$cptmodel.list[[6]]$cpts wbs::wbs(mean_data_1)$cpt$cpt.ic$mbic.penalty # Data need to be processed. `G` is selected based on the example if (interactive()) {   mosum::mosum(c(mean_data_1), G = 40)$cpts.info$cpts } fpop::Fpop(mean_data_1, nrow(mean_data_1))$t.est gfpop::gfpop(   data = mean_data_1,   mygraph = gfpop::graph(     penalty = 2 * log(nrow(mean_data_1)) * gfpop::sdDiff(mean_data_1) ^ 2,     type = \"updown\"   ),   type = \"mean\" )$changepoints invisible(   suppressMessages(     capture.output(       result_InspectChangepoint <- InspectChangepoint::inspect(         t(mean_data_1),         threshold = InspectChangepoint::compute.threshold(           nrow(mean_data_1), ncol(mean_data_1)         )       )     )   ) ) result_InspectChangepoint$changepoints[, \"location\"] jointseg::jointSeg(mean_data_1, K = 2)$bestBkp Rbeast::beast(   mean_data_1, season = \"none\", print.progress = FALSE, quiet = TRUE )$trend$cp stepR::stepFit(mean_data_1, alpha = 0.5)$rightEnd cpm::processStream(mean_data_1, cpmType = \"Student\")$changePoints segmented::segmented(   lm(y ~ 1 + x, data.frame(y = mean_data_1, x = seq_len(nrow(mean_data_1)))),   seg.Z = ~ x )$psi[, \"Est.\"] # Slowest if (interactive()) {   plot(     mcp::mcp(       list(y ~ 1, ~ 1, ~ 1),       data = data.frame(y = mean_data_1, x = seq_len(nrow(mean_data_1))),       par_x = \"x\"     )   ) } plot(not::not(mean_data_1, contrast = \"pcwsConstMean\")) # plot(bcp::bcp(mean_data_1)) fastcpd::fastcpd.mv(mv_data_1, r.progress = FALSE)@cp_set # Slow ecp::e.divisive(mv_data_1)$estimates # Data need to be processed changepoint::cpt.meanvar(c(mv_data_1))@cpts CptNonPar::np.mojo(mv_data_1, G = floor(length(mv_data_1) / 6))$cpts cpm::processStream(mv_data_1, cpmType = \"GLR\")$changePoints invisible(   suppressMessages(     capture.output(       result_InspectChangepoint <- InspectChangepoint::inspect(         t(mv_data_1),         threshold = InspectChangepoint::compute.threshold(           nrow(mv_data_1), ncol(mv_data_1)         )       )     )   ) ) result_InspectChangepoint$changepoints[, \"location\"] Rbeast::beast(   mv_data_1, season = \"none\", print.progress = FALSE, quiet = TRUE )$trend$cp # Slower if (interactive()) {   plot(     mcp::mcp(       list(y ~ 1, ~ 1, ~ 1, ~ 1, ~ 1, ~ 1),       data = data.frame(y = mv_data_1, x = seq_len(nrow(mv_data_1))),       par_x = \"x\"     )   ) } plot(not::not(mv_data_1, contrast = \"pcwsConstMeanVar\")) fastcpd::fastcpd.mean(mean_data_3, r.progress = FALSE)@cp_set CptNonPar::np.mojo(mean_data_3, G = floor(nrow(mean_data_3) / 6))$cpts invisible(   suppressMessages(     capture.output(       result_InspectChangepoint <- InspectChangepoint::inspect(         t(mean_data_3),         threshold = InspectChangepoint::compute.threshold(           nrow(mean_data_3), ncol(mean_data_3)         )       )     )   ) ) result_InspectChangepoint$changepoints[, \"location\"] jointseg::jointSeg(mean_data_3, K = 2)$bestBkp invisible(   capture.output(     result_Rbeast <- Rbeast::beast123(       mean_data_3,       metadata = list(whichDimIsTime = 1),       season = \"none\"     )   ) ) result_Rbeast$trend$cp # Slow strucchange::breakpoints(   cbind(y.1, y.2, y.3) ~ 1, data = data.frame(y = mean_data_3) )$breakpoints # Slower ecp::e.divisive(mean_data_3)$estimates # plot(bcp::bcp(mean_data_3)) fastcpd::fastcpd.mv(mv_data_3, r.progress = FALSE)@cp_set # Slow ecp::e.divisive(mv_data_3)$estimates invisible(   suppressMessages(     capture.output(       result_InspectChangepoint <- InspectChangepoint::inspect(         t(mv_data_3),         threshold = InspectChangepoint::compute.threshold(           nrow(mv_data_3), ncol(mv_data_3)         )       )     )   ) ) result_InspectChangepoint$changepoints[, \"location\"] invisible(   capture.output(     result_Rbeast <- Rbeast::beast123(       mv_data_3,       metadata = list(whichDimIsTime = 1),       season = \"none\"     )   ) ) result_Rbeast$trend$cp fastcpd::fastcpd.lm(lm_data, r.progress = FALSE)@cp_set strucchange::breakpoints(y ~ . - 1, data = lm_data)$breakpoints segmented::segmented(   lm(     y ~ . - 1,     data.frame(y = lm_data$y, x = lm_data[, -1], index = seq_len(nrow(lm_data)))   ),   seg.Z = ~ index )$psi[, \"Est.\"] fastcpd::fastcpd.binomial(binomial_data, r.progress = FALSE)@cp_set strucchange::breakpoints(y ~ . - 1, data = binomial_data)$breakpoints fastcpd::fastcpd.poisson(poisson_data, r.progress = FALSE)@cp_set # Slow strucchange::breakpoints(y ~ . - 1, data = poisson_data)$breakpoints fastcpd::fastcpd.lasso(lasso_data, r.progress = FALSE)@cp_set # Slow strucchange::breakpoints(y ~ . - 1, data = lasso_data)$breakpoints fastcpd::fastcpd.ar(ar_data, 3, r.progress = FALSE)@cp_set CptNonPar::np.mojo(ar_data, G = floor(length(ar_data) / 6))$cpts segmented::segmented(   lm(     y ~ x + 1, data.frame(y = ar_data, x = seq_along(ar_data))   ),   seg.Z = ~ x )$psi[, \"Est.\"] # Slow if (interactive()) {   plot(     mcp::mcp(       list(y ~ 1 + ar(3), ~ 0 + ar(3)),       data = data.frame(y = ar_data, x = seq_along(ar_data)),       par_x = \"x\"     )   ) } fastcpd::fastcpd.garch(garch_data, c(1, 1), r.progress = FALSE)@cp_set CptNonPar::np.mojo(garch_data, G = floor(length(garch_data) / 6))$cpts strucchange::breakpoints(x ~ 1, data = data.frame(x = garch_data))$breakpoints fastcpd::fastcpd.var(   var_data, 2, cost_adjustment = NULL, r.progress = FALSE )@cp_set VARDetect::tbss(var_data) microbenchmark_result <- microbenchmark::microbenchmark(   fastcpd = fastcpd.mean(well_log, trim = 0.003, r.progress = FALSE),   changepoint = changepoint::cpt.mean(well_log, method = \"PELT\"),   CptNonPar = CptNonPar::np.mojo(well_log, G = floor(length(well_log) / 6)),   strucchange =     strucchange::breakpoints(y ~ 1, data = data.frame(y = well_log)),   ecp = ecp::e.divisive(matrix(well_log)),   breakfast = breakfast::breakfast(well_log),   wbs = wbs::wbs(well_log),   mosum = mosum::mosum(c(well_log), G = 40),   fpop = fpop::Fpop(well_log, nrow(well_log)),   gfpop = gfpop::gfpop(     data = well_log,     mygraph = gfpop::graph(       penalty = 2 * log(length(well_log)) * gfpop::sdDiff(well_log) ^ 2,       type = \"updown\"     ),     type = \"mean\"   ),   InspectChangepoint = InspectChangepoint::inspect(     well_log,     threshold = InspectChangepoint::compute.threshold(length(well_log), 1)   ),   jointseg = jointseg::jointSeg(well_log, K = 12),   Rbeast = Rbeast::beast(     well_log, season = \"none\", print.progress = FALSE, quiet = TRUE   ),   stepR = stepR::stepFit(well_log, alpha = 0.5),   # mcp = mcp::mcp(   #   list(y ~ 1, ~ 1, ~ 1, ~ 1, ~ 1, ~ 1, ~ 1, ~ 1, ~ 1, ~ 1, ~ 1, ~ 1),   #   data = data.frame(y = well_log, x = seq_along(well_log)),   #   par_x = \"x\"   # ),   not = not::not(well_log, contrast = \"pcwsConstMean\"),   times = 10 ) #> Unit: milliseconds #>                expr          min           lq         mean       median           uq          max neval #>             fastcpd 4.010279e+02 4.129134e+02 4.171979e+02 4.148564e+02 4.196057e+02 4.350300e+02    10 #>         changepoint 3.195488e+01 3.230887e+01 3.743290e+01 3.352390e+01 4.418598e+01 4.980063e+01    10 #>           CptNonPar 1.809139e+04 1.867986e+04 1.904000e+04 1.876936e+04 1.947816e+04 2.076009e+04    10 #>         strucchange 5.813672e+04 5.831023e+04 5.963604e+04 5.952739e+04 6.139957e+04 6.173251e+04    10 #>                 ecp 7.534981e+05 7.642983e+05 7.742041e+05 7.661485e+05 7.880130e+05 8.003981e+05    10 #>           breakfast 9.231426e+03 9.261763e+03 9.514283e+03 9.492325e+03 9.630395e+03 1.001344e+04    10 #>                 wbs 1.133042e+02 1.168601e+02 1.189637e+02 1.187244e+02 1.201765e+02 1.281057e+02    10 #>               mosum 1.082397e+00 1.167387e+00 1.213233e+00 1.209105e+00 1.286479e+00 1.320333e+00    10 #>                fpop 2.407630e+00 2.481348e+00 2.641625e+00 2.551970e+00 2.618455e+00 3.328585e+00    10 #>               gfpop 5.918783e+01 5.959448e+01 6.081621e+01 6.006626e+01 6.048699e+01 6.725864e+01    10 #>  InspectChangepoint 1.550181e+02 1.885944e+02 2.103973e+02 2.030795e+02 2.262247e+02 3.025476e+02    10 #>            jointseg 1.082510e+01 1.082948e+01 1.174498e+01 1.110779e+01 1.221183e+01 1.424236e+01    10 #>              Rbeast 6.311987e+02 6.634019e+02 6.702594e+02 6.680217e+02 6.846772e+02 7.048629e+02    10 #>               stepR 2.812109e+01 2.836331e+01 2.864408e+01 2.862293e+01 2.897236e+01 2.933441e+01    10 #>                 not 9.350182e+01 9.469137e+01 9.684097e+01 9.647117e+01 9.763828e+01 1.031233e+02    10 ggplot2::autoplot(microbenchmark_result)"},{"path":"https://fastcpd.xingchi.li/articles/examples-advanced.html","id":"multiple-epochs","dir":"Articles","previous_headings":"","what":"Multiple epochs","title":"Advanced examples","text":"","code":"result_multiple_epochs <- fastcpd(   formula = y ~ . - 1,   data = data.frame(y = y, x = x),   family = \"lasso\",   multiple_epochs = function(segment_length) if (segment_length < 20) 1 else 0,   r.progress = FALSE ) summary(result_multiple_epochs) #>  #> Call: #> fastcpd(formula = y ~ . - 1, data = data.frame(y = y, x = x),  #>     multiple_epochs = function(segment_length) if (segment_length <  #>         20) 1 else 0, family = \"lasso\", r.progress = FALSE) #>  #> Change points: #> 79 200 325  #>  #> Cost values: #> 297.184 325.943 456.7906 456.9829  #>  #> Parameters: #> 50 x 4 sparse Matrix of class \"dgCMatrix\" #>       segment 1  segment 2 segment 3 segment 4 #>  [1,] -1.815974 -1.8077660  3.847431 -2.399833 #>  [2,] -1.692328 -1.5757570  3.310427  2.170296 #>  [3,] -3.340743  0.6288282  4.100075  2.853726 #>  [4,] -4.075669  .          1.821134 -2.534484 #>  [5,] -3.972095  .          3.885295  2.308333 #>  [6,] -3.203743 -1.7778324  2.404614  3.302757 #>  [7,]  .         .          .         .        #>  [8,]  .         .          .         .        #>  [9,]  .         .          .         .        #> [10,]  .         .          .         .        #> [11,]  .         .          .         .        #> [12,]  .         .          .         .        #> [13,]  .         .          .         .        #> [14,]  .         .          .         .        #> [15,]  .         .          .         .        #> [16,]  .         .          .         .        #> [17,]  .         .          .         .        #> [18,]  .         .          .         .        #> [19,]  .         .          .         .        #> [20,]  .         .          .         .        #> [21,]  .         .          .         .        #> [22,]  .         .          .         .        #> [23,]  .         .          .         .        #> [24,]  .         .          .         .        #> [25,]  .         .          .         .        #> [26,]  .         .          .         .        #> [27,]  .         .          .         .        #> [28,]  .         .          .         .        #> [29,]  .         .          .         .        #> [30,]  .         .          .         .        #> [31,]  .         .          .         .        #> [32,]  .         .          .         .        #> [33,]  .         .          .         .        #> [34,]  .         .          .         .        #> [35,]  .         .          .         .        #> [36,]  .         .          .         .        #> [37,]  .         .          .         .        #> [38,]  .         .          .         .        #> [39,]  .         .          .         .        #> [40,]  .         .          .         .        #> [41,]  .         .          .         .        #> [42,]  .         .          .         .        #> [43,]  .         .          .         .        #> [44,]  .         .          .         .        #> [45,]  .         .          .         .        #> [46,]  .         .          .         .        #> [47,]  .         .          .         .        #> [48,]  .         .          .         .        #> [49,]  .         .          .         .        #> [50,]  .         .          .         ."},{"path":"https://fastcpd.xingchi.li/articles/examples-advanced.html","id":"vanilla-percentage","dir":"Articles","previous_headings":"","what":"Vanilla percentage","title":"Advanced examples","text":"","code":"result_vanilla_percentage <- fastcpd(   formula = y ~ . - 1,   data = data.frame(y = y, x = x),   family = \"lasso\",   vanilla_percentage = 0.2,   r.progress = FALSE ) summary(result_vanilla_percentage) #>  #> Call: #> fastcpd(formula = y ~ . - 1, data = data.frame(y = y, x = x),  #>     family = \"lasso\", vanilla_percentage = 0.2, r.progress = FALSE) #>  #> Change points: #> 79 200 325  #>  #> Cost values: #> 304.9901 332.8808 468.1191 470.8976  #>  #> Parameters: #> 50 x 4 sparse Matrix of class \"dgCMatrix\" #>       segment 1  segment 2 segment 3 segment 4 #>  [1,] -1.794342 -1.7863922  3.828320 -2.384733 #>  [2,] -1.669612 -1.5520762  3.289372  2.148898 #>  [3,] -3.315550  0.6151654  4.081897  2.832707 #>  [4,] -4.056087  .          1.797223 -2.517172 #>  [5,] -3.952455  .          3.862429  2.286681 #>  [6,] -3.183277 -1.7592907  2.379079  3.277910 #>  [7,]  .         .          .         .        #>  [8,]  .         .          .         .        #>  [9,]  .         .          .         .        #> [10,]  .         .          .         .        #> [11,]  .         .          .         .        #> [12,]  .         .          .         .        #> [13,]  .         .          .         .        #> [14,]  .         .          .         .        #> [15,]  .         .          .         .        #> [16,]  .         .          .         .        #> [17,]  .         .          .         .        #> [18,]  .         .          .         .        #> [19,]  .         .          .         .        #> [20,]  .         .          .         .        #> [21,]  .         .          .         .        #> [22,]  .         .          .         .        #> [23,]  .         .          .         .        #> [24,]  .         .          .         .        #> [25,]  .         .          .         .        #> [26,]  .         .          .         .        #> [27,]  .         .          .         .        #> [28,]  .         .          .         .        #> [29,]  .         .          .         .        #> [30,]  .         .          .         .        #> [31,]  .         .          .         .        #> [32,]  .         .          .         .        #> [33,]  .         .          .         .        #> [34,]  .         .          .         .        #> [35,]  .         .          .         .        #> [36,]  .         .          .         .        #> [37,]  .         .          .         .        #> [38,]  .         .          .         .        #> [39,]  .         .          .         .        #> [40,]  .         .          .         .        #> [41,]  .         .          .         .        #> [42,]  .         .          .         .        #> [43,]  .         .          .         .        #> [44,]  .         .          .         .        #> [45,]  .         .          .         .        #> [46,]  .         .          .         .        #> [47,]  .         .          .         .        #> [48,]  .         .          .         .        #> [49,]  .         .          .         .        #> [50,]  .         .          .         ."},{"path":"https://fastcpd.xingchi.li/articles/examples-advanced.html","id":"linear-regression-with-multi-dimensional-responses","dir":"Articles","previous_headings":"","what":"linear regression with multi-dimensional responses","title":"Advanced examples","text":"","code":"set.seed(1) n <- 300 p <- 3 y_count <- 2 x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p)) theta_0 <- array(NA, dim = c(3, y_count, 3)) theta_0[, , 1] <- cbind(c(1, 1.2, -1), c(-1, 0, 0.5)) theta_0[, , 2] <- cbind(c(-1, 0, 0.5), c(0.5, -0.3, 0.2)) theta_0[, , 3] <- cbind(c(0.5, -0.3, 0.2), c(1, 1.2, -1)) y <- rbind(   x[1:100, ] %*% theta_0[, , 1],   x[101:200, ] %*% theta_0[, , 2],   x[201:n, ] %*% theta_0[, , 3] ) + matrix(rnorm(n * y_count), ncol = y_count) multi_response_linear_loss <- function(data) {   x <- data[, (ncol(data) - p + 1):ncol(data)]   y <- data[, 1:(ncol(data) - p)]    if (nrow(data) <= p) {     x_t_x <- diag(p)   } else {     x_t_x <- crossprod(x)   }    norm(y - x %*% solve(x_t_x, t(x)) %*% y, type = \"F\")^2 / 2 } result <- fastcpd(   formula = y ~ x - 1,   data = data.frame(y = y, x = x),   beta = (2 * p + 1) * log(n) / 2,   cost = multi_response_linear_loss,   cp_only = TRUE,   r.progress = FALSE )  testthat::expect_equal(result@cp_set, c(102, 195))"},{"path":"https://fastcpd.xingchi.li/articles/examples-custom-model.html","id":"appendix-all-code-snippets","dir":"Articles","previous_headings":"","what":"Appendix: all code snippets","title":"Custom logistic regression model","text":"","code":"knitr::opts_chunk$set(collapse = TRUE, comment = \"#>\") library(fastcpd) for (package in c(\"ggplot2\", \"mvtnorm\")) {   if (!requireNamespace(package, quietly = TRUE)) utils::install.packages(     package, repos = \"https://cloud.r-project.org\", quiet = TRUE   ) } set.seed(1) x <- matrix(rnorm(1500, 0, 1), ncol = 5) theta <- rbind(rnorm(5, 0, 1), rnorm(5, 2, 1)) y <- c(   rbinom(125, 1, 1 / (1 + exp(-x[1:125, ] %*% theta[1, ]))),   rbinom(175, 1, 1 / (1 + exp(-x[126:300, ] %*% theta[2, ]))) ) binomial_data <- data.frame(y = y, x = x)  result <- fastcpd.binomial(cbind(y, x), r.progress = FALSE, cost_adjustment = NULL) summary(result) logistic_loss <- function(data, theta) {   x <- data[, -1]   y <- data[, 1]   u <- x %*% theta   nll <- -y * u + log(1 + exp(u))   nll[u > 10] <- -y[u > 10] * u[u > 10] + u[u > 10]   sum(nll) } logistic_gradient <- function(data, theta) {   x <- data[nrow(data), -1]   y <- data[nrow(data), 1]   c(-(y - 1 / (1 + exp(-x %*% theta)))) * x } logistic_hessian <- function(data, theta) {   x <- data[nrow(data), -1]   prob <- 1 / (1 + exp(-x %*% theta))   (x %o% x) * c((1 - prob) * prob) } result <- fastcpd(   y ~ . - 1, binomial_data, epsilon = 1e-5, cost = logistic_loss,   cost_gradient = logistic_gradient, cost_hessian = logistic_hessian,   r.progress = FALSE ) summary(result)"},{"path":"https://fastcpd.xingchi.li/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Xingchi Li. Author, maintainer, copyright holder. Xianyang Zhang. Author, copyright holder. Trisha Dawn. Author, copyright holder.","code":""},{"path":"https://fastcpd.xingchi.li/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Li X, Zhang X, Dawn T (2023). fastcpd: Fast Change Point Detection via Sequential Gradient Descent. R package version 0.12.0, https://CRAN.R-project.org/package=fastcpd. Zhang X, Dawn T (2023). “Sequential Gradient Descent Quasi-Newton's Method Change-Point Analysis.” Ruiz, Francisco, Dy, Jennifer, van de Meent, Jan-Willem (eds.), Proceedings 26th International Conference Artificial Intelligence Statistics, volume 206 series Proceedings Machine Learning Research, 1129–1143. https://proceedings.mlr.press/v206/zhang23b.html.","code":"@Manual{,   title = {fastcpd: Fast Change Point Detection via Sequential Gradient Descent},   author = {Xingchi Li and Xianyang Zhang and Trisha Dawn},   year = {2023},   note = {R package version 0.12.0},   url = {https://CRAN.R-project.org/package=fastcpd}, } @InProceedings{,   title = {Sequential Gradient Descent and Quasi-Newton's Method for Change-Point Analysis},   author = {Xianyang Zhang and Trisha Dawn},   year = {2023},   booktitle = {Proceedings of The 26th International Conference on Artificial Intelligence and Statistics},   volume = {206},   pages = {1129--1143},   editor = {{Ruiz} and {Francisco} and {Dy} and {Jennifer} and {van de Meent} and {Jan-Willem}},   series = {Proceedings of Machine Learning Research},   month = {25--27 Apr},   publisher = {PMLR},   pdf = {https://proceedings.mlr.press/v206/zhang23b/zhang23b.pdf},   url = {https://proceedings.mlr.press/v206/zhang23b.html},   abstract = {One common approach to detecting change-points is minimizing a cost function over possible numbers and locations of change-points. The framework includes several well-established procedures, such as the penalized likelihood and minimum description length. Such an approach requires finding the cost value repeatedly over different segments of the data set, which can be time-consuming when (i) the data sequence is long and (ii) obtaining the cost value involves solving a non-trivial optimization problem. This paper introduces a new sequential updating method (SE) to find the cost value effectively. The core idea is to update the cost value using the information from previous steps without re-optimizing the objective function. The new method is applied to change-point detection in generalized linear models and penalized regression. Numerical studies show that the new approach can be orders of magnitude faster than the Pruned Exact Linear Time (PELT) method without sacrificing estimation accuracy.}, }"},{"path":[]},{"path":"https://fastcpd.xingchi.li/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Fast Change Point Detection via Sequential Gradient Descent","text":"fastcpd (fast change point detection) fast implmentation change point detection methods R. fastcpd package designed find change points fast manner. easy install extensible kinds change point problems user specified cost function apart built-cost functions. learn behind algorithms: Sequential Gradient Descent Quasi-Newton’s Method Change-Point Analysis","code":""},{"path":"https://fastcpd.xingchi.li/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fast Change Point Detection via Sequential Gradient Descent","text":"","code":"# Install from CRAN install.packages(\"fastcpd\") # Development version from r-universe with CRAN version as a fallback install.packages(   \"fastcpd\",   repos = c(\"https://doccstat.r-universe.dev\", \"https://cloud.r-project.org\") )  ## install.packages(\"pak\") pak::pak(\"doccstat/fastcpd\")  ## install.packages(\"devtools\") devtools::install_github(\"doccstat/fastcpd\") # conda-forge is a fork from CRAN and may not be up-to-date  # Use mamba mamba install r-fastcpd # Use conda conda install -c conda-forge r-fastcpd"},{"path":"https://fastcpd.xingchi.li/index.html","id":"faq","dir":"","previous_headings":"Installation","what":"FAQ","title":"Fast Change Point Detection via Sequential Gradient Descent","text":"fastcpd depends following packages: Rcpp, C++ source code compilation. RcppArmadillo, fast linear algebra. fastglm, fast generalized linear models. glmnet, penalized regression. ggplot2, data visualization. ’re compiling source, can run following command see complete set system packages needed machine. suggested packages required main functionality package. required vignettes. want learn package comparison vignettes, either check vignettes CRAN pkgdown generated documentation. package able install Mac Linux distribution without problems dependencies installed. However, encountered problems related gfortran, might RcppArmadillo installed previously. Try Mac OSX stackoverflow solution Linux stackover solution trouble installing RcppArmadillo.","code":"pak::pkg_sysreqs(\"doccstat/fastcpd\") #> ── Install scripts ───────────────────────────────────────────── Ubuntu 20.04 #> apt-get -y update #> apt-get -y install libcurl4-openssl-dev libssl-dev zlib1g-dev make #> #> ── Packages and their system dependencies ─────────────────────────────────── #> curl       – libcurl4-openssl-dev, libssl-dev #> data.table – zlib1g-dev #> fs         – make #> openssl    – libssl-dev"},{"path":[]},{"path":"https://fastcpd.xingchi.li/index.html","id":"r-shiny-app","dir":"","previous_headings":"Cheatsheet","what":"R Shiny App","title":"Fast Change Point Detection via Sequential Gradient Descent","text":"Available soon: rshiny.fastcpd.xingchi.li","code":""},{"path":"https://fastcpd.xingchi.li/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Fast Change Point Detection via Sequential Gradient Descent","text":"hard demonstrate features fastcpd single example due flexibility package. examples, please refer function reference. r.progress = FALSE used suppress progress bar. Users expected see progress bar running code default.","code":"set.seed(1) n <- 1000 x <- rep(0, n + 3) for (i in 1:600) {   x[i + 3] <- 0.6 * x[i + 2] - 0.2 * x[i + 1] + 0.1 * x[i] + rnorm(1, 0, 3) } for (i in 601:1000) {   x[i + 3] <- 0.3 * x[i + 2] + 0.4 * x[i + 1] + 0.2 * x[i] + rnorm(1, 0, 3) } result <- fastcpd::fastcpd.ar(x[3 + seq_len(n)], 3, r.progress = FALSE) summary(result) #>  #> Call: #> fastcpd::fastcpd.ar(data = x[3 + seq_len(n)], order = 3, r.progress = FALSE) #>  #> Change points: #> 614  #>  #> Cost values: #> 2757.324 2041.923  #>  #> Parameters: #>     segment 1 segment 2 #> 1  0.57120256 0.2371809 #> 2 -0.20985108 0.4031244 #> 3  0.08221978 0.2290323 plot(result)"},{"path":[]},{"path":"https://fastcpd.xingchi.li/index.html","id":"main-function","dir":"","previous_headings":"Examples","what":"Main function","title":"Fast Change Point Detection via Sequential Gradient Descent","text":"fastcpd","code":""},{"path":[]},{"path":"https://fastcpd.xingchi.li/index.html","id":"time-series","dir":"","previous_headings":"Examples > Wrapper functions","what":"Time series","title":"Fast Change Point Detection via Sequential Gradient Descent","text":"AR(p): fastcpd_ar ARIMA(p, d, q): fastcpd_arima ARMA(p, q): fastcpd_arma GARCH(p, q): fastcpd_garch MA(q): fastcpd_ma VAR(p): fastcpd_var General time series: fastcpd_ts","code":""},{"path":"https://fastcpd.xingchi.li/index.html","id":"unlabeled-data","dir":"","previous_headings":"Examples > Wrapper functions","what":"Unlabeled data","title":"Fast Change Point Detection via Sequential Gradient Descent","text":"Mean change: fastcpd_mean Variance change: fastcpd_variance Mean /variance change: fastcpd_meanvariance","code":""},{"path":"https://fastcpd.xingchi.li/index.html","id":"regression-data","dir":"","previous_headings":"Examples > Wrapper functions","what":"Regression data","title":"Fast Change Point Detection via Sequential Gradient Descent","text":"Logistic regression: fastcpd_binomial Penalized linear regression: fastcpd_lasso Linear regression: fastcpd_lm Poisson regression: fastcpd_poisson","code":""},{"path":"https://fastcpd.xingchi.li/index.html","id":"utility-functions","dir":"","previous_headings":"Examples","what":"Utility functions","title":"Fast Change Point Detection via Sequential Gradient Descent","text":"Variance estimation ARMA models: variance_arma Variance estimation linear models: variance_lm Variance estimation mean change models: variance_mean Plot: plot Print: print Show: show Summary: summary","code":""},{"path":"https://fastcpd.xingchi.li/index.html","id":"data","dir":"","previous_headings":"Examples","what":"Data","title":"Fast Change Point Detection via Sequential Gradient Descent","text":"Bitcoin Market Price (USD): bitcoin Occupancy Detection Data Set: occupancy Transcription Profiling 57 Human Bladder Carcinoma Samples: transcriptome UK Seatbelts Data: uk_seatbelts Well-log Dataset Numerical Bayesian Methods Applied Signal Processing: well_log","code":""},{"path":"https://fastcpd.xingchi.li/index.html","id":"main-class","dir":"","previous_headings":"Examples","what":"Main class","title":"Fast Change Point Detection via Sequential Gradient Descent","text":"fastcpd","code":""},{"path":"https://fastcpd.xingchi.li/index.html","id":"make-contributions","dir":"","previous_headings":"","what":"Make contributions","title":"Fast Change Point Detection via Sequential Gradient Descent","text":"Fork repo. Create new branch main branch. Make changes commit . Please follow Google’s R style guide naming variables functions. adding new family models new cost functions corresponding gradient Hessian, please add src/fastcpd_class_cost.cc proper example tests vignettes/gallery.Rmd tests/testthat/test-gallery.R. Add family name src/fastcpd_constants.h. [Recommended] Add new wrapper function R/fastcpd_wrappers.R new family models move examples new wrapper function roxygen examples. Add new wrapper function corresponding section _pkgdown.yml. Push changes fork. Create pull request. Make sure pull request create new warnings errors devtools::check().","code":""},{"path":"https://fastcpd.xingchi.li/index.html","id":"contact-us","dir":"","previous_headings":"","what":"Contact us","title":"Fast Change Point Detection via Sequential Gradient Descent","text":"File ticket GitHub Issues. Contact authors specified DESCRIPTION.","code":""},{"path":[]},{"path":[]},{"path":"https://fastcpd.xingchi.li/reference/bitcoin.html","id":null,"dir":"Reference","previous_headings":"","what":"Bitcoin Market Price (USD) — bitcoin","title":"Bitcoin Market Price (USD) — bitcoin","text":"average USD market price across major bitcoin exchanges.","code":""},{"path":"https://fastcpd.xingchi.li/reference/bitcoin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bitcoin Market Price (USD) — bitcoin","text":"","code":"bitcoin"},{"path":"https://fastcpd.xingchi.li/reference/bitcoin.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Bitcoin Market Price (USD) — bitcoin","text":"data frame 1354 rows 2 variables: date POSIXct,POSIXt (TZ: \"UTC\") 2019-01-02 2023-10-28 price average USD market price across major bitcoin exchanges","code":""},{"path":"https://fastcpd.xingchi.li/reference/bitcoin.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Bitcoin Market Price (USD) — bitcoin","text":"<https://www.blockchain.com/explorer/charts/market-price>","code":""},{"path":"https://fastcpd.xingchi.li/reference/bitcoin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bitcoin Market Price (USD) — bitcoin","text":"","code":"# \\donttest{ if (!requireNamespace(\"ggplot2\", quietly = TRUE)) utils::install.packages(   \"ggplot2\", repos = \"https://cloud.r-project.org\", quiet = TRUE )  ggplot2::ggplot(bitcoin, ggplot2::aes(x = date, y = price)) +   ggplot2::geom_line()   result <- suppressWarnings(   fastcpd.garch(diff(log(bitcoin$price[200:500])), c(1, 1), beta = \"BIC\") ) #> Registered S3 method overwritten by 'quantmod': #>   method            from #>   as.zoo.data.frame zoo  #> Residual calculation failed. summary(result) #>  #> Call: #> fastcpd.garch(data = diff(log(bitcoin$price[200:500])), order = c(1,  #>     1), beta = \"BIC\") #>  #> Change points: #> 191  #>  #> Cost values: #> -330.4159 -191.976  bitcoin$date[result@cp_set + 200] #> [1] \"2013-04-11 UTC\" plot(result)  # }"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to store the output created with fastcpd — fastcpd-class","title":"An S4 class to store the output created with fastcpd — fastcpd-class","text":"S4 class stores output fastcpd. fastcpd object consist several slots including call fastcpd, data used, family model, change points, cost values, residuals, estimated parameters boolean indicating whether model fitted change points change points parameters, can select using @.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to store the output created with fastcpd — fastcpd-class","text":"call call function. data data passed function. order order time series model. family family model. cp_set set change points. cost_values cost function values segment. residuals residuals model change points. Used built-families. thetas estimated parameters segment. Used built-families. cp_only boolean indicating whether `fastcpd` run return change points change points estimated parameters cost values segment.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd.html","id":null,"dir":"Reference","previous_headings":"","what":"Find change points efficiently — fastcpd","title":"Find change points efficiently — fastcpd","text":"fastcpd takes formulas, data, families extra parameters returns fastcpd object.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find change points efficiently — fastcpd","text":"","code":"fastcpd(   formula = y ~ . - 1,   data,   beta = \"MBIC\",   segment_count = 10,   trim = 0.025,   momentum_coef = 0,   multiple_epochs = function(x) 0,   family = NULL,   epsilon = 1e-10,   min_prob = 10^10,   winsorise_minval = -20,   winsorise_maxval = 20,   p = ncol(data) - 1,   order = c(0, 0, 0),   cost = NULL,   cost_gradient = NULL,   cost_hessian = NULL,   cp_only = FALSE,   vanilla_percentage = 0,   warm_start = FALSE,   lower = rep(-Inf, p),   upper = rep(Inf, p),   line_search = c(1),   cost_adjustment = \"MBIC\",   ... )"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find change points efficiently — fastcpd","text":"formula formula object specifying model fitted. optional response variable left hand side formula covariates right hand side. intercept term removed formula. response variable necessary data considered regression type. example, mean variance change model necessarily response variables. default intercept column added data similar lm function R. Thus suggested user remove intercept term formula appending - 1 formula. default formula suitable regression data sets one-dimensional response variable rest covariates without intercept. naming variables used formula consistent column names data frame provided data. data data frame containing data segmented row denotes data point. one-dimensional response variable regression settings, first column response variable rest covariates. response necessary case mean change variance change, case formula need adjusted accordingly. beta Penalty criterion number change points. Take string value \"MBIC\", \"BIC\", \"MDL\" numeric value. numeric value provided, value used penalty criterion number change points traditional Bayesian Information Criterion. default, Modified BIC criterion used obtain proper value, .e., beta = (p + 2) * log(nrow(data)) / 2 adjusted cost function. segment_count Number segments initial guess. specified, initial guess number segments 10. trim Trimming boundary change points change point close boundary counted change point. parameter also specifies minimum distance two change points. .   several change points mutual distances smaller trim * nrow(data), change points merged one single change point. value parameter 0 1. momentum_coef Momentum coefficient applied update. parameter used loss function bad-shaped maintaining momentum previous update desired. Default value 0, meaning algorithm maintain momentum default. multiple_epochs Function number epochs SGD. multiple_epochs function taking parameter segment_length meaning current number data points considered since last segmentaion. return value function integer indicating many epochs performed apart default update. default function returns 0, meaning multiple epochs used update parameters. Example usage:   function perform 3 epochs first quarter data, 2 epochs second quarter data, 1 epoch third quarter data multiple epochs last quarter data. Experiments show performing multiple epochs significantly affect performance algorithm. parameter left users tune performance algorithm result ideal. Details discussed paper. family Family model. Can \"lm\", \"binomial\", \"poisson\", \"lasso\", \"custom\", \"ar\", \"var\", \"ma\", \"arima\", \"garch\" NULL. simplicity, user can also omit parameter, indicating using cost functions. Omitting parameter specifying parameter \"custom\" NULL, case, users must specify cost function, optional gradient corresponding Hessian matrix functions. epsilon Epsilon avoid numerical issues. used Hessian computation Logistic Regression Poisson Regression. min_prob Minimum probability avoid numerical issues. used Poisson Regression. winsorise_minval Minimum value parameter Poisson Regression winsorised. winsorise_maxval Maximum value parameter Poisson Regression winsorised. p Number covariates model. specified, number covariates inferred data, .e., p = ncol(data) - 1. parameter superseded order case time series models: \"ar\", \"var\", \"arima\". order Order AR(p), VAR(p) ARIMA(p, d, q) model. cost Cost function used. following two parameters specified time family. specified, default negative log-likelihood corresponding family. Custom cost functions can provided following two formats: cost = function(data) {...} cost = function(data, theta) {...} methods, users implement cost value calculation based data provided, data parameter can considered segment original data frame form matrix. first method used cost function explicit solution, case cost function value can calculated directly data. second method used cost function explicit solution, case cost function value can calculated data estimated parameters. case one data argument provided, fastcpd performs vanilla PELT algorithm since parameter updating performed. cost_gradient Gradient function custom cost function. Example usage:   gradient function take two parameters, first one segment data format matrix, second one estimated parameters. gradient function return gradient cost function respect data parameters. cost_hessian Hessian function custom cost function. Similar gradient function, Hessian function take two parameters, first one segment data format matrix, second one estimated parameters. Hessian function return Hessian matrix cost function respect data parameters. cp_only TRUE, change points returned. Otherwise, cost function values together estimated parameters segment also returned. default value set FALSE plot can used visualize results built-model. cp_only performance impact algorithm, since cost values estimated parameters segment need calculated stored. users interested change points, setting cp_only TRUE help computational cost. vanilla_percentage many data processed vanilla PELT. Range 0 1. fastcpd algorithm based gradient descent thus starting estimate can crucial. beginning algorithm, vanilla PELT can performed obtain relatively accurate estimate parameters despite small amount data used. set 0, data processed sequential gradient descnet. set 1, data processed vaniall PELT. cost function explicit solution, .e. depend coefficients like mean change case, parameter set 1. value set 0 1, first vanilla_percentage * nrow(data) data points processed vanilla PELT rest processed sequential gradient descent. warm_start TRUE, algorithm use estimated parameters previous segment initial value current segment. parameter used \"glm\" families. lower Lower bound parameters. Used specify domain parameter gradient descent step. specified, lower bound set -Inf parameters. upper Upper bound parameters. Used specify domain parameter gradient descent step. specified, upper bound set Inf parameters. line_search vector numeric values provided, line search performed find optimal step size update. cost_adjustment Cost adjustment criterion number change points. Can \"BIC\", \"MBIC\", \"MDL\" NULL. default, cost adjustment criterion set \"MBIC\". MBIC MDL modifies cost function adding small negative term cost function. MDL transforms cost function log2 based. BIC NULL modify cost function. ... Parameters specifically used time series models. following parameters ignored: include.mean used ARIMA GARCH modes. r.progress used control progress bar. default progress bar shown. disable , set r.progress = FALSE. p.response used specify number response variables.","code":"multiple_epochs = function(segment_length) {     if (segment_length < n / segment_count / 4 * 1) 3     else if (segment_length < n / segment_count / 4 * 2) 2     else if (segment_length < n / segment_count / 4 * 3) 1     else 0   } cost_gradient = function(data, theta) {     ...     return(gradient)   }"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find change points efficiently — fastcpd","text":"class fastcpd object.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd.html","id":"gallery","dir":"Reference","previous_headings":"","what":"Gallery","title":"Find change points efficiently — fastcpd","text":"https://fastcpd.xingchi.li/articles/gallery.html","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Find change points efficiently — fastcpd","text":"Zhang X, Dawn T (2023). ``Sequential Gradient Descent Quasi-Newton's Method Change-Point Analysis.'' Ruiz, Francisco, Dy, Jennifer, van de Meent, Jan-Willem (eds.), Proceedings 26th International Conference Artificial Intelligence Statistics, volume 206 series Proceedings Machine Learning Research, 1129-1143. https://proceedings.mlr.press/v206/zhang23b.html.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find change points efficiently — fastcpd","text":"","code":"for (package in c(\"ggplot2\", \"mvtnorm\")) {   if (!requireNamespace(package, quietly = TRUE)) utils::install.packages(     package, repos = \"https://cloud.r-project.org\", quiet = TRUE   ) }  set.seed(1) p <- 1 x <- mvtnorm::rmvnorm(300, rep(0, p), diag(p)) theta_0 <- matrix(c(1, -1, 0.5)) y <- c(   x[1:100, ] * theta_0[1, ] + rnorm(100, 0, 1),   x[101:200, ] * theta_0[2, ] + rnorm(100, 0, 1),   x[201:300, ] * theta_0[3, ] + rnorm(100, 0, 1) ) result <- fastcpd.lm(cbind(y, x)) summary(result) #>  #> Call: #> fastcpd.lm(data = cbind(y, x)) #>  #> Change points: #> 99 200  #>  #> Cost values: #> 52.95848 71.14718 50.82659  #>  #> Parameters: #>   segment 1  segment 2 segment 3 #> 1  0.956995 -0.8335455 0.4596791 plot(result)  if (!requireNamespace(\"mvtnorm\", quietly = TRUE)) utils::install.packages(   \"mvtnorm\", repos = \"https://cloud.r-project.org\", quiet = TRUE )  set.seed(1) n <- 600 p <- 4 d <- 2 x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p)) theta_1 <- matrix(runif(8, -3, -1), nrow = p) theta_2 <- matrix(runif(8, -1, 3), nrow = p) y <- rbind(   x[1:350, ] %*% theta_1 + mvtnorm::rmvnorm(350, rep(0, d), 3 * diag(d)),   x[351:n, ] %*% theta_2 + mvtnorm::rmvnorm(250, rep(0, d), 3 * diag(d)) ) result_mlm <- fastcpd(   cbind(y.1, y.2) ~ . - 1, cbind.data.frame(y = y, x = x), family = \"lm\" ) summary(result_mlm) #>  #> Call: #> fastcpd(formula = cbind(y.1, y.2) ~ . - 1, data = cbind.data.frame(y = y,  #>     x = x), family = \"lm\") #>  #> Change points: #> 375  #>  #> Cost values: #> 1987.127 908.4033  # \\donttest{ if (!requireNamespace(\"mvtnorm\", quietly = TRUE)) utils::install.packages(   \"mvtnorm\", repos = \"https://cloud.r-project.org\", quiet = TRUE )  set.seed(1) p <- 5 x <- matrix(rnorm(375 * p, 0, 1), ncol = p) theta <- rbind(rnorm(p, 0, 1), rnorm(p, 2, 1)) y <- c(   rbinom(200, 1, 1 / (1 + exp(-x[1:200, ] %*% theta[1, ]))),   rbinom(175, 1, 1 / (1 + exp(-x[201:375, ] %*% theta[2, ]))) ) data <- data.frame(y = y, x = x) result_builtin <- suppressWarnings(fastcpd.binomial(data)) logistic_loss <- function(data, theta) {   x <- data[, -1]   y <- data[, 1]   u <- x %*% theta   nll <- -y * u + log(1 + exp(u))   nll[u > 10] <- -y[u > 10] * u[u > 10] + u[u > 10]   sum(nll) } logistic_loss_gradient <- function(data, theta) {   x <- data[nrow(data), -1]   y <- data[nrow(data), 1]   c(-(y - 1 / (1 + exp(-x %*% theta)))) * x } logistic_loss_hessian <- function(data, theta) {   x <- data[nrow(data), -1]   prob <- 1 / (1 + exp(-x %*% theta))   (x %o% x) * c((1 - prob) * prob) } result_custom <- fastcpd(   formula = y ~ . - 1,   data = data,   epsilon = 1e-5,   cost = logistic_loss,   cost_gradient = logistic_loss_gradient,   cost_hessian = logistic_loss_hessian ) cat(   \"Change points detected by built-in logistic regression model: \",   result_builtin@cp_set, \"\\n\",   \"Change points detected by custom logistic regression model: \",   result_custom@cp_set, \"\\n\",   sep = \"\" ) #> Change points detected by built-in logistic regression model: 200 #> Change points detected by custom logistic regression model: 201 result_custom_two_epochs <- fastcpd(   formula = y ~ . - 1,   data = data,   multiple_epochs = function(segment_length) 1,   epsilon = 1e-5,   cost = logistic_loss,   cost_gradient = logistic_loss_gradient,   cost_hessian = logistic_loss_hessian ) summary(result_custom_two_epochs) #>  #> Call: #> fastcpd(formula = y ~ . - 1, data = data, multiple_epochs = function(segment_length) 1,  #>     epsilon = 1e-05, cost = logistic_loss, cost_gradient = logistic_loss_gradient,  #>     cost_hessian = logistic_loss_hessian) #>  #> Change points: #> 200  #>  #> Parameters: #>    segment 1  segment 2 #> 1 -0.6235240  2.0066479 #> 2 -1.6767614  1.6278889 #> 3 -1.7973433  4.6422022 #> 4 -0.4842969 -0.1521062 #> 5  2.0797875  2.4047092 # } if (!requireNamespace(\"mvtnorm\", quietly = TRUE)) utils::install.packages(   \"mvtnorm\", repos = \"https://cloud.r-project.org\", quiet = TRUE )  set.seed(1) n <- 400 + 300 + 500 p <- 5 x <- mvtnorm::rmvnorm(n, mean = rep(0, p), sigma = diag(p)) theta <- rbind(   mvtnorm::rmvnorm(1, mean = rep(0, p - 3), sigma = diag(p - 3)),   mvtnorm::rmvnorm(1, mean = rep(5, p - 3), sigma = diag(p - 3)),   mvtnorm::rmvnorm(1, mean = rep(9, p - 3), sigma = diag(p - 3)) ) theta <- cbind(theta, matrix(0, 3, 3)) theta <- theta[rep(seq_len(3), c(400, 300, 500)), ] y_true <- rowSums(x * theta) factor <- c(   2 * stats::rbinom(400, size = 1, prob = 0.95) - 1,   2 * stats::rbinom(300, size = 1, prob = 0.95) - 1,   2 * stats::rbinom(500, size = 1, prob = 0.95) - 1 ) y <- factor * y_true + stats::rnorm(n) data <- cbind.data.frame(y, x) huber_threshold <- 1 huber_loss <- function(data, theta) {   residual <- data[, 1] - data[, -1, drop = FALSE] %*% theta   indicator <- abs(residual) <= huber_threshold   sum(     residual^2 / 2 * indicator +       huber_threshold * (         abs(residual) - huber_threshold / 2       ) * (1 - indicator)   ) } huber_loss_gradient <- function(data, theta) {   residual <- c(data[nrow(data), 1] - data[nrow(data), -1] %*% theta)   if (abs(residual) <= huber_threshold) {     -residual * data[nrow(data), -1]   } else {     -huber_threshold * sign(residual) * data[nrow(data), -1]   } } huber_loss_hessian <- function(data, theta) {   residual <- c(data[nrow(data), 1] - data[nrow(data), -1] %*% theta)   if (abs(residual) <= huber_threshold) {     outer(data[nrow(data), -1], data[nrow(data), -1])   } else {     0.01 * diag(length(theta))   } } huber_regression_result <- fastcpd(   formula = y ~ . - 1,   data = data,   beta = (p + 1) * log(n) / 2,   cost = huber_loss,   cost_gradient = huber_loss_gradient,   cost_hessian = huber_loss_hessian ) summary(huber_regression_result) #>  #> Call: #> fastcpd(formula = y ~ . - 1, data = data, beta = (p + 1) * log(n)/2,  #>     cost = huber_loss, cost_gradient = huber_loss_gradient, cost_hessian = huber_loss_hessian) #>  #> Change points: #> 401 726  #>  #> Parameters: #>     segment 1   segment 2    segment 3 #> 1 -0.52615415  2.77991463  8.744706508 #> 2 -1.02443443  5.06390528  9.506534878 #> 3 -0.09220421  0.01647923 -0.008908851 #> 4 -0.01326592 -0.08103008 -0.047909865 #> 5  0.02526703  0.01329142  0.025171681"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_ar.html","id":null,"dir":"Reference","previous_headings":"","what":"Find change points efficiently in AR(p) models — fastcpd_ar","title":"Find change points efficiently in AR(p) models — fastcpd_ar","text":"fastcpd_ar fastcpd.ar wrapper functions fastcpd find change points AR(p) models. function similar fastcpd except data default one-column matrix univariate vector thus formula required .","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_ar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find change points efficiently in AR(p) models — fastcpd_ar","text":"","code":"fastcpd_ar(data, order = 0, ...)  fastcpd.ar(data, order = 0, ...)"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_ar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find change points efficiently in AR(p) models — fastcpd_ar","text":"data numeric vector, matrix, data frame time series object. order positive integer specifying order AR model. ... arguments passed fastcpd, example, segment_count. One special argument can passed include.mean, logical value indicating whether mean included model. default value TRUE.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_ar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find change points efficiently in AR(p) models — fastcpd_ar","text":"class fastcpd object.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_ar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find change points efficiently in AR(p) models — fastcpd_ar","text":"","code":"if (!requireNamespace(\"ggplot2\", quietly = TRUE)) utils::install.packages(   \"ggplot2\", repos = \"https://cloud.r-project.org\", quiet = TRUE )  set.seed(1) n <- 1000 x <- rep(0, n + 3) for (i in 1:600) {   x[i + 3] <- 0.6 * x[i + 2] - 0.2 * x[i + 1] + 0.1 * x[i] + rnorm(1, 0, 3) } for (i in 601:1000) {   x[i + 3] <- 0.3 * x[i + 2] + 0.4 * x[i + 1] + 0.2 * x[i] + rnorm(1, 0, 3) } result <- fastcpd.ar(x[3 + seq_len(n)], 3) summary(result) #>  #> Call: #> fastcpd.ar(data = x[3 + seq_len(n)], order = 3) #>  #> Change points: #> 614  #>  #> Cost values: #> 2757.324 2041.923  #>  #> Parameters: #>     segment 1 segment 2 #> 1  0.57120256 0.2371809 #> 2 -0.20985108 0.4031244 #> 3  0.08221978 0.2290323 plot(result)"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_arima.html","id":null,"dir":"Reference","previous_headings":"","what":"Find change points efficiently in ARIMA(p, d, q) models — fastcpd_arima","title":"Find change points efficiently in ARIMA(p, d, q) models — fastcpd_arima","text":"fastcpd_arima fastcpd.arima wrapper functions fastcpd find change points ARIMA(p, d, q) models. function similar fastcpd except data default one-column matrix univariate vector thus formula required .","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_arima.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find change points efficiently in ARIMA(p, d, q) models — fastcpd_arima","text":"","code":"fastcpd_arima(data, order = 0, ...)  fastcpd.arima(data, order = 0, ...)"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_arima.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find change points efficiently in ARIMA(p, d, q) models — fastcpd_arima","text":"data numeric vector, matrix, data frame time series object. order vector length three specifying order ARIMA model. ... arguments passed fastcpd, example, segment_count. One special argument can passed include.mean, logical value indicating whether mean included model. default value TRUE.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_arima.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find change points efficiently in ARIMA(p, d, q) models — fastcpd_arima","text":"class fastcpd object.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_arima.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find change points efficiently in ARIMA(p, d, q) models — fastcpd_arima","text":"","code":"# \\donttest{ if (!requireNamespace(\"ggplot2\", quietly = TRUE)) utils::install.packages(   \"ggplot2\", repos = \"https://cloud.r-project.org\", quiet = TRUE )  set.seed(1) n <- 271 w <- rnorm(n + 1, 0, 3) dx <- rep(0, n + 1) x <- rep(0, n + 1) for (i in 1:180) {   dx[i + 1] <- 0.8 * dx[i] + w[i + 1] - 0.5 * w[i]   x[i + 1] <- x[i] + dx[i + 1] } for (i in 181:n) {   dx[i + 1] <- -0.6 * dx[i] + w[i + 1] + 0.3 * w[i]   x[i + 1] <- x[i] + dx[i + 1] } result <- fastcpd.arima(   diff(x[1 + seq_len(n)]),   c(1, 0, 1),   segment_count = 3,   include.mean = FALSE ) #> Residual calculation failed. summary(result) #>  #> Call: #> fastcpd.arima(data = diff(x[1 + seq_len(n)]), order = c(1, 0,  #>     1), segment_count = 3, include.mean = FALSE) #>  #> Change points: #> 178  #>  #> Cost values: #> 436.0487 228.6732  plot(result)  # }"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_arma.html","id":null,"dir":"Reference","previous_headings":"","what":"Find change points efficiently in ARMA(p, q) models — fastcpd_arma","title":"Find change points efficiently in ARMA(p, q) models — fastcpd_arma","text":"fastcpd_arma fastcpd.arma wrapper functions fastcpd find change points ARMA(p, q) models. function similar fastcpd except data default one-column matrix univariate vector thus formula required .","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_arma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find change points efficiently in ARMA(p, q) models — fastcpd_arma","text":"","code":"fastcpd_arma(data, order = c(0, 0), ...)  fastcpd.arma(data, order = c(0, 0), ...)"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_arma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find change points efficiently in ARMA(p, q) models — fastcpd_arma","text":"data numeric vector, matrix, data frame time series object. order vector length two specifying order ARMA model. ... arguments passed fastcpd, example, segment_count.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_arma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find change points efficiently in ARMA(p, q) models — fastcpd_arma","text":"class fastcpd object.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_arma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find change points efficiently in ARMA(p, q) models — fastcpd_arma","text":"","code":"# \\donttest{ if (!requireNamespace(\"ggplot2\", quietly = TRUE)) utils::install.packages(   \"ggplot2\", repos = \"https://cloud.r-project.org\", quiet = TRUE )  set.seed(1) n <- 300 w <- rnorm(n + 3, 0, 3) x <- rep(0, n + 3) for (i in 1:200) {   x[i + 3] <- 0.1 * x[i + 2] - 0.3 * x[i + 1] + 0.1 * x[i] +     0.1 * w[i + 2] + 0.5 * w[i + 1] + w[i + 3] } for (i in 201:n) {   x[i + 3] <- 0.3 * x[i + 2] + 0.1 * x[i + 1] - 0.3 * x[i] -     0.6 * w[i + 2] - 0.1 * w[i + 1] + w[i + 3] } result <- suppressWarnings(   fastcpd.arma(     data = x[3 + seq_len(n)],     order = c(3, 2),     segment_count = 3,     lower = c(rep(-1, 3 + 2), 1e-10),     upper = c(rep(1, 3 + 2), Inf),     line_search = c(1, 0.1, 1e-2)   ) ) summary(result) #>  #> Call: #> fastcpd.arma(data = x[3 + seq_len(n)], order = c(3, 2), segment_count = 3,  #>     lower = c(rep(-1, 3 + 2), 1e-10), upper = c(rep(1, 3 + 2),  #>         Inf), line_search = c(1, 0.1, 0.01)) #>  #> Change points: #> 200  #>  #> Cost values: #> 494.3396 253.7842  #>  #> Parameters: #>      segment 1   segment 2 #> 1  0.001350478  0.74342384 #> 2 -0.828668713 -0.07333667 #> 3  0.200084507 -0.36950210 #> 4  0.208486751 -1.27312849 #> 5  0.999994041  0.45204533 #> 6  7.831992812  8.83494421 plot(result)  # }"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_binomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Find change points efficiently in logistic regression models — fastcpd_binomial","title":"Find change points efficiently in logistic regression models — fastcpd_binomial","text":"\"fastcpd_binomial\" \"fastcpd.binomial\" wrapper functions fastcpd find change points logistic regression models. function similar \"fastcpd\" except data default matrix data frame response variable first column thus formula required .","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_binomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find change points efficiently in logistic regression models — fastcpd_binomial","text":"","code":"fastcpd_binomial(data, ...)  fastcpd.binomial(data, ...)"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_binomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find change points efficiently in logistic regression models — fastcpd_binomial","text":"data matrix data frame response variable first column. ... arguments passed fastcpd, example, segment_count.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_binomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find change points efficiently in logistic regression models — fastcpd_binomial","text":"class fastcpd object.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_binomial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find change points efficiently in logistic regression models — fastcpd_binomial","text":"","code":"for (package in c(\"ggplot2\", \"mvtnorm\")) {   if (!requireNamespace(package, quietly = TRUE)) utils::install.packages(     package, repos = \"https://cloud.r-project.org\", quiet = TRUE   ) }  set.seed(1) n <- 500 p <- 4 x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p)) theta <- rbind(rnorm(p, 0, 1), rnorm(p, 2, 1)) y <- c(   rbinom(300, 1, 1 / (1 + exp(-x[1:300, ] %*% theta[1, ]))),   rbinom(200, 1, 1 / (1 + exp(-x[301:n, ] %*% theta[2, ]))) ) result <- suppressWarnings(fastcpd.binomial(cbind(y, x))) summary(result) #>  #> Call: #> fastcpd.binomial(data = cbind(y, x)) #>  #> Change points: #> 301  #>  #> Cost values: #> 137.2291 69.38333  #>  #> Parameters: #>    segment 1 segment 2 #> 1 -0.9606121 2.1356877 #> 2 -1.6525248 2.7666014 #> 3  1.0558616 2.3871760 #> 4  0.3810240 0.7277254 plot(result)"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_garch.html","id":null,"dir":"Reference","previous_headings":"","what":"Find change points efficiently in GARCH(p, q) models — fastcpd_garch","title":"Find change points efficiently in GARCH(p, q) models — fastcpd_garch","text":"\"fastcpd_garch\" \"fastcpd.garch\" wrapper functions fastcpd find change points GARCH(p, q) models. function similar \"fastcpd\" except data default one-column matrix univariate vector thus formula required .","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_garch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find change points efficiently in GARCH(p, q) models — fastcpd_garch","text":"","code":"fastcpd_garch(data, order = c(0, 0), ...)  fastcpd.garch(data, order = c(0, 0), ...)"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_garch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find change points efficiently in GARCH(p, q) models — fastcpd_garch","text":"data numeric vector, matrix, data frame time series object. order positive integer vector length two specifying order GARCH model. ... arguments passed fastcpd, example, segment_count.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_garch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find change points efficiently in GARCH(p, q) models — fastcpd_garch","text":"class fastcpd object.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_garch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find change points efficiently in GARCH(p, q) models — fastcpd_garch","text":"","code":"# \\donttest{ if (!requireNamespace(\"ggplot2\", quietly = TRUE)) utils::install.packages(   \"ggplot2\", repos = \"https://cloud.r-project.org\", quiet = TRUE )  set.seed(1) n <- 400 sigma_2 <- rep(1, n + 1) x <- rep(0, n + 1) for (i in seq_len(200)) {   sigma_2[i + 1] <- 20 + 0.5 * x[i]^2 + 0.1 * sigma_2[i]   x[i + 1] <- rnorm(1, 0, sqrt(sigma_2[i + 1])) } for (i in 201:400) {   sigma_2[i + 1] <- 1 + 0.1 * x[i]^2 + 0.5 * sigma_2[i]   x[i + 1] <- rnorm(1, 0, sqrt(sigma_2[i + 1])) } result <- suppressWarnings(   fastcpd.garch(x[-1], c(1, 1), include.mean = FALSE) ) #> Residual calculation failed. summary(result) #>  #> Call: #> fastcpd.garch(data = x[-1], order = c(1, 1), include.mean = FALSE) #>  #> Change points: #> 205  #>  #> Cost values: #> 450.6641 179.6463  plot(result)  # }"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_lasso.html","id":null,"dir":"Reference","previous_headings":"","what":"Find change points efficiently in penalized linear regression models — fastcpd_lasso","title":"Find change points efficiently in penalized linear regression models — fastcpd_lasso","text":"\"fastcpd_lasso\" \"fastcpd.lasso\" wrapper functions fastcpd find change points penalized linear regression models. function similar \"fastcpd\" except data default matrix data frame response variable first column thus formula required .","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_lasso.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find change points efficiently in penalized linear regression models — fastcpd_lasso","text":"","code":"fastcpd_lasso(data, ...)  fastcpd.lasso(data, ...)"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_lasso.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find change points efficiently in penalized linear regression models — fastcpd_lasso","text":"data matrix data frame response variable first column. ... arguments passed fastcpd, example, segment_count.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_lasso.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find change points efficiently in penalized linear regression models — fastcpd_lasso","text":"class fastcpd object.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_lasso.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find change points efficiently in penalized linear regression models — fastcpd_lasso","text":"","code":"# \\donttest{ for (package in c(\"ggplot2\", \"mvtnorm\")) {   if (!requireNamespace(package, quietly = TRUE)) utils::install.packages(     package, repos = \"https://cloud.r-project.org\", quiet = TRUE   ) }  set.seed(1) n <- 480 p_true <- 6 p <- 50 x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p)) theta_0 <- rbind(   runif(p_true, -5, -2),   runif(p_true, -3, 3),   runif(p_true, 2, 5),   runif(p_true, -5, 5) ) theta_0 <- cbind(theta_0, matrix(0, ncol = p - p_true, nrow = 4)) y <- c(   x[1:80, ] %*% theta_0[1, ] + rnorm(80, 0, 1),   x[81:200, ] %*% theta_0[2, ] + rnorm(120, 0, 1),   x[201:320, ] %*% theta_0[3, ] + rnorm(120, 0, 1),   x[321:n, ] %*% theta_0[4, ] + rnorm(160, 0, 1) ) result <- fastcpd.lasso(   cbind(y, x),   multiple_epochs = function(segment_length) if (segment_length < 30) 1 else 0 ) summary(result) #>  #> Call: #> fastcpd.lasso(data = cbind(y, x), multiple_epochs = function(segment_length) if (segment_length <  #>     30) 1 else 0) #>  #> Change points: #> 80 200 321  #>  #> Cost values: #> 266.8782 287.9668 328.5159 404.5794  #>  #> Parameters: #> 50 x 4 sparse Matrix of class \"dgCMatrix\" #>       segment 1  segment 2 segment 3 segment 4 #>  [1,] -1.944819 -1.9494841  4.144977 -2.467450 #>  [2,] -1.800555 -1.7048814  3.447478  2.276368 #>  [3,] -3.450190  0.7004564  4.408074  2.943917 #>  [4,] -4.152076  .          1.872264 -2.593882 #>  [5,] -4.052206  .          3.959711  2.403336 #>  [6,] -3.295512 -1.8637019  2.496156  3.410347 #>  [7,]  .         .          .         .        #>  [8,]  .         .          .         .        #>  [9,]  .         .          .         .        #> [10,]  .         .          .         .        #> [11,]  .         .          .         .        #> [12,]  .         .          .         .        #> [13,]  .         .          .         .        #> [14,]  .         .          .         .        #> [15,]  .         .          .         .        #> [16,]  .         .          .         .        #> [17,]  .         .          .         .        #> [18,]  .         .          .         .        #> [19,]  .         .          .         .        #> [20,]  .         .          .         .        #> [21,]  .         .          .         .        #> [22,]  .         .          .         .        #> [23,]  .         .          .         .        #> [24,]  .         .          .         .        #> [25,]  .         .          .         .        #> [26,]  .         .          .         .        #> [27,]  .         .          .         .        #> [28,]  .         .          .         .        #> [29,]  .         .          .         .        #> [30,]  .         .          .         .        #> [31,]  .         .          .         .        #> [32,]  .         .          .         .        #> [33,]  .         .          .         .        #> [34,]  .         .          .         .        #> [35,]  .         .          .         .        #> [36,]  .         .          .         .        #> [37,]  .         .          .         .        #> [38,]  .         .          .         .        #> [39,]  .         .          .         .        #> [40,]  .         .          .         .        #> [41,]  .         .          .         .        #> [42,]  .         .          .         .        #> [43,]  .         .          .         .        #> [44,]  .         .          .         .        #> [45,]  .         .          .         .        #> [46,]  .         .          .         .        #> [47,]  .         .          .         .        #> [48,]  .         .          .         .        #> [49,]  .         .          .         .        #> [50,]  .         .          .         .        plot(result)  # }"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_lm.html","id":null,"dir":"Reference","previous_headings":"","what":"Find change points efficiently in linear regression models — fastcpd_lm","title":"Find change points efficiently in linear regression models — fastcpd_lm","text":"\"fastcpd_lm\" \"fastcpd.lm\" wrapper functions fastcpd find change points linear regression models. function similar \"fastcpd\" except data default matrix data frame response variable first column thus formula required .","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find change points efficiently in linear regression models — fastcpd_lm","text":"","code":"fastcpd_lm(data, ...)  fastcpd.lm(data, ...)"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_lm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find change points efficiently in linear regression models — fastcpd_lm","text":"data matrix data frame response variable first column. ... arguments passed fastcpd, example, segment_count.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_lm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find change points efficiently in linear regression models — fastcpd_lm","text":"class fastcpd object.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_lm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find change points efficiently in linear regression models — fastcpd_lm","text":"","code":"for (package in c(\"ggplot2\", \"mvtnorm\")) {   if (!requireNamespace(package, quietly = TRUE)) utils::install.packages(     package, repos = \"https://cloud.r-project.org\", quiet = TRUE   ) }  set.seed(1) n <- 300 p <- 4 x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p)) theta_0 <- rbind(c(1, 3.2, -1, 0), c(-1, -0.5, 2.5, -2), c(0.8, 0, 1, 2)) y <- c(   x[1:100, ] %*% theta_0[1, ] + rnorm(100, 0, 3),   x[101:200, ] %*% theta_0[2, ] + rnorm(100, 0, 3),   x[201:n, ] %*% theta_0[3, ] + rnorm(100, 0, 3) ) result_lm <- fastcpd.lm(cbind(y, x)) summary(result_lm) #>  #> Call: #> fastcpd.lm(data = cbind(y, x)) #>  #> Change points: #> 97 201  #>  #> Cost values: #> 531.2644 426.6924 473.562  #>  #> Parameters: #>     segment 1  segment 2 segment 3 #> 1  0.74291290 -0.6153049 0.8733473 #> 2  3.69465275 -0.5034948 0.3222868 #> 3 -1.24746871  2.2522352 1.0188455 #> 4  0.09579985 -1.9875126 2.2761340 plot(result_lm)   set.seed(1) n <- 600 p <- 4 d <- 2 x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p)) theta_1 <- matrix(runif(8, -3, -1), nrow = p) theta_2 <- matrix(runif(8, -1, 3), nrow = p) y <- rbind(   x[1:350, ] %*% theta_1 + mvtnorm::rmvnorm(350, rep(0, d), 3 * diag(d)),   x[351:n, ] %*% theta_2 + mvtnorm::rmvnorm(250, rep(0, d), 3 * diag(d)) ) result_mlm <- fastcpd.lm(cbind.data.frame(y = y, x = x), p.response = 2) summary(result_mlm) #>  #> Call: #> fastcpd.lm(data = cbind.data.frame(y = y, x = x), p.response = 2) #>  #> Change points: #> 375  #>  #> Cost values: #> 1987.127 908.4033"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_ma.html","id":null,"dir":"Reference","previous_headings":"","what":"Find change points efficiently in MA(q) models — fastcpd_ma","title":"Find change points efficiently in MA(q) models — fastcpd_ma","text":"fastcpd_ma fastcpd.ma wrapper functions fastcpd find change points MA(q) models. function similar fastcpd except data default one-column matrix univariate vector thus formula required .","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_ma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find change points efficiently in MA(q) models — fastcpd_ma","text":"","code":"fastcpd_ma(data, order = 0, ...)  fastcpd.ma(data, order = 0, ...)"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_ma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find change points efficiently in MA(q) models — fastcpd_ma","text":"data numeric vector, matrix, data frame time series object. order positive integer vector length three first two elements zeros specifying order MA model. ... arguments passed fastcpd, example, segment_count. One special argument can passed include.mean, logical value indicating whether mean included model. default value TRUE.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_ma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find change points efficiently in MA(q) models — fastcpd_ma","text":"class fastcpd object.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_ma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find change points efficiently in MA(q) models — fastcpd_ma","text":"","code":"# \\donttest{ if (!requireNamespace(\"ggplot2\", quietly = TRUE)) utils::install.packages(   \"ggplot2\", repos = \"https://cloud.r-project.org\", quiet = TRUE )  set.seed(1) n <- 400 w <- rnorm(n + 4, 0, 0.1) x <- rep(NA, n) for (i in 1:200) {   x[i] <- w[i + 4] - 5 / 3 * w[i + 3] + 11 / 12 * w[i + 2] - 5 / 12 * w[i + 1] +     1 / 6 * w[i] } for (i in 201:n) {   x[i] <- w[i + 4] - 4 / 3 * w[i + 3] + 7 / 9 * w[i + 2] - 16 / 27 * w[i + 1] +     4 / 27 * w[i] } result <- suppressMessages(   fastcpd.ma(x, 4, include.mean = FALSE, trim = 0) ) summary(result) #>  #> Call: #> fastcpd.ma(data = x, order = 4, include.mean = FALSE, trim = 0) #>  #> Change points: #> 200  #>  #> Cost values: #> -185.4279 -174.3401  plot(result)  # }"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Find change points efficiently in mean change models — fastcpd_mean","title":"Find change points efficiently in mean change models — fastcpd_mean","text":"\"fastcpd_mean\" \"fastcpd.mean\" wrapper functions fastcpd find mean change. function similar \"fastcpd\" except data default matrix data frame vector row / element observation thus formula required .","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find change points efficiently in mean change models — fastcpd_mean","text":"","code":"fastcpd_mean(data, ...)  fastcpd.mean(data, ...)"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find change points efficiently in mean change models — fastcpd_mean","text":"data matrix, data frame vector. ... arguments passed fastcpd, example, segment_count.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find change points efficiently in mean change models — fastcpd_mean","text":"class fastcpd object.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find change points efficiently in mean change models — fastcpd_mean","text":"","code":"if (!requireNamespace(\"mvtnorm\", quietly = TRUE)) utils::install.packages(   \"mvtnorm\", repos = \"https://cloud.r-project.org\", quiet = TRUE )  set.seed(1) p <- 3 data <- rbind(   mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(100, p)),   mvtnorm::rmvnorm(400, mean = rep(50, p), sigma = diag(100, p)),   mvtnorm::rmvnorm(300, mean = rep(2, p), sigma = diag(100, p)) ) result <- fastcpd.mean(data) summary(result) #>  #> Call: #> fastcpd.mean(data = data) #>  #> Change points: #> 300 700  #>  #> Cost values: #> 3388.157 4523.582 3381.572  # Test `fastcpd.mean()` running time. The running time is expected to be less # than 1.5 seconds. set.seed(1) data <- c(rnorm(10000), rnorm(1000) + 1) (result_time <- system.time(   result <- fastcpd.mean(data, r.progress = FALSE, cp_only = TRUE) )) #>    user  system elapsed  #>   0.691   0.035   0.726  result@cp_set #> [1] 10006"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_meanvariance.html","id":null,"dir":"Reference","previous_headings":"","what":"Find change points efficiently in variance change models — fastcpd_meanvariance","title":"Find change points efficiently in variance change models — fastcpd_meanvariance","text":"fastcpd_meanvariance, fastcpd.meanvariance, fastcpd_mv, fastcpd.mv wrapper functions fastcpd find meanvariance change. function similar fastcpd except data default matrix data frame vector row / element observation thus formula required .","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_meanvariance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find change points efficiently in variance change models — fastcpd_meanvariance","text":"","code":"fastcpd_meanvariance(data, ...)  fastcpd.meanvariance(data, ...)  fastcpd_mv(data, ...)  fastcpd.mv(data, ...)"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_meanvariance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find change points efficiently in variance change models — fastcpd_meanvariance","text":"data matrix, data frame vector. ... arguments passed fastcpd, example, segment_count.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_meanvariance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find change points efficiently in variance change models — fastcpd_meanvariance","text":"class fastcpd object.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_meanvariance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find change points efficiently in variance change models — fastcpd_meanvariance","text":"","code":"if (!requireNamespace(\"mvtnorm\", quietly = TRUE)) utils::install.packages(   \"mvtnorm\", repos = \"https://cloud.r-project.org\", quiet = TRUE )  set.seed(1) p <- 3 result <- fastcpd.mv(   rbind(     mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(1, p)),     mvtnorm::rmvnorm(400, mean = rep(10, p), sigma = diag(1, p)),     mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(50, p)),     mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(1, p)),     mvtnorm::rmvnorm(400, mean = rep(10, p), sigma = diag(1, p)),     mvtnorm::rmvnorm(300, mean = rep(10, p), sigma = diag(50, p))   ) ) summary(result) #>  #> Call: #> fastcpd.mv(data = rbind(mvtnorm::rmvnorm(300, mean = rep(0, p),  #>     sigma = diag(1, p)), mvtnorm::rmvnorm(400, mean = rep(10,  #>     p), sigma = diag(1, p)), mvtnorm::rmvnorm(300, mean = rep(0,  #>     p), sigma = diag(50, p)), mvtnorm::rmvnorm(300, mean = rep(0,  #>     p), sigma = diag(1, p)), mvtnorm::rmvnorm(400, mean = rep(10,  #>     p), sigma = diag(1, p)), mvtnorm::rmvnorm(300, mean = rep(10,  #>     p), sigma = diag(50, p)))) #>  #> Change points: #> 300 700 1000 1300 1700  #>  #> Cost values: #> 1314.791 1760.724 3069.447 1335.78 1684.092 3022.414"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_poisson.html","id":null,"dir":"Reference","previous_headings":"","what":"Find change points efficiently in Poisson regression models — fastcpd_poisson","title":"Find change points efficiently in Poisson regression models — fastcpd_poisson","text":"\"fastcpd_poisson\" \"fastcpd.poisson\" wrapper functions fastcpd find change points Poisson regression models. function similar \"fastcpd\" except data default matrix data frame response variable first column thus formula required .","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_poisson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find change points efficiently in Poisson regression models — fastcpd_poisson","text":"","code":"fastcpd_poisson(data, ...)  fastcpd.poisson(data, ...)"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_poisson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find change points efficiently in Poisson regression models — fastcpd_poisson","text":"data matrix data frame response variable first column. ... arguments passed fastcpd, example, segment_count.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_poisson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find change points efficiently in Poisson regression models — fastcpd_poisson","text":"class fastcpd object.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_poisson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find change points efficiently in Poisson regression models — fastcpd_poisson","text":"","code":"# \\donttest{ for (package in c(\"ggplot2\", \"mvtnorm\")) {   if (!requireNamespace(package, quietly = TRUE)) utils::install.packages(     package, repos = \"https://cloud.r-project.org\", quiet = TRUE   ) }  set.seed(1) n <- 1100 p <- 3 x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p)) delta <- rnorm(p) theta_0 <- c(1, 0.3, -1) y <- c(   rpois(500, exp(x[1:500, ] %*% theta_0)),   rpois(300, exp(x[501:800, ] %*% (theta_0 + delta))),   rpois(200, exp(x[801:1000, ] %*% theta_0)),   rpois(100, exp(x[1001:1100, ] %*% (theta_0 - delta))) ) result <- fastcpd.poisson(cbind(y, x)) summary(result) #>  #> Call: #> fastcpd.poisson(data = cbind(y, x)) #>  #> Change points: #> 505 800 1003  #>  #> Cost values: #> 250.9977 188.4381 98.97221 51.24394  #>  #> Parameters: #>    segment 1  segment 2  segment 3  segment 4 #> 1  1.0155039  0.6050537  1.0536534  1.4451928 #> 2  0.2763447 -0.2766940  0.2629143  0.9910079 #> 3 -1.0492042 -0.5883050 -0.9551797 -1.4354638 plot(result)  # }"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Find change points efficiently in time series data — fastcpd_ts","title":"Find change points efficiently in time series data — fastcpd_ts","text":"fastcpd_ts wrapper function fastcpd find change points time series data. function similar fastcpd except data time series data family one \"ar\", \"var\", \"arima\" \"garch\".","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find change points efficiently in time series data — fastcpd_ts","text":"","code":"fastcpd_ts(data, family = NULL, order = c(0, 0, 0), ...)  fastcpd.ts(data, family = NULL, order = c(0, 0, 0), ...)"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find change points efficiently in time series data — fastcpd_ts","text":"data numeric vector, matrix, data frame time series object. family character string specifying family time series. value one \"ar\", \"var\", \"arima\" \"garch\". order positive integer vector length less four specifying order time series. Possible combinations family : ar, NUMERIC(1): AR(p) model using linear regression. var, NUMERIC(1): VAR(p) model using linear regression. ma, NUMERIC(1): MA(q) model using forecast::Arima. ma, NUMERIC(3): ARIMA(0, 0, q) model using forecast::Arima, q third element vector. arima, NUMERIC(3): ARIMA(p, d, q) model using forecast::Arima. garch, NUMERIC(2): GARCH(p, q) model using tseries::garch. ... arguments passed fastcpd, example, segment_count. One special argument can passed include.mean, logical value indicating whether mean included model. default value TRUE.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_ts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find change points efficiently in time series data — fastcpd_ts","text":"class fastcpd object.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_ts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find change points efficiently in time series data — fastcpd_ts","text":"","code":"# \\donttest{ if (!requireNamespace(\"ggplot2\", quietly = TRUE)) utils::install.packages(   \"ggplot2\", repos = \"https://cloud.r-project.org\", quiet = TRUE )  set.seed(1) n <- 600 x <- rep(0, n + 1) for (i in 1:300) {   x[i + 1] <- 0.8 * x[i] + rnorm(1, 0, 2) } for (i in 301:n) {   x[i + 1] <- 0.1 * x[i] + rnorm(1, 0, 2) } result <- fastcpd.ts(   x[1 + seq_len(n)],   \"arima\",   c(1, 0, 0),   include.mean = FALSE,   trim = 0,   beta = (1 + 1 + 1) * log(n) / 2 * 3 ) summary(result) #>  #> Call: #> fastcpd.ts(data = x[1 + seq_len(n)], family = \"arima\", order = c(1,  #>     0, 0), include.mean = FALSE, trim = 0, beta = (1 + 1 + 1) *  #>     log(n)/2 * 3) #>  #> Change points: #> 301  #>  #> Cost values: #> 623.7791 643.8769  plot(result)  # }"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Find change points efficiently in VAR(p) models — fastcpd_var","title":"Find change points efficiently in VAR(p) models — fastcpd_var","text":"fastcpd_var fastcpd.var wrapper functions fastcpd.ts find change points VAR(p) models. function similar fastcpd.ts except data default matrix row observation thus formula required .","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find change points efficiently in VAR(p) models — fastcpd_var","text":"","code":"fastcpd_var(data, order = 0, ...)  fastcpd.var(data, order = 0, ...)"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find change points efficiently in VAR(p) models — fastcpd_var","text":"data matrix, data frame time series object. order positive integer specifying order VAR model. ... arguments passed fastcpd, example, segment_count.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find change points efficiently in VAR(p) models — fastcpd_var","text":"class fastcpd object.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find change points efficiently in VAR(p) models — fastcpd_var","text":"","code":"set.seed(1) n <- 800 p <- 2 theta_1 <- matrix(c(-0.3, 0.6, -0.5, 0.4, 0.2, 0.2, 0.2, -0.2), nrow = p) theta_2 <- matrix(c(0.3, -0.4, 0.1, -0.5, -0.5, -0.2, -0.5, 0.2), nrow = p) x <- matrix(0, n + 2, p) for (i in 1:500) {   x[i + 2, ] <- theta_1 %*% c(x[i + 1, ], x[i, ]) + rnorm(p, 0, 1) } for (i in 501:n) {   x[i + 2, ] <- theta_2 %*% c(x[i + 1, ], x[i, ]) + rnorm(p, 0, 1) } result <- fastcpd.var(x, 2, cost_adjustment = NULL) summary(result) #>  #> Call: #> fastcpd.var(data = x, order = 2, cost_adjustment = NULL) #>  #> Change points: #> 518  #>  #> Cost values: #> 1537.24 807.8969"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_variance.html","id":null,"dir":"Reference","previous_headings":"","what":"Find change points efficiently in variance change models — fastcpd_variance","title":"Find change points efficiently in variance change models — fastcpd_variance","text":"fastcpd_variance fastcpd.variance wrapper functions fastcpd find variance change. function similar fastcpd except data default matrix data frame vector row / element observation thus formula required .","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_variance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find change points efficiently in variance change models — fastcpd_variance","text":"","code":"fastcpd_variance(data, ...)  fastcpd.variance(data, ...)"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_variance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find change points efficiently in variance change models — fastcpd_variance","text":"data matrix, data frame vector. ... arguments passed fastcpd, example, segment_count.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_variance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find change points efficiently in variance change models — fastcpd_variance","text":"class fastcpd object.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_variance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find change points efficiently in variance change models — fastcpd_variance","text":"","code":"if (!requireNamespace(\"mvtnorm\", quietly = TRUE)) utils::install.packages(   \"mvtnorm\", repos = \"https://cloud.r-project.org\", quiet = TRUE )  set.seed(1) p <- 3 result <- fastcpd.variance(   rbind(     mvtnorm::rmvnorm(300, rep(0, p), crossprod(matrix(runif(p^2) * 2 - 1, p))),     mvtnorm::rmvnorm(400, rep(0, p), crossprod(matrix(runif(p^2) * 2 - 1, p))),     mvtnorm::rmvnorm(300, rep(0, p), crossprod(matrix(runif(p^2) * 2 - 1, p)))   ) ) summary(result) #>  #> Call: #> fastcpd.variance(data = rbind(mvtnorm::rmvnorm(300, rep(0, p),  #>     crossprod(matrix(runif(p^2) * 2 - 1, p))), mvtnorm::rmvnorm(400,  #>     rep(0, p), crossprod(matrix(runif(p^2) * 2 - 1, p))), mvtnorm::rmvnorm(300,  #>     rep(0, p), crossprod(matrix(runif(p^2) * 2 - 1, p))))) #>  #> Change points: #> 300 700  #>  #> Cost values: #> 762.9152 1719.655 1293.106"},{"path":"https://fastcpd.xingchi.li/reference/occupancy.html","id":null,"dir":"Reference","previous_headings":"","what":"Occupancy Detection Data Set — occupancy","title":"Occupancy Detection Data Set — occupancy","text":"Data set binary classification room occupancy temperature, humidity, light CO2 measurements. Ground-truth occupancy obtained time stamped pictures taken every minute.","code":""},{"path":"https://fastcpd.xingchi.li/reference/occupancy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Occupancy Detection Data Set — occupancy","text":"","code":"occupancy"},{"path":"https://fastcpd.xingchi.li/reference/occupancy.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Occupancy Detection Data Set — occupancy","text":"data frame 9752 rows 7 variables: date Character format \"YYYY-MM-DD hh:mm:ss\"     2015-02-11 14:48:00 2015-02-18 09:19:00 Temperature Temperature Celsius Humidity Humidity Light Light CO2 CO2 HumidityRatio Humidity Ratio Occupancy Binary variable values 0 (unoccupied) 1","code":""},{"path":"https://fastcpd.xingchi.li/reference/occupancy.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Occupancy Detection Data Set — occupancy","text":"<https://github.com/LuisM78/Occupancy-detection-data>","code":""},{"path":"https://fastcpd.xingchi.li/reference/plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the data and the change points for a fastcpd object — plot.fastcpd","title":"Plot the data and the change points for a fastcpd object — plot.fastcpd","text":"Plot data change points fastcpd object","code":""},{"path":"https://fastcpd.xingchi.li/reference/plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the data and the change points for a fastcpd object — plot.fastcpd","text":"","code":"# S3 method for fastcpd plot(x, ...)  # S4 method for fastcpd,missing plot(x, y, ...)"},{"path":"https://fastcpd.xingchi.li/reference/plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the data and the change points for a fastcpd object — plot.fastcpd","text":"x fastcpd object. ... Ignored. y Ignored.","code":""},{"path":"https://fastcpd.xingchi.li/reference/plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the data and the change points for a fastcpd object — plot.fastcpd","text":"return value, called plotting.","code":""},{"path":"https://fastcpd.xingchi.li/reference/print.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the call and the change points for a fastcpd object — print.fastcpd","title":"Print the call and the change points for a fastcpd object — print.fastcpd","text":"Print call change points fastcpd object","code":""},{"path":"https://fastcpd.xingchi.li/reference/print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the call and the change points for a fastcpd object — print.fastcpd","text":"","code":"# S3 method for fastcpd print(x, ...)  # S4 method for fastcpd print(x, ...)"},{"path":"https://fastcpd.xingchi.li/reference/print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the call and the change points for a fastcpd object — print.fastcpd","text":"x fastcpd object. ... Ignored.","code":""},{"path":"https://fastcpd.xingchi.li/reference/print.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the call and the change points for a fastcpd object — print.fastcpd","text":"Return (temporarily) invisible copy fastcpd object.   Called primarily printing change points model.","code":""},{"path":"https://fastcpd.xingchi.li/reference/show.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the available methods for a fastcpd object — show.fastcpd","title":"Show the available methods for a fastcpd object — show.fastcpd","text":"Show available methods fastcpd object","code":""},{"path":"https://fastcpd.xingchi.li/reference/show.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the available methods for a fastcpd object — show.fastcpd","text":"","code":"# S3 method for fastcpd show(object)  # S4 method for fastcpd show(object)"},{"path":"https://fastcpd.xingchi.li/reference/show.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the available methods for a fastcpd object — show.fastcpd","text":"object fastcpd object.","code":""},{"path":"https://fastcpd.xingchi.li/reference/show.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show the available methods for a fastcpd object — show.fastcpd","text":"return value, called showing list available methods   fastcpd object.","code":""},{"path":"https://fastcpd.xingchi.li/reference/summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the summary of a fastcpd object — summary.fastcpd","title":"Show the summary of a fastcpd object — summary.fastcpd","text":"Show summary fastcpd object","code":""},{"path":"https://fastcpd.xingchi.li/reference/summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the summary of a fastcpd object — summary.fastcpd","text":"","code":"# S3 method for fastcpd summary(object, ...)  # S4 method for fastcpd summary(object, ...)"},{"path":"https://fastcpd.xingchi.li/reference/summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the summary of a fastcpd object — summary.fastcpd","text":"object fastcpd object. ... Ignored.","code":""},{"path":"https://fastcpd.xingchi.li/reference/summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show the summary of a fastcpd object — summary.fastcpd","text":"Return (temporarily) invisible copy fastcpd object.   Called primarily printing summary model including   call, change points, cost values estimated parameters.","code":""},{"path":"https://fastcpd.xingchi.li/reference/transcriptome.html","id":null,"dir":"Reference","previous_headings":"","what":"Transcription Profiling of 57 Human Bladder Carcinoma Samples — transcriptome","title":"Transcription Profiling of 57 Human Bladder Carcinoma Samples — transcriptome","text":"Transcriptome analysis 57 bladder carcinomas Affymetrix HG-U95A HG-U95Av2 microarrays","code":""},{"path":"https://fastcpd.xingchi.li/reference/transcriptome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transcription Profiling of 57 Human Bladder Carcinoma Samples — transcriptome","text":"","code":"transcriptome"},{"path":"https://fastcpd.xingchi.li/reference/transcriptome.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Transcription Profiling of 57 Human Bladder Carcinoma Samples — transcriptome","text":"data frame 2215 rows 43 variables: 3 Individual 3 4 Individual 4 5 Individual 5 6 Individual 6 7 Individual 7 8 Individual 8 9 Individual 9 10 Individual 10 14 Individual 14 15 Individual 15 16 Individual 16 17 Individual 17 18 Individual 18 19 Individual 19 21 Individual 21 22 Individual 22 24 Individual 24 26 Individual 26 28 Individual 28 30 Individual 30 31 Individual 31 33 Individual 33 34 Individual 34 35 Individual 35 36 Individual 36 37 Individual 37 38 Individual 38 39 Individual 39 40 Individual 40 41 Individual 41 42 Individual 42 43 Individual 43 44 Individual 44 45 Individual 45 46 Individual 46 47 Individual 47 48 Individual 48 49 Individual 49 50 Individual 50 51 Individual 51 53 Individual 53 54 Individual 54 57 Individual 57","code":""},{"path":"https://fastcpd.xingchi.li/reference/transcriptome.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Transcription Profiling of 57 Human Bladder Carcinoma Samples — transcriptome","text":"<https://www.ebi.ac.uk/biostudies/arrayexpress/studies/E-TABM-147> <https://github.com/cran/ecp/tree/master/data>","code":""},{"path":"https://fastcpd.xingchi.li/reference/transcriptome.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transcription Profiling of 57 Human Bladder Carcinoma Samples — transcriptome","text":"","code":"# \\donttest{ for (package in c(\"ggplot2\", \"gridExtra\")) {   if (!requireNamespace(package, quietly = TRUE)) utils::install.packages(     package, repos = \"https://cloud.r-project.org\", quiet = TRUE   ) }  result <- fastcpd.mean(transcriptome$\"10\", trim = 0.005) summary(result) #>  #> Call: #> fastcpd.mean(data = transcriptome$\"10\", trim = 0.005) #>  #> Change points: #> 177 264 394 534 579 656 788 811 869 934 960 1051 1141 1286 1319 1368 1568 1657 1724 1906 1972 1994 2041 2058 2146 2200  #>  #> Cost values: #> -150.0608 -74.94586 -97.42742 -72.38886 113.286 -81.74779 -112.9846 -26.82538 -50.77711 -35.38739 2.809858 -55.11852 -59.57469 -97.52339 -35.94149 -16.56248 -190.1474 25.1781 202.9368 -159.4619 -33.35084 12.65955 10.59738 -9.050017 -76.02135 -55.56151 -6.661788  plot(result)   result_all <- fastcpd.mean(   transcriptome,   beta = (ncol(transcriptome) + 1) * log(nrow(transcriptome)) / 2 * 5,   trim = 0 )  plots <- lapply(   seq_len(ncol(transcriptome)), function(i) {     ggplot2::ggplot(       data = data.frame(         x = seq_along(transcriptome[, i]), y = transcriptome[, i]       ),       ggplot2::aes(x = x, y = y)     ) +       ggplot2::geom_line(color = \"blue\") +       ggplot2::geom_vline(         xintercept = result_all@cp_set,         color = \"red\",         linetype = \"dotted\",         linewidth = 0.5,         alpha = 0.7       ) +       ggplot2::theme_void()   } )  gridExtra::grid.arrange(grobs = plots, ncol = 1, nrow = ncol(transcriptome))  # }"},{"path":"https://fastcpd.xingchi.li/reference/uk_seatbelts.html","id":null,"dir":"Reference","previous_headings":"","what":"UK Seatbelts Data — uk_seatbelts","title":"UK Seatbelts Data — uk_seatbelts","text":"Road Casualties Great Britain 1969–84.","code":""},{"path":"https://fastcpd.xingchi.li/reference/uk_seatbelts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UK Seatbelts Data — uk_seatbelts","text":"","code":"uk_seatbelts"},{"path":"https://fastcpd.xingchi.li/reference/uk_seatbelts.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"UK Seatbelts Data — uk_seatbelts","text":"uk_seatbelts multiple time series, columns DriversKilled car drivers killed. front front-seat passengers killed seriously injured. rear rear-seat passengers killed seriously injured. kms distance driven. PetrolPrice petrol price. VanKilled number van (‘light goods vehicle’) drivers. law 0/1: law effect month?","code":""},{"path":"https://fastcpd.xingchi.li/reference/uk_seatbelts.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"UK Seatbelts Data — uk_seatbelts","text":"R package datasets","code":""},{"path":"https://fastcpd.xingchi.li/reference/uk_seatbelts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"UK Seatbelts Data — uk_seatbelts","text":"","code":"for (package in c(\"ggplot2\", \"lubridate\", \"zoo\")) {   if (!requireNamespace(package, quietly = TRUE)) utils::install.packages(     package, repos = \"https://cloud.r-project.org\", quiet = TRUE   ) }  result_ar <- fastcpd.ar(diff(uk_seatbelts[, \"drivers\"], 12), 1, beta = \"BIC\") summary(result_ar) #>  #> Call: #> fastcpd.ar(data = diff(uk_seatbelts[, \"drivers\"], 12), order = 1,  #>     beta = \"BIC\") #>  #> Change points: #> 71 158  #>  #> Cost values: #> 1294601 914679.3 310961.1  #>  #> Parameters: #>   segment 1   segment 2 segment 3 #> 1 0.5543967 -0.07501079 0.7825427 plot(result_ar)   result_lm <- suppressMessages(fastcpd.lm(   diff(uk_seatbelts[, c(\"drivers\", \"kms\", \"PetrolPrice\", \"law\")], lag = 12) )) cp_dates <- as.Date(\"1969-01-01\", format = \"%Y-%m-%d\") cp_dates <- cp_dates + lubridate::period(month = 1 + result_lm@cp_set + 12) cp_dates <- zoo::as.yearmon(cp_dates)  uk_seatbelts_df <- data.frame(   dates = zoo::as.yearmon(time(uk_seatbelts)),   drivers = c(uk_seatbelts[, \"drivers\"]) )  ggplot2::ggplot() +   ggplot2::geom_line(     data = uk_seatbelts_df,     mapping = ggplot2::aes(x = dates, y = drivers)   ) +   ggplot2::geom_vline(     xintercept = cp_dates,     linetype = \"dashed\",     color = \"red\"   ) +   zoo::scale_x_yearmon() +   ggplot2::annotate(     \"text\",     x = cp_dates,     y = 1025,     label = as.character(cp_dates),     color = \"blue\"   )"},{"path":"https://fastcpd.xingchi.li/reference/variance_arma.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance estimation for ARMA model with change points — variance_arma","title":"Variance estimation for ARMA model with change points — variance_arma","text":"Estimate variance block take average.","code":""},{"path":"https://fastcpd.xingchi.li/reference/variance_arma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variance estimation for ARMA model with change points — variance_arma","text":"","code":"variance_arma(data, p, q, max_order = p * q)  variance.arma(data, p, q, max_order = p * q)"},{"path":"https://fastcpd.xingchi.li/reference/variance_arma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variance estimation for ARMA model with change points — variance_arma","text":"data one-column matrix vector. p order autoregressive part. q order moving average part. max_order maximum order AR model consider.","code":""},{"path":"https://fastcpd.xingchi.li/reference/variance_arma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variance estimation for ARMA model with change points — variance_arma","text":"numeric value representing variance.","code":""},{"path":"https://fastcpd.xingchi.li/reference/variance_arma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variance estimation for ARMA model with change points — variance_arma","text":"","code":"set.seed(1) n <- 300 w <- rnorm(n + 3, 0, 10) x <- rep(0, n + 3) for (i in 1:200) {   x[i + 3] <- 0.1 * x[i + 2] - 0.3 * x[i + 1] + 0.1 * x[i] +     0.1 * w[i + 2] + 0.5 * w[i + 1] + w[i + 3] } for (i in 201:n) {   x[i + 3] <- 0.3 * x[i + 2] + 0.1 * x[i + 1] - 0.3 * x[i] -     0.6 * w[i + 2] - 0.1 * w[i + 1] + w[i + 3] } (result <- variance.arma(x[-seq_len(3)], p = 3, q = 2)) #> $table #>         sigma2      AIC      BIC #> AR(1) 104.8647 4.659337 4.671683 #> AR(2) 100.2594 4.621094 4.645786 #> AR(3) 115.3102 4.767626 4.804664 #> AR(4) 105.4397 4.684806 4.734190 #> AR(5) 115.4258 4.781962 4.843691 #> AR(6) 117.0668 4.802745 4.876821 #>  #> $sigma2_aic #> [1] 100.2594 #>  #> $sigma2_bic #> [1] 100.2594 #>"},{"path":"https://fastcpd.xingchi.li/reference/variance_lm.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance estimation for linear models with change points — variance_lm","title":"Variance estimation for linear models with change points — variance_lm","text":"Estimate variance block take average.","code":""},{"path":"https://fastcpd.xingchi.li/reference/variance_lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variance estimation for linear models with change points — variance_lm","text":"","code":"variance_lm(data, d = 1, block_size = ncol(data) - d + 1, outlier_iqr = Inf)  variance.lm(data, d = 1, block_size = ncol(data) - d + 1, outlier_iqr = Inf)"},{"path":"https://fastcpd.xingchi.li/reference/variance_lm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variance estimation for linear models with change points — variance_lm","text":"data matrix data frame response variable first column. d dimension response variable. block_size size blocks use variance estimation. outlier_iqr number interquartile ranges use threshold outlier detection.","code":""},{"path":"https://fastcpd.xingchi.li/reference/variance_lm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variance estimation for linear models with change points — variance_lm","text":"numeric value representing variance.","code":""},{"path":"https://fastcpd.xingchi.li/reference/variance_lm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variance estimation for linear models with change points — variance_lm","text":"","code":"if (!requireNamespace(\"mvtnorm\", quietly = TRUE)) utils::install.packages(   \"mvtnorm\", repos = \"https://cloud.r-project.org\", quiet = TRUE )  set.seed(1) n <- 300 p <- 4 x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p)) theta <- rbind(c(1, 3.2, -1, 0), c(-1, -0.5, 2.5, -2), c(0.8, 0, 1, 2)) y <- c(   x[1:100, ] %*% theta[1, ] + rnorm(100, 0, 3),   x[101:200, ] %*% theta[2, ] + rnorm(100, 0, 3),   x[201:300, ] %*% theta[3, ] + rnorm(100, 0, 3) ) (sigma2 <- variance.lm(cbind(y, x))) #> [1] 10.49227  set.seed(1) n <- 300 p <- 4 d <- 2 x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p)) theta <- cbind(c(1, 3.2, -1, 0), c(-1, -0.5, 2.5, -2), c(0.8, 0, 1, 2)) theta <- cbind(theta, theta) y <- rbind(   x[1:100, ] %*% theta[, 1:2] + mvtnorm::rmvnorm(100, rep(0, d), 3 * diag(d)),   x[101:200, ] %*% theta[, 3:4] + mvtnorm::rmvnorm(100, rep(0, d), 3 * diag(d)),   x[201:300, ] %*% theta[, 5:6] + mvtnorm::rmvnorm(100, rep(0, d), 3 * diag(d)) ) (sigma <- variance.lm(cbind(y, x), d = d)) #>            [,1]       [,2] #> [1,] 3.71946553 0.01962422 #> [2,] 0.03459023 3.59825273"},{"path":"https://fastcpd.xingchi.li/reference/variance_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance estimation for mean change models — variance_mean","title":"Variance estimation for mean change models — variance_mean","text":"Implement Rice estimator.","code":""},{"path":"https://fastcpd.xingchi.li/reference/variance_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variance estimation for mean change models — variance_mean","text":"","code":"variance_mean(data)  variance.mean(data)"},{"path":"https://fastcpd.xingchi.li/reference/variance_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variance estimation for mean change models — variance_mean","text":"data matrix data frame data points row.","code":""},{"path":"https://fastcpd.xingchi.li/reference/variance_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variance estimation for mean change models — variance_mean","text":"matrix representing variance-covariance matrix numeric value representing variance.","code":""},{"path":"https://fastcpd.xingchi.li/reference/variance_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variance estimation for mean change models — variance_mean","text":"","code":"if (!requireNamespace(\"mvtnorm\", quietly = TRUE)) utils::install.packages(   \"mvtnorm\", repos = \"https://cloud.r-project.org\", quiet = TRUE )  set.seed(1) p <- 3 data <- rbind(   mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(100, p)),   mvtnorm::rmvnorm(400, mean = rep(50, p), sigma = diag(100, p)),   mvtnorm::rmvnorm(300, mean = rep(2, p), sigma = diag(100, p)) ) (sigma <- variance.mean(data)) #>             [,1]        [,2]       [,3] #> [1,] 113.5442077  -0.1433207  -2.973472 #> [2,]  -0.1433207 106.1627730   8.430343 #> [3,]  -2.9734719   8.4303433 112.602989"},{"path":"https://fastcpd.xingchi.li/reference/well_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Well-log Dataset from Numerical Bayesian Methods Applied to Signal Processing — well_log","title":"Well-log Dataset from Numerical Bayesian Methods Applied to Signal Processing — well_log","text":"well-known well-log dataset used many changepoint papers obtained Alan Turing Institute GitHub repository licensed MIT license. Outliers value less equal 1e5 removed.","code":""},{"path":"https://fastcpd.xingchi.li/reference/well_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Well-log Dataset from Numerical Bayesian Methods Applied to Signal Processing — well_log","text":"","code":"well_log"},{"path":"https://fastcpd.xingchi.li/reference/well_log.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Well-log Dataset from Numerical Bayesian Methods Applied to Signal Processing — well_log","text":"Time-Series length 3989.","code":""},{"path":"https://fastcpd.xingchi.li/reference/well_log.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Well-log Dataset from Numerical Bayesian Methods Applied to Signal Processing — well_log","text":"<https://github.com/alan-turing-institute/TCPD>","code":""},{"path":"https://fastcpd.xingchi.li/reference/well_log.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Well-log Dataset from Numerical Bayesian Methods Applied to Signal Processing — well_log","text":"","code":"if (!requireNamespace(\"ggplot2\", quietly = TRUE)) utils::install.packages(   \"ggplot2\", repos = \"https://cloud.r-project.org\", quiet = TRUE )  result <- fastcpd.mean(well_log, trim = 0.003) summary(result) #>  #> Call: #> fastcpd.mean(data = well_log, trim = 0.003) #>  #> Change points: #> 12 566 704 776 1021 1057 1198 1347 1406 1502 1665 1842 2023 2202 2384 2445 2507 2567 2749 2926 3094 3107 3509 3622 3709 3820 3976  #>  #> Cost values: #> 330.9634 5126.496 1265.516 673.0034 2245.203 336.8917 1308.287 1408.312 568.1442 903.5709 1660.774 1637.202 1676.836 1642.546 1656.059 564.4224 570.6925 542.4309 1706.417 1647.568 1532.549 135.4606 3715.106 1030.607 819.7893 1021.112 1469.339 123.8282  plot(result)  if (!requireNamespace(\"ggplot2\", quietly = TRUE)) utils::install.packages(   \"ggplot2\", repos = \"https://cloud.r-project.org\", quiet = TRUE )  result <- fastcpd.mean(   well_log, beta = (1 + 2) * log(length(well_log)) / 2 * 6, trim = 0.002 ) summary(result) #>  #> Call: #> fastcpd.mean(data = well_log, beta = (1 + 2) * log(length(well_log))/2 *  #>     6, trim = 0.002) #>  #> Change points: #> 1021 1057 1502 1661 1842 2023 2385 2445 2507 2567 2744  #>  #> Cost values: #> 9791.171 336.8917 4236.648 1473.75 1681.972 1676.836 3323.939 546.7156 570.6925 542.4309 1627.775 11735.43  plot(result)  # \\donttest{ if (!requireNamespace(\"ggplot2\", quietly = TRUE)) utils::install.packages(   \"ggplot2\", repos = \"https://cloud.r-project.org\", quiet = TRUE )  sigma_ <- sqrt(c(variance.mean(well_log))) median_loss <- function(data) {   sum(abs(data - matrixStats::colMedians(data))) / sigma_ / 2 } result <- fastcpd(   formula = ~ x - 1,   data = cbind.data.frame(x = well_log),   cost = median_loss,   trim = 0 ) summary(result) #>  #> Call: #> fastcpd(formula = ~x - 1, data = cbind.data.frame(x = well_log),  #>     trim = 0, cost = median_loss) #>  #> Change points: #> 6 566 1021 1057 1340 1502 1661 1842 2023 2385 2445 2507 2567 2744 3709 3820   p <- ggplot2::ggplot() +   ggplot2::geom_vline(xintercept = result@cp_set, color = \"red\") +   ggplot2::geom_point(     data = data.frame(       x = seq_along(well_log), y = c(well_log), label = \"well_log\"     ),     ggplot2::aes(x = x, y = y)   ) print(p)  # }"},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-0120","dir":"Changelog","previous_headings":"","what":"fastcpd 0.12.0","title":"fastcpd 0.12.0","text":"Add Rice estimation ARMA model variance estimation. Add time comparison using Well-log data vignettes.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-0113","dir":"Changelog","previous_headings":"","what":"fastcpd 0.11.3","title":"fastcpd 0.11.3","text":"Add Rice estimator mean change variance estimation.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-0112","dir":"Changelog","previous_headings":"","what":"fastcpd 0.11.2","title":"fastcpd 0.11.2","text":"Export variance estimator function linear models.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-0111","dir":"Changelog","previous_headings":"","what":"fastcpd 0.11.1","title":"fastcpd 0.11.1","text":"Add package comparison CptNonPar, gfpop, InspectChangepoint, jointseg, Rbeast VARDetect.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-0110","dir":"Changelog","previous_headings":"","what":"fastcpd 0.11.0","title":"fastcpd 0.11.0","text":"Note: now , MBIC used default penalty selection beta parameter. Add penalty selection criteria using BIC: (p + 1) * log(nrow(data)) / 2 Modified BIC: (p + 2) * log(nrow(data)) / 2 adjusted cost function. MDL: (p + 2) * log(nrow(data)) / 2 adjusted cost function. mean time, numeric value can passed beta well explicitly specify penalty BIC.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-0103","dir":"Changelog","previous_headings":"","what":"fastcpd 0.10.3","title":"fastcpd 0.10.3","text":"CRAN release: 2024-01-24 Add package check examples tests.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-0102","dir":"Changelog","previous_headings":"","what":"fastcpd 0.10.2","title":"fastcpd 0.10.2","text":"Remove bcp according ","code":"Package ‘bcp’ was removed from the CRAN repository.  Formerly available versions can be obtained from the archive.  Archived on 2024-01-12 as email to the maintainer is undeliverable.  A summary of the most recent check results can be obtained from the check results archive.  Please use the canonical form https://CRAN.R-project.org/package=bcp to link to this page."},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-0101","dir":"Changelog","previous_headings":"","what":"fastcpd 0.10.1","title":"fastcpd 0.10.1","text":"CRAN release: 2024-01-09 Increase test coverage. Use interactive() check current R session interactive.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-0100","dir":"Changelog","previous_headings":"","what":"fastcpd 0.10.0","title":"fastcpd 0.10.0","text":"CRAN release: 2023-12-21 Add package comparison packages.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-099","dir":"Changelog","previous_headings":"","what":"fastcpd 0.9.9","title":"fastcpd 0.9.9","text":"CRAN release: 2023-12-11 Add small shiny app.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-098","dir":"Changelog","previous_headings":"","what":"fastcpd 0.9.8","title":"fastcpd 0.9.8","text":"Preliminary support ARMA(p, q) model parameter order = c(p, q) family \"arma\". Add fastcpd.arma / fastcpd_arma ARMA(p, q) model. Add adaptive increasing beta values.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-097","dir":"Changelog","previous_headings":"","what":"fastcpd 0.9.7","title":"fastcpd 0.9.7","text":"Add lower upper parameters denote lower upper bounds parameters. Add line search. Add hardcoded ARMA(3, 2).","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-096","dir":"Changelog","previous_headings":"","what":"fastcpd 0.9.6","title":"fastcpd 0.9.6","text":"Add bitcoin well_log data. Add residual calculation mean family. Add plots bitcoin data. Fix residual calculation time series data seegments small. Handle variance estimation errors.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-095","dir":"Changelog","previous_headings":"","what":"fastcpd 0.9.5","title":"fastcpd 0.9.5","text":"Add wrapper functions AR(p) family: fastcpd.ar / fastcpd_ar, ARIMA(p, d, q) family: fastcpd.arima / fastcpd_arima, GARCH(p, q) family: fastcpd.garch / fastcpd_garch, linear regression family: fastcpd.lm / fastcpd_lm, logistic regression family: fastcpd.binomial / fastcpd_binomial, poisson regression family: fastcpd.poisson / fastcpd_poisson, penalized linear regression family: fastcpd.lasso / fastcpd_lasso, MA(q) model: fastcpd.ma / fastcpd_ma, mean change: fastcpd.mean / fastcpd_mean, variance change: fastcpd.variance / fastcpd_variance, mean variance change: fastcpd.meanvariance / fastcpd_meanvariance / fastcpd.mv / fastcpd_mv. Replace \"gaussian\" family \"lm\". Add progress bar. Fix design matrix formula bug.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-094","dir":"Changelog","previous_headings":"","what":"fastcpd 0.9.4","title":"fastcpd 0.9.4","text":"Fix sanity check. Add small AR(1) data gallery. Fix VAR(p) model bug. Add VAR(2) example Gallery. Remove commented code.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-093","dir":"Changelog","previous_headings":"","what":"fastcpd 0.9.3","title":"fastcpd 0.9.3","text":"Deprecate “vanilla” family vanilla_percentage parameter. Add check utility functions. Add MA(4) example. Fix bug beta updated old beta still use. Remove tests estimating variance “gaussian” family dynamically. Merge beta updating get_segment_statistics.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-092","dir":"Changelog","previous_headings":"","what":"fastcpd 0.9.2","title":"fastcpd 0.9.2","text":"Add gallery vignettes. Remove cheatsheets pdf package. Use forecast package ARIMA model. Use fGarch package GARCH model.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-091","dir":"Changelog","previous_headings":"","what":"fastcpd 0.9.1","title":"fastcpd 0.9.1","text":"Wrap && around || parentheses. Add ma(4) example using custom cost function. Add full support AR(p), MA(q) ARIMA(p, d, q) models.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-090","dir":"Changelog","previous_headings":"","what":"fastcpd 0.9.0","title":"fastcpd 0.9.0","text":"CRAN release: 2023-10-19 Submit CRAN update.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-084","dir":"Changelog","previous_headings":"","what":"fastcpd 0.8.4","title":"fastcpd 0.8.4","text":"Add cheatsheets. Refactor code utilize cost_function_wrapper. Optimize warm start.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-083","dir":"Changelog","previous_headings":"","what":"fastcpd 0.8.3","title":"fastcpd 0.8.3","text":"Add fastcpd.ts / fastcpd_ts time series data. Fix pre segmengation bug lasso. Fix bug related vanilla_percentage parameter lasso. Add tests invalid family fastcpd.ts. Remove cp_only = TRUE default family “custom”. Improved plotting “ar” “var” families. Add test coverage cp_only = TRUE fastcpd_ts. Increase test coverage. Provide user selection ggplot2 installed.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-082","dir":"Changelog","previous_headings":"","what":"fastcpd 0.8.2","title":"fastcpd 0.8.2","text":"Add cheatsheets WIP. Add smaller examples test penalized linear regression.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-081","dir":"Changelog","previous_headings":"","what":"fastcpd 0.8.1","title":"fastcpd 0.8.1","text":"Add new “ar” family autoregressive models. Add new “var” family vector autoregressive models.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-080","dir":"Changelog","previous_headings":"","what":"fastcpd 0.8.0","title":"fastcpd 0.8.0","text":"Deal following: Separate use internal C++ cost functions user-defined R cost functions. Add Codecov Icicle plot README. Remove cost_optim cost_update RcppExports.R. Estimate variance “gaussian” family dynamically.","code":"Due to the excessive calls to `glmnet` between R and C++, it is better to use the R implementation of `fastcpd` for lasso."},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-076","dir":"Changelog","previous_headings":"","what":"fastcpd 0.7.6","title":"fastcpd 0.7.6","text":"Move default cost functions definition inside fastcpd definition. Define constant unordered set store family sets. Avoid using length(formals(cost)) check number arguments cost function. Introduce internal family “vanilla”.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-075","dir":"Changelog","previous_headings":"","what":"fastcpd 0.7.5","title":"fastcpd 0.7.5","text":"Add variance estimation example linear regression. Update reference page. Add validation family. Add user selection ggplot2 installed. Add AR(1) using forecast example tests.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-074","dir":"Changelog","previous_headings":"","what":"fastcpd 0.7.4","title":"fastcpd 0.7.4","text":"Update website UI. Update fastcpd documentation.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-073","dir":"Changelog","previous_headings":"","what":"fastcpd 0.7.3","title":"fastcpd 0.7.3","text":"Allow multiple response variables formula. Add fastcpd logo README.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-072","dir":"Changelog","previous_headings":"","what":"fastcpd 0.7.2","title":"fastcpd 0.7.2","text":"CRAN release: 2023-09-23 Add suggested package checking tests. Try solve amazing clang-ASAN error CRAN:","code":"Error in dyn.load(file, DLLpath = DLLpath, ...) :   unable to load shared object '/data/gannet/ripley/R/test-clang/mvtnorm/libs/mvtnorm.so':   /data/gannet/ripley/R/test-clang/mvtnorm/libs/mvtnorm.so: undefined symbol: _ZNK7Fortran7runtime10Terminator5CrashEPKcz Calls: <Anonymous> ... asNamespace -> loadNamespace -> library.dynam -> dyn.load"},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-071","dir":"Changelog","previous_headings":"","what":"fastcpd 0.7.1","title":"fastcpd 0.7.1","text":"Add package citation.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-070","dir":"Changelog","previous_headings":"","what":"fastcpd 0.7.0","title":"fastcpd 0.7.0","text":"CRAN release: 2023-09-21 Remove C++ unit tests using catch commented code since new version development version Rcpp yet available CRAN. Related pull request: https://github.com/RcppCore/Rcpp/pull/1274. Add documentation fastcpd method.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-065","dir":"Changelog","previous_headings":"","what":"fastcpd 0.6.5","title":"fastcpd 0.6.5","text":"Add experiments.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-064","dir":"Changelog","previous_headings":"","what":"fastcpd 0.6.4","title":"fastcpd 0.6.4","text":"Check warning messages tests. encapsulation FastcpdParameters members.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-063","dir":"Changelog","previous_headings":"","what":"fastcpd 0.6.3","title":"fastcpd 0.6.3","text":"Add CRAN release badge.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-062","dir":"Changelog","previous_headings":"","what":"fastcpd 0.6.2","title":"fastcpd 0.6.2","text":"CRAN release: 2023-09-14 Address CRAN comments. Add experiments.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-061","dir":"Changelog","previous_headings":"","what":"fastcpd 0.6.1","title":"fastcpd 0.6.1","text":"Address CRAN comments.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-060","dir":"Changelog","previous_headings":"","what":"fastcpd 0.6.0","title":"fastcpd 0.6.0","text":"Submit CRAN release.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-057","dir":"Changelog","previous_headings":"","what":"fastcpd 0.5.7","title":"fastcpd 0.5.7","text":"Fix loss function custom mean variance change.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-056","dir":"Changelog","previous_headings":"","what":"fastcpd 0.5.6","title":"fastcpd 0.5.6","text":"Add stargazers README.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-055","dir":"Changelog","previous_headings":"","what":"fastcpd 0.5.5","title":"fastcpd 0.5.5","text":"Add example test multivariate mean shift. Add example test multivariate variance change. Add example test multivariate mean variance change. Add test linear regression multi-dimensional responses.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-054","dir":"Changelog","previous_headings":"","what":"fastcpd 0.5.4","title":"fastcpd 0.5.4","text":"Fix bug change point detected.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-053","dir":"Changelog","previous_headings":"","what":"fastcpd 0.5.3","title":"fastcpd 0.5.3","text":"Add experiments commented sake test time without affecting test coverage. Add examples README. Add CRAN manual using R CMD Rd2pdf . --output=man/figures/manual.pdf --force ---preview stackoverflow. Add example multiple epochs using custom cost functions. Add table contents README.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-052","dir":"Changelog","previous_headings":"","what":"fastcpd 0.5.2","title":"fastcpd 0.5.2","text":"Add one-dimensional linear regression example plot.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-051","dir":"Changelog","previous_headings":"","what":"fastcpd 0.5.1","title":"fastcpd 0.5.1","text":"Prepare CRAN release.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-050","dir":"Changelog","previous_headings":"","what":"fastcpd 0.5.0","title":"fastcpd 0.5.0","text":"Rewrite whole package C++ except LASSO due excessive calls R C++ glmnet.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-040","dir":"Changelog","previous_headings":"","what":"fastcpd 0.4.0","title":"fastcpd 0.4.0","text":"Add transition vanilla PELT SeN using vanilla_percentage parameter.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-033","dir":"Changelog","previous_headings":"","what":"fastcpd 0.3.3","title":"fastcpd 0.3.3","text":"Merge implementation vanilla PELT SeN. Encapsulate implementation binding new coefficients previous coefficients. Rewrite fastcpd parameters updating C++.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-032","dir":"Changelog","previous_headings":"","what":"fastcpd 0.3.2","title":"fastcpd 0.3.2","text":"Integrate initialization update theta_hat, theta_sum hessian. Combine theta estimation single function. Add parameter vanilla_percentage denote method switching vanilla PETL SeN. Add documentation cp_only parameter. Add preparation merging vanilla PELT SeN.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-031","dir":"Changelog","previous_headings":"","what":"fastcpd 0.3.1","title":"fastcpd 0.3.1","text":"Add examples tests fastcpd. Rearrange C++ functions. Add precondition check.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-030","dir":"Changelog","previous_headings":"","what":"fastcpd 0.3.0","title":"fastcpd 0.3.0","text":"Bump test coverage class methods fastcpd.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-029","dir":"Changelog","previous_headings":"","what":"fastcpd 0.2.9","title":"fastcpd 0.2.9","text":"Fix Poisson regression bug related lfactorial.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-028","dir":"Changelog","previous_headings":"","what":"fastcpd 0.2.8","title":"fastcpd 0.2.8","text":"Make penalized linear regression estimated coefficients output sparse.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-027","dir":"Changelog","previous_headings":"","what":"fastcpd 0.2.7","title":"fastcpd 0.2.7","text":"Fix mean change example bug. Update documentation redirect README pkgdown generated webpage. Add contact methods ways file ticket.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-026","dir":"Changelog","previous_headings":"","what":"fastcpd 0.2.6","title":"fastcpd 0.2.6","text":"Add C++ sanity check Logistic regression data, .e. binomial family. Add examples tests fastcpd. Rename C++ source files follow Unix convention. Update documentation link README.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-025","dir":"Changelog","previous_headings":"","what":"fastcpd 0.2.5","title":"fastcpd 0.2.5","text":"Hide internal functions documentation. Export fastcpd class.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-024","dir":"Changelog","previous_headings":"","what":"fastcpd 0.2.4","title":"fastcpd 0.2.4","text":"Add column name thetas slot fastcpd class. Fix plot residuals responses appear plot. Default cp_only FALSE. Remove residuals summary method.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-023","dir":"Changelog","previous_headings":"","what":"fastcpd 0.2.3","title":"fastcpd 0.2.3","text":"Add missing examples linear regression LASSO.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-022","dir":"Changelog","previous_headings":"","what":"fastcpd 0.2.2","title":"fastcpd 0.2.2","text":"Add examples illustrate use fastcpd function. Indicating internal functions users use .","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-021","dir":"Changelog","previous_headings":"","what":"fastcpd 0.2.1","title":"fastcpd 0.2.1","text":"Add examples README.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-020","dir":"Changelog","previous_headings":"","what":"fastcpd 0.2.0","title":"fastcpd 0.2.0","text":"Added NEWS.md file track changes package.","code":""}]
