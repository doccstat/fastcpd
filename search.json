[{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007 Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://fastcpd.xingchi.li/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":[]},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"univariate-mean-change","dir":"Articles","previous_headings":"Data setup","what":"Univariate mean change","title":"Comparison with other R packages","text":"","code":"# Univariate mean change set.seed(1) p <- 1 mean_data_1 <- rbind(   mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(100, p)),   mvtnorm::rmvnorm(400, mean = rep(50, p), sigma = diag(100, p)),   mvtnorm::rmvnorm(300, mean = rep(2, p), sigma = diag(100, p)) )  plot.ts(mean_data_1)"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"univariate-mean-andor-variance-change","dir":"Articles","previous_headings":"Data setup","what":"Univariate mean and/or variance change","title":"Comparison with other R packages","text":"","code":"# Univariate mean and/or variance change set.seed(1) p <- 1 mv_data_1 <- rbind(   mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(1, p)),   mvtnorm::rmvnorm(400, mean = rep(10, p), sigma = diag(1, p)),   mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(100, p)),   mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(1, p)),   mvtnorm::rmvnorm(400, mean = rep(10, p), sigma = diag(1, p)),   mvtnorm::rmvnorm(300, mean = rep(10, p), sigma = diag(100, p)) )  plot.ts(mv_data_1)"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"multivariate-mean-change","dir":"Articles","previous_headings":"Data setup","what":"Multivariate mean change","title":"Comparison with other R packages","text":"","code":"# Multivariate mean change set.seed(1) p <- 3 mean_data_3 <- rbind(   mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(100, p)),   mvtnorm::rmvnorm(400, mean = rep(50, p), sigma = diag(100, p)),   mvtnorm::rmvnorm(300, mean = rep(2, p), sigma = diag(100, p)) )  plot.ts(mean_data_3)"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"multivariate-mean-andor-variance-change","dir":"Articles","previous_headings":"Data setup","what":"Multivariate mean and/or variance change","title":"Comparison with other R packages","text":"","code":"# Multivariate mean and/or variance change set.seed(1) p <- 3 mv_data_3 <- rbind(   mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(1, p)),   mvtnorm::rmvnorm(400, mean = rep(100, p), sigma = diag(1, p)),   mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(400, p)),   mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(1, p)),   mvtnorm::rmvnorm(400, mean = rep(100, p), sigma = diag(1, p)),   mvtnorm::rmvnorm(300, mean = rep(100, p), sigma = diag(400, p)) )  plot.ts(mv_data_3)"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"linear-regression","dir":"Articles","previous_headings":"Data setup","what":"Linear regression","title":"Comparison with other R packages","text":"","code":"# Linear regression set.seed(1) n <- 300 p <- 4 x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p)) theta_0 <- rbind(c(1, 3.2, -1, 0), c(-1, -0.5, 2.5, -2), c(0.8, 0, 1, 2)) y <- c(   x[1:100, ] %*% theta_0[1, ] + rnorm(100, 0, 3),   x[101:200, ] %*% theta_0[2, ] + rnorm(100, 0, 3),   x[201:n, ] %*% theta_0[3, ] + rnorm(100, 0, 3) ) lm_data <- data.frame(y = y, x = x)  plot.ts(lm_data)"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"logistic-regression","dir":"Articles","previous_headings":"Data setup","what":"Logistic regression","title":"Comparison with other R packages","text":"","code":"# Logistic regression set.seed(1) n <- 500 p <- 4 x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p)) theta <- rbind(rnorm(p, 0, 1), rnorm(p, 2, 1)) y <- c(   rbinom(300, 1, 1 / (1 + exp(-x[1:300, ] %*% theta[1, ]))),   rbinom(200, 1, 1 / (1 + exp(-x[301:n, ] %*% theta[2, ]))) ) binomial_data <- data.frame(y = y, x = x)  plot.ts(binomial_data)"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"poisson-regression","dir":"Articles","previous_headings":"Data setup","what":"Poisson regression","title":"Comparison with other R packages","text":"","code":"# Poisson regression set.seed(1) n <- 1100 p <- 3 x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p)) delta <- rnorm(p) theta_0 <- c(1, 0.3, -1) y <- c(   rpois(500, exp(x[1:500, ] %*% theta_0)),   rpois(300, exp(x[501:800, ] %*% (theta_0 + delta))),   rpois(200, exp(x[801:1000, ] %*% theta_0)),   rpois(100, exp(x[1001:1100, ] %*% (theta_0 - delta))) ) poisson_data <- data.frame(y = y, x = x)  plot.ts(log(poisson_data$y)) plot.ts(poisson_data[, -1])"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"lasso","dir":"Articles","previous_headings":"Data setup","what":"Lasso","title":"Comparison with other R packages","text":"","code":"# Lasso set.seed(1) n <- 480 p_true <- 6 p <- 50 x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p)) theta_0 <- rbind(   runif(p_true, -5, -2),   runif(p_true, -3, 3),   runif(p_true, 2, 5),   runif(p_true, -5, 5) ) theta_0 <- cbind(theta_0, matrix(0, ncol = p - p_true, nrow = 4)) y <- c(   x[1:80, ] %*% theta_0[1, ] + rnorm(80, 0, 1),   x[81:200, ] %*% theta_0[2, ] + rnorm(120, 0, 1),   x[201:320, ] %*% theta_0[3, ] + rnorm(120, 0, 1),   x[321:n, ] %*% theta_0[4, ] + rnorm(160, 0, 1) ) lasso_data <- data.frame(y = y, x = x)  plot.ts(lasso_data[, seq_len(p_true + 1)])"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"ar3","dir":"Articles","previous_headings":"Data setup","what":"AR(3)","title":"Comparison with other R packages","text":"","code":"# AR(3) set.seed(1) n <- 1000 x <- rep(0, n + 3) for (i in 1:600) {   x[i + 3] <- 0.6 * x[i + 2] - 0.2 * x[i + 1] + 0.1 * x[i] + rnorm(1, 0, 3) } for (i in 601:1000) {   x[i + 3] <- 0.3 * x[i + 2] + 0.4 * x[i + 1] + 0.2 * x[i] + rnorm(1, 0, 3) } ar_data <- x[-seq_len(3)]  plot.ts(ar_data)"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"garch1-1","dir":"Articles","previous_headings":"Data setup","what":"GARCH(1, 1)","title":"Comparison with other R packages","text":"","code":"# GARCH(1, 1) set.seed(1) n <- 1501 sigma_2 <- rep(1, n + 1) x <- rep(0, n + 1) for (i in seq_len(750)) {   sigma_2[i + 1] <- 20 + 0.8 * x[i]^2 + 0.1 * sigma_2[i]   x[i + 1] <- rnorm(1, 0, sqrt(sigma_2[i + 1])) } for (i in 751:n) {   sigma_2[i + 1] <- 1 + 0.1 * x[i]^2 + 0.5 * sigma_2[i]   x[i + 1] <- rnorm(1, 0, sqrt(sigma_2[i + 1])) } garch_data <- x[-1]  plot.ts(garch_data)"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"var2","dir":"Articles","previous_headings":"Data setup","what":"VAR(2)","title":"Comparison with other R packages","text":"","code":"# VAR(2) set.seed(1) n <- 800 p <- 2 theta_1 <- matrix(c(-0.3, 0.6, -0.5, 0.4, 0.2, 0.2, 0.2, -0.2), nrow = p) theta_2 <- matrix(c(0.3, -0.4, 0.1, -0.5, -0.5, -0.2, -0.5, 0.2), nrow = p) x <- matrix(0, n + 2, p) for (i in 1:500) {   x[i + 2, ] <- theta_1 %*% c(x[i + 1, ], x[i, ]) + rnorm(p, 0, 1) } for (i in 501:n) {   x[i + 2, ] <- theta_2 %*% c(x[i + 1, ], x[i, ]) + rnorm(p, 0, 1) } var_data <- x[-seq_len(2), ]  plot.ts(var_data)"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"univariate-mean-change-1","dir":"Articles","previous_headings":"","what":"Univariate mean change","title":"Comparison with other R packages","text":"true change points 300 700. methods plotted due un-retrievable change points.","code":"results[[\"mean_data_1\"]][[\"fastcpd\"]] <-   fastcpd::fastcpd.mean(mean_data_1, r.progress = FALSE)@cp_set results[[\"mean_data_1\"]][[\"fastcpd\"]] #> [1] 300 700 results[[\"mean_data_1\"]][[\"CptNonPar\"]] <-   CptNonPar::np.mojo(mean_data_1, G = floor(length(mean_data_1) / 6))$cpts results[[\"mean_data_1\"]][[\"CptNonPar\"]] #> [1] 300 700 results[[\"mean_data_1\"]][[\"strucchange\"]] <-   strucchange::breakpoints(y ~ 1, data = data.frame(y = mean_data_1))$breakpoints results[[\"mean_data_1\"]][[\"strucchange\"]] #> [1] 300 700 results[[\"mean_data_1\"]][[\"ecp\"]] <- ecp::e.divisive(mean_data_1)$estimates results[[\"mean_data_1\"]][[\"ecp\"]] #> [1]    1  301  701 1001 results[[\"mean_data_1\"]][[\"changepoint\"]] <-   changepoint::cpts(changepoint::cpt.mean(c(mean_data_1)/mad(mean_data_1), method = \"PELT\")) results[[\"mean_data_1\"]][[\"changepoint\"]] #> [1] 300 700 results[[\"mean_data_1\"]][[\"breakfast\"]] <-   breakfast::breakfast(mean_data_1)$cptmodel.list[[6]]$cpts results[[\"mean_data_1\"]][[\"breakfast\"]] #> [1] 300 700 results[[\"mean_data_1\"]][[\"wbs\"]] <-   wbs::wbs(mean_data_1)$cpt$cpt.ic$mbic.penalty results[[\"mean_data_1\"]][[\"wbs\"]] #> [1] 300 700 results[[\"mean_data_1\"]][[\"mosum\"]] <-   mosum::mosum(c(mean_data_1), G = 40)$cpts.info$cpts results[[\"mean_data_1\"]][[\"mosum\"]] #> [1] 300 700 results[[\"mean_data_1\"]][[\"fpop\"]] <-   fpop::Fpop(mean_data_1, nrow(mean_data_1))$t.est results[[\"mean_data_1\"]][[\"fpop\"]] #> [1]  300  700 1000 results[[\"mean_data_1\"]][[\"gfpop\"]] <-   gfpop::gfpop(     data = mean_data_1,     mygraph = gfpop::graph(       penalty = 2 * log(nrow(mean_data_1)) * gfpop::sdDiff(mean_data_1) ^ 2,       type = \"updown\"     ),     type = \"mean\"   )$changepoints results[[\"mean_data_1\"]][[\"gfpop\"]] #> [1]  300  700 1000 results[[\"mean_data_1\"]][[\"jointseg\"]] <-   jointseg::jointSeg(mean_data_1, K = 2)$bestBkp results[[\"mean_data_1\"]][[\"jointseg\"]] #> [1] 300 700 results[[\"mean_data_1\"]][[\"stepR\"]] <-   stepR::stepFit(mean_data_1, alpha = 0.5)$rightEnd results[[\"mean_data_1\"]][[\"stepR\"]] #> [1]  300  700 1000 results[[\"mean_data_1\"]][[\"cpm\"]] <-   cpm::processStream(mean_data_1, cpmType = \"Student\")$changePoints results[[\"mean_data_1\"]][[\"cpm\"]] #> [1] 299 699 results[[\"mean_data_1\"]][[\"segmented\"]] <-   segmented::stepmented(     as.numeric(mean_data_1), npsi = 2   )$psi[, \"Est.\"] results[[\"mean_data_1\"]][[\"segmented\"]] #> psi1.index psi2.index  #>   300.0813   700.1513 results[[\"mean_data_1\"]][[\"mcp\"]] <- mcp::mcp(   list(y ~ 1, ~ 1, ~ 1),   data = data.frame(y = mean_data_1, x = seq_len(nrow(mean_data_1))),   par_x = \"x\" ) #> Error : .onLoad failed in loadNamespace() for 'rjags', details: #>   call: dyn.load(file, DLLpath = DLLpath, ...) #>   error: unable to load shared object '/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/rjags/libs/rjags.so': #>   dlopen(/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/rjags/libs/rjags.so, 0x000A): Library not loaded: /usr/local/lib/libjags.4.dylib #>   Referenced from: <CAF5E1DC-317A-34FE-988A-FB6F7C73D89E> /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/rjags/libs/rjags.so #>   Reason: tried: '/usr/local/lib/libjags.4.dylib' (no such file), '/System/Volumes/Preboot/Cryptexes/OS/usr/local/lib/libjags.4.dylib' (no such file), '/usr/local/lib/libjags.4.dylib' (no such file), '/Library/Frameworks/R.framework/Resources/lib/libjags.4.dylib' (no such file), '/Library/Java/JavaVirtualMachines/jdk-11.0.18+10/Contents/Home/lib/server/libjags.4.dylib' (no such file), '/var/folders/lw/np6nlqmn527g1n2ysqssf00c0000gn/T/rstudio-fallback-library-path-1577547578/libjags.4.dylib' (no such file) if (requireNamespace(\"mcp\", quietly = TRUE)) {   plot(results[[\"mean_data_1\"]][[\"mcp\"]]) } #> Error in samples[[1]]: subscript out of bounds results[[\"mean_data_1\"]][[\"not\"]] <-   not::not(mean_data_1, contrast = \"pcwsConstMean\") if (requireNamespace(\"not\", quietly = TRUE)) {   plot(results[[\"mean_data_1\"]][[\"not\"]]) } results[[\"mean_data_1\"]][[\"bcp\"]] <- bcp::bcp(mean_data_1) if (requireNamespace(\"bcp\", quietly = TRUE)) {   plot(results[[\"mean_data_1\"]][[\"bcp\"]]) }"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"univariate-mean-andor-variance-change-1","dir":"Articles","previous_headings":"","what":"Univariate mean and/or variance change","title":"Comparison with other R packages","text":"true change points 300, 700, 1000, 1300 1700. methods plotted due un-retrievable change points.","code":"results[[\"mv_data_1\"]][[\"fastcpd\"]] <-   fastcpd::fastcpd.mv(mv_data_1, r.progress = FALSE)@cp_set results[[\"mv_data_1\"]][[\"fastcpd\"]] #> [1]  300  700 1001 1300 1700 results[[\"mv_data_1\"]][[\"ecp\"]] <- ecp::e.divisive(mv_data_1)$estimates results[[\"mv_data_1\"]][[\"ecp\"]] #> [1]    1  301  701 1001 1301 1701 2001 results[[\"mv_data_1\"]][[\"changepoint\"]] <-   changepoint::cpts(changepoint::cpt.meanvar(c(mv_data_1), method = \"PELT\")) results[[\"mv_data_1\"]][[\"changepoint\"]] #> [1]  300  700 1000 1300 1700 results[[\"mv_data_1\"]][[\"CptNonPar\"]] <-   CptNonPar::np.mojo(mv_data_1, G = floor(length(mv_data_1) / 6))$cpts results[[\"mv_data_1\"]][[\"CptNonPar\"]] #> [1]  333  700 1300 results[[\"mv_data_1\"]][[\"cpm\"]] <-   cpm::processStream(mv_data_1, cpmType = \"GLR\")$changePoints results[[\"mv_data_1\"]][[\"cpm\"]] #>  [1]  293  300  403  408  618  621  696 1000 1021 1024 1293 1300 1417 1693 1700 1981 results[[\"mv_data_1\"]][[\"mcp\"]] <- mcp::mcp(   list(y ~ 1, ~ 1, ~ 1, ~ 1, ~ 1, ~ 1),   data = data.frame(y = mv_data_1, x = seq_len(nrow(mv_data_1))),   par_x = \"x\" ) #> Error : .onLoad failed in loadNamespace() for 'rjags', details: #>   call: dyn.load(file, DLLpath = DLLpath, ...) #>   error: unable to load shared object '/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/rjags/libs/rjags.so': #>   dlopen(/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/rjags/libs/rjags.so, 0x000A): Library not loaded: /usr/local/lib/libjags.4.dylib #>   Referenced from: <CAF5E1DC-317A-34FE-988A-FB6F7C73D89E> /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/rjags/libs/rjags.so #>   Reason: tried: '/usr/local/lib/libjags.4.dylib' (no such file), '/System/Volumes/Preboot/Cryptexes/OS/usr/local/lib/libjags.4.dylib' (no such file), '/usr/local/lib/libjags.4.dylib' (no such file), '/Library/Frameworks/R.framework/Resources/lib/libjags.4.dylib' (no such file), '/Library/Java/JavaVirtualMachines/jdk-11.0.18+10/Contents/Home/lib/server/libjags.4.dylib' (no such file), '/var/folders/lw/np6nlqmn527g1n2ysqssf00c0000gn/T/rstudio-fallback-library-path-1577547578/libjags.4.dylib' (no such file) if (requireNamespace(\"mcp\", quietly = TRUE)) {   plot(results[[\"mv_data_1\"]][[\"mcp\"]]) } #> Error in samples[[1]]: subscript out of bounds results[[\"mv_data_1\"]][[\"not\"]] <-   not::not(mv_data_1, contrast = \"pcwsConstMeanVar\") if (requireNamespace(\"not\", quietly = TRUE)) {   plot(results[[\"mv_data_1\"]][[\"not\"]]) }"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"multivariate-mean-change-1","dir":"Articles","previous_headings":"","what":"Multivariate mean change","title":"Comparison with other R packages","text":"true change points 300 700. methods plotted due un-retrievable change points.","code":"results[[\"mean_data_3\"]][[\"fastcpd\"]] <-   fastcpd::fastcpd.mean(mean_data_3, r.progress = FALSE)@cp_set results[[\"mean_data_3\"]][[\"fastcpd\"]] #> [1] 300 700 results[[\"mean_data_3\"]][[\"CptNonPar\"]] <-   CptNonPar::np.mojo(mean_data_3, G = floor(nrow(mean_data_3) / 6))$cpts results[[\"mean_data_3\"]][[\"CptNonPar\"]] #> [1] 300 700 results[[\"mean_data_3\"]][[\"jointseg\"]] <-   jointseg::jointSeg(mean_data_3, K = 2)$bestBkp results[[\"mean_data_3\"]][[\"jointseg\"]] #> [1] 300 700 results[[\"mean_data_3\"]][[\"strucchange\"]] <-   strucchange::breakpoints(     cbind(y.1, y.2, y.3) ~ 1, data = data.frame(y = mean_data_3)   )$breakpoints results[[\"mean_data_3\"]][[\"strucchange\"]] #> [1] 300 700 results[[\"mean_data_3\"]][[\"ecp\"]] <- ecp::e.divisive(mean_data_3)$estimates results[[\"mean_data_3\"]][[\"ecp\"]] #> [1]    1  301  701 1001 results[[\"mean_data_3\"]][[\"bcp\"]] <- bcp::bcp(mean_data_3) if (requireNamespace(\"bcp\", quietly = TRUE)) {   plot(results[[\"mean_data_3\"]][[\"bcp\"]]) }"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"multivariate-mean-andor-variance-change-1","dir":"Articles","previous_headings":"","what":"Multivariate mean and/or variance change","title":"Comparison with other R packages","text":"true change points 300, 700, 1000, 1300 1700. methods plotted due un-retrievable change points.","code":"results[[\"mv_data_3\"]][[\"fastcpd\"]] <-   fastcpd::fastcpd.mv(mv_data_3, r.progress = FALSE)@cp_set results[[\"mv_data_3\"]][[\"fastcpd\"]] #> [1]  300  700 1013 1300 1700 results[[\"mv_data_3\"]][[\"ecp\"]] <- ecp::e.divisive(mv_data_3)$estimates results[[\"mv_data_3\"]][[\"ecp\"]] #> [1]    1  301  701 1001 1301 1701 2001"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"linear-regression-1","dir":"Articles","previous_headings":"","what":"Linear regression","title":"Comparison with other R packages","text":"true change points 100 200.","code":"results[[\"lm_data\"]][[\"fastcpd\"]] <-   fastcpd::fastcpd.lm(lm_data, r.progress = FALSE)@cp_set results[[\"lm_data\"]][[\"fastcpd\"]] #> [1]  97 201 results[[\"lm_data\"]][[\"strucchange\"]] <-   strucchange::breakpoints(y ~ . - 1, data = lm_data)$breakpoints results[[\"lm_data\"]][[\"strucchange\"]] #> [1] 100 201 results[[\"lm_data\"]][[\"segmented\"]] <-   segmented::segmented(     lm(       y ~ . - 1, data.frame(y = lm_data$y, x = lm_data[, -1], index = seq_len(nrow(lm_data)))     ),     seg.Z = ~ index   )$psi[, \"Est.\"] results[[\"lm_data\"]][[\"segmented\"]] #> [1] 233"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"logistic-regression-1","dir":"Articles","previous_headings":"","what":"Logistic regression","title":"Comparison with other R packages","text":"true change point 300.","code":"results[[\"binomial_data\"]][[\"fastcpd\"]] <-   fastcpd::fastcpd.binomial(binomial_data, r.progress = FALSE)@cp_set results[[\"binomial_data\"]][[\"fastcpd\"]] #> [1] 302 results[[\"binomial_data\"]][[\"strucchange\"]] <-   strucchange::breakpoints(y ~ . - 1, data = binomial_data)$breakpoints results[[\"binomial_data\"]][[\"strucchange\"]] #> [1] 297"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"poisson-regression-1","dir":"Articles","previous_headings":"","what":"Poisson regression","title":"Comparison with other R packages","text":"true change points 500, 800 1000.","code":"results[[\"poisson_data\"]][[\"fastcpd\"]] <-   fastcpd::fastcpd.poisson(poisson_data, r.progress = FALSE)@cp_set results[[\"poisson_data\"]][[\"fastcpd\"]] #> [1]  506  838 1003 results[[\"poisson_data\"]][[\"strucchange\"]] <-   strucchange::breakpoints(y ~ . - 1, data = poisson_data)$breakpoints results[[\"poisson_data\"]][[\"strucchange\"]] #> [1] 935"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"lasso-1","dir":"Articles","previous_headings":"","what":"Lasso","title":"Comparison with other R packages","text":"true change points 80, 200 320.","code":"results[[\"lasso_data\"]][[\"fastcpd\"]] <-   fastcpd::fastcpd.lasso(lasso_data, r.progress = FALSE)@cp_set results[[\"lasso_data\"]][[\"fastcpd\"]] #> [1]  79 199 321 results[[\"lasso_data\"]][[\"strucchange\"]] <-   strucchange::breakpoints(y ~ . - 1, data = lasso_data)$breakpoints results[[\"lasso_data\"]][[\"strucchange\"]] #> [1]  80 200 321"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"ar3-1","dir":"Articles","previous_headings":"","what":"AR(3)","title":"Comparison with other R packages","text":"true change point 600. methods plotted due un-retrievable change points.","code":"results[[\"ar_data\"]][[\"fastcpd\"]] <-   fastcpd::fastcpd.ar(ar_data, 3, r.progress = FALSE)@cp_set results[[\"ar_data\"]][[\"fastcpd\"]] #> [1] 614 results[[\"ar_data\"]][[\"CptNonPar\"]] <-   CptNonPar::np.mojo(ar_data, G = floor(length(ar_data) / 6))$cpts results[[\"ar_data\"]][[\"CptNonPar\"]] #> numeric(0) results[[\"ar_data\"]][[\"segmented\"]] <-   segmented::segmented(     lm(       y ~ x + 1, data.frame(y = ar_data, x = seq_along(ar_data))     ),     seg.Z = ~ x   )$psi[, \"Est.\"] results[[\"ar_data\"]][[\"segmented\"]] #> [1] 690.0001 results[[\"ar_data\"]][[\"mcp\"]] <-   mcp::mcp(     list(y ~ 1 + ar(3), ~ 0 + ar(3)),     data = data.frame(y = ar_data, x = seq_along(ar_data)),     par_x = \"x\"   ) #> Error : .onLoad failed in loadNamespace() for 'rjags', details: #>   call: dyn.load(file, DLLpath = DLLpath, ...) #>   error: unable to load shared object '/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/rjags/libs/rjags.so': #>   dlopen(/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/rjags/libs/rjags.so, 0x000A): Library not loaded: /usr/local/lib/libjags.4.dylib #>   Referenced from: <CAF5E1DC-317A-34FE-988A-FB6F7C73D89E> /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/rjags/libs/rjags.so #>   Reason: tried: '/usr/local/lib/libjags.4.dylib' (no such file), '/System/Volumes/Preboot/Cryptexes/OS/usr/local/lib/libjags.4.dylib' (no such file), '/usr/local/lib/libjags.4.dylib' (no such file), '/Library/Frameworks/R.framework/Resources/lib/libjags.4.dylib' (no such file), '/Library/Java/JavaVirtualMachines/jdk-11.0.18+10/Contents/Home/lib/server/libjags.4.dylib' (no such file), '/var/folders/lw/np6nlqmn527g1n2ysqssf00c0000gn/T/rstudio-fallback-library-path-1577547578/libjags.4.dylib' (no such file) if (requireNamespace(\"mcp\", quietly = TRUE)) {   plot(results[[\"ar_data\"]][[\"mcp\"]]) } #> Error in `sample_n()`: #> ! `tbl` must be a data frame, not `NULL`."},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"garch1-1-1","dir":"Articles","previous_headings":"","what":"GARCH(1, 1)","title":"Comparison with other R packages","text":"true change point 750.","code":"results[[\"garch_data\"]][[\"fastcpd\"]] <-   fastcpd::fastcpd.garch(garch_data, c(1, 1), r.progress = FALSE)@cp_set results[[\"garch_data\"]][[\"fastcpd\"]] #> [1] 759 results[[\"garch_data\"]][[\"CptNonPar\"]] <-   CptNonPar::np.mojo(garch_data, G = floor(length(garch_data) / 6))$cpts results[[\"garch_data\"]][[\"CptNonPar\"]] #> [1] 759 results[[\"garch_data\"]][[\"strucchange\"]] <-   strucchange::breakpoints(x ~ 1, data = data.frame(x = garch_data))$breakpoints results[[\"garch_data\"]][[\"strucchange\"]] #> [1] NA"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"var2-1","dir":"Articles","previous_headings":"","what":"VAR(2)","title":"Comparison with other R packages","text":"true change points 500.","code":"results[[\"var_data\"]][[\"fastcpd\"]] <-   fastcpd::fastcpd.var(var_data, 2, r.progress = FALSE)@cp_set results[[\"var_data\"]][[\"fastcpd\"]] #> [1] 500 results[[\"var_data\"]][[\"VARDetect\"]] <- VARDetect::tbss(var_data)$cp results[[\"var_data\"]][[\"VARDetect\"]] #> [1] 501"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"detection-comparison-using-well_log","dir":"Articles","previous_headings":"","what":"Detection comparison using well_log","title":"Comparison with other R packages","text":"","code":"well_log <- fastcpd::well_log well_log <- well_log[well_log > 1e5]  results[[\"well_log\"]] <- list(   fastcpd = fastcpd::fastcpd.mean(well_log, trim = 0.003)@cp_set,   changepoint = changepoint::cpts(changepoint::cpt.mean(well_log/mad(well_log), method = \"PELT\")),   CptNonPar =     CptNonPar::np.mojo(well_log, G = floor(length(well_log) / 6))$cpts,   strucchange = strucchange::breakpoints(     y ~ 1, data = data.frame(y = well_log)   )$breakpoints,   ecp = ecp::e.divisive(matrix(well_log))$estimates,   breakfast = breakfast::breakfast(well_log)$cptmodel.list[[6]]$cpts,   wbs = wbs::wbs(well_log)$cpt$cpt.ic$mbic.penalty,   mosum = mosum::mosum(c(well_log), G = 40)$cpts.info$cpts,   # fpop = fpop::Fpop(well_log, length(well_log))$t.est,  # meaningless   gfpop = gfpop::gfpop(     data = well_log,     mygraph = gfpop::graph(       penalty = 2 * log(length(well_log)) * gfpop::sdDiff(well_log) ^ 2,       type = \"updown\"     ),     type = \"mean\"   )$changepoints,   jointseg = jointseg::jointSeg(well_log, K = 12)$bestBkp,   stepR = stepR::stepFit(well_log, alpha = 0.5)$rightEnd ) results[[\"well_log\"]] #> $fastcpd #>  [1]   12  572  704  779 1021 1057 1198 1348 1406 1502 1665 1842 2023 2385 2445 2507 2567 2749 2926 3076 3523 3622 3709 3820 3976 #>  #> $changepoint #>  [1]    6 1021 1057 1502 1661 1842 2023 2385 2445 2507 2567 2745 #>  #> $CptNonPar #> [1] 1021 1681 2022 2738 #>  #> $strucchange #> [1] 1057 1660 2568 3283 #>  #> $ecp #>  [1]    1   33  315  435  567  705  803 1026 1058 1348 1503 1662 1843 2024 2203 2386 2446 2508 2569 2745 2780 2922 3073 3136 3252 3465 3500 3554 3623 3710 3821 3868 3990 #>  #> $breakfast #>  [1]   33  310  434  572  704  779 1021 1057 1347 1502 1659 1842 2021 2032 2202 2384 2446 2507 2567 2747 2779 2926 3094 3106 3125 3283 3464 3499 3622 3709 3806 3835 3848 3877 3896 #> [36] 3976 #>  #> $wbs #>  [1] 2568 1057 1661 1842 2385 2023 1502 2445 2744    6 2507 1021 3709 3820 1402  434 1408 1200 3131  704  776 3509 3622 3976  314 3104 1347 3251 3464 3094 2752 2921 3848 3906 1663 #> [36]   60 3904 2202  566 1197   12    7 2747 #>  #> $mosum #>  [1]    6  434  704 1017 1057 1325 1502 1661 1842 2023 2385 2445 2507 2567 2744 3060 3438 3509 3610 3697 3820 3867 3976 #>  #> $gfpop #>  [1]    6    7    8   12  314  434  556  560  704  776 1021 1057 1197 1200 1347 1364 1405 1407 1491 1502 1661 1842 2023 2385 2445 2507 2567 2664 2747 2752 2921 3094 3104 3125 3251 #> [36] 3464 3499 3622 3709 3820 3976 3989 #>  #> $jointseg #>  [1]    6 1021 1057 1502 1661 1842 2022 2384 2445 2507 2568 2738 #>  #> $stepR #>  [1]    7   14  314  434  566  704  776 1021 1057 1197 1200 1347 1405 1407 1502 1661 1694 1842 2023 2202 2385 2445 2507 2567 2747 2752 2921 3094 3104 3125 3251 3464 3499 3609 3658 #> [36] 3709 3820 3867 3905 3976 3989 package_list <- sort(names(results[[\"well_log\"]]), decreasing = TRUE) comparison_table <- NULL for (package_index in seq_along(package_list)) {   package <- package_list[[package_index]]   comparison_table <- rbind(     comparison_table,     data.frame(       change_point = results[[\"well_log\"]][[package]],       package = package,       y_offset = (package_index - 1) * 1000     )   ) }  most_selected <- sort(table(comparison_table$change_point), decreasing = TRUE) most_selected <- sort(as.numeric(names(most_selected[most_selected >= 4]))) for (i in seq_len(length(most_selected) - 1)) {   if (most_selected[i + 1] - most_selected[i] < 2) {     most_selected[i] <- NA     most_selected[i + 1] <- most_selected[i + 1] - 0.5   } } (most_selected <- most_selected[!is.na(most_selected)]) #>  [1]    6  434  704 1021 1057 1347 1502 1661 1842 2023 2385 2445 2507 2567 2747 3094 3464 3622 3709 3820 3976 if (requireNamespace(\"ggplot2\", quietly = TRUE)) {   ggplot2::ggplot() +     ggplot2::geom_point(       data = data.frame(x = seq_along(well_log), y = c(well_log)),       ggplot2::aes(x = x, y = y)     ) +     ggplot2::geom_vline(       xintercept = most_selected,       color = \"black\",       linetype = \"dashed\",       alpha = 0.2     ) +     ggplot2::geom_point(       data = comparison_table,       ggplot2::aes(x = change_point, y = 50000 + y_offset, color = package),       shape = 17,       size = 1.9     ) +     ggplot2::geom_hline(       data = comparison_table,       ggplot2::aes(yintercept = 50000 + y_offset, color = package),       linetype = \"dashed\",       alpha = 0.1     ) +     ggplot2::coord_cartesian(       ylim = c(50000 - 500, max(well_log) + 1000),       xlim = c(-200, length(well_log) + 200),       expand = FALSE     ) +     ggplot2::theme(       panel.background = ggplot2::element_blank(),       panel.border = ggplot2::element_rect(colour = \"black\", fill = NA),       panel.grid.major = ggplot2::element_blank(),       panel.grid.minor = ggplot2::element_blank()     ) +     ggplot2::xlab(NULL) + ggplot2::ylab(NULL) }"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"time-comparison-using-well_log","dir":"Articles","previous_headings":"","what":"Time comparison using well_log","title":"Comparison with other R packages","text":"packages commented due excessive running time.","code":"results[[\"microbenchmark\"]] <- microbenchmark::microbenchmark(   fastcpd = fastcpd::fastcpd.mean(well_log, r.progress = FALSE, cp_only = TRUE),   changepoint = changepoint::cpt.mean(well_log/mad(well_log), method = \"PELT\"),   # CptNonPar = CptNonPar::np.mojo(well_log, G = floor(length(well_log) / 6)),   # strucchange = strucchange::breakpoints(y ~ 1, data = data.frame(y = well_log)),   # ecp = ecp::e.divisive(matrix(well_log)),   # breakfast = breakfast::breakfast(well_log),   wbs = wbs::wbs(well_log),   mosum = mosum::mosum(c(well_log), G = 40),   fpop = fpop::Fpop(well_log, nrow(well_log)),   gfpop = gfpop::gfpop(     data = well_log,     mygraph = gfpop::graph(       penalty = 2 * log(length(well_log)) * gfpop::sdDiff(well_log) ^ 2,       type = \"updown\"     ),     type = \"mean\"   ),   jointseg = jointseg::jointSeg(well_log, K = 12),   stepR = stepR::stepFit(well_log, alpha = 0.5),   not = not::not(well_log, contrast = \"pcwsConstMean\") ) results[[\"microbenchmark\"]] #> Unit: microseconds #>         expr       min        lq       mean     median         uq       max neval #>      fastcpd  6245.325  6447.332  7086.8283  6555.5310  6752.3515 13977.187   100 #>  changepoint 28794.177 29138.577 29463.6463 29275.8040 29458.9100 35287.429   100 #>          wbs 51531.260 52697.669 53605.2848 53153.4250 53592.7605 65784.705   100 #>        mosum   506.268   560.593   577.0709   577.0955   595.4635   655.877   100 #>         fpop  1116.225  1160.895  1321.8826  1177.6430  1199.3320  9798.467   100 #>        gfpop 30872.426 31118.918 31558.2539 31281.2575 31399.0095 37123.122   100 #>     jointseg  8176.179  8328.309  8838.3495  8422.5480  8557.6430 12874.410   100 #>        stepR 44931.080 45298.809 45808.1098 45458.4220 45608.6255 60913.577   100 #>          not 49734.435 50815.175 52003.4189 51456.0455 52269.0960 58119.714   100 if (requireNamespace(\"ggplot2\", quietly = TRUE) && requireNamespace(\"microbenchmark\", quietly = TRUE)) {   ggplot2::autoplot(results[[\"microbenchmark\"]]) }"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"notes","dir":"Articles","previous_headings":"","what":"Notes","title":"Comparison with other R packages","text":"document generated following code:","code":"R -e 'knitr::knit(\"vignettes/comparison-packages.Rmd.original\", output = \"vignettes/comparison-packages.Rmd\")' && rm -rf vignettes/comparison-packages && mv -f comparison-packages vignettes"},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"related-issues","dir":"Articles","previous_headings":"","what":"Related issues","title":"Comparison with other R packages","text":"mosum: [#4]. mcp: Package removed due usage rjags. bcp: [#5]. gfpop: [#10].","code":""},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"acknowledgements","dir":"Articles","previous_headings":"","what":"Acknowledgements","title":"Comparison with other R packages","text":"Dr. Vito Muggeo, author segmented package tips piece-wise constant function. Dr. Rebecca Killick, author changepoint package tips package update.","code":""},{"path":"https://fastcpd.xingchi.li/articles/comparison-packages.html","id":"appendix-all-code-snippets","dir":"Articles","previous_headings":"","what":"Appendix: all code snippets","title":"Comparison with other R packages","text":"","code":"knitr::opts_chunk$set(   collapse = TRUE, comment = \"#>\", eval = TRUE, cache = FALSE,   warning = FALSE, fig.width = 8, fig.height = 5,   fig.path=\"comparison-packages/\" )  # devtools::install_github(c(\"swang87/bcp\", \"veseshan/DNAcopy\", \"vrunge/gfpop\", \"peiliangbai92/VARDetect\")) # install.packages(c(\"changepoint\", \"cpm\", \"CptNonPar\", \"strucchange\", \"ecp\", \"breakfast\", \"wbs\", \"mcp\", \"mosum\", \"not\", \"fpop\", \"jointseg\", \"microbenchmark\", \"segmented\", \"stepR\"))  if (requireNamespace(\"microbenchmark\", quietly = TRUE)) {   library(microbenchmark) }  if (file.exists(\"comparison-packages-results.RData\")) {   # Available at https://pcloud.xingchi.li/comparison-packages-results.RData   load(\"comparison-packages-results.RData\")   rerun <- FALSE } else {   results <- list()   rerun <- TRUE } # Univariate mean change set.seed(1) p <- 1 mean_data_1 <- rbind(   mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(100, p)),   mvtnorm::rmvnorm(400, mean = rep(50, p), sigma = diag(100, p)),   mvtnorm::rmvnorm(300, mean = rep(2, p), sigma = diag(100, p)) )  plot.ts(mean_data_1) # Univariate mean and/or variance change set.seed(1) p <- 1 mv_data_1 <- rbind(   mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(1, p)),   mvtnorm::rmvnorm(400, mean = rep(10, p), sigma = diag(1, p)),   mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(100, p)),   mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(1, p)),   mvtnorm::rmvnorm(400, mean = rep(10, p), sigma = diag(1, p)),   mvtnorm::rmvnorm(300, mean = rep(10, p), sigma = diag(100, p)) )  plot.ts(mv_data_1) # Multivariate mean change set.seed(1) p <- 3 mean_data_3 <- rbind(   mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(100, p)),   mvtnorm::rmvnorm(400, mean = rep(50, p), sigma = diag(100, p)),   mvtnorm::rmvnorm(300, mean = rep(2, p), sigma = diag(100, p)) )  plot.ts(mean_data_3) # Multivariate mean and/or variance change set.seed(1) p <- 3 mv_data_3 <- rbind(   mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(1, p)),   mvtnorm::rmvnorm(400, mean = rep(100, p), sigma = diag(1, p)),   mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(400, p)),   mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(1, p)),   mvtnorm::rmvnorm(400, mean = rep(100, p), sigma = diag(1, p)),   mvtnorm::rmvnorm(300, mean = rep(100, p), sigma = diag(400, p)) )  plot.ts(mv_data_3) # Linear regression set.seed(1) n <- 300 p <- 4 x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p)) theta_0 <- rbind(c(1, 3.2, -1, 0), c(-1, -0.5, 2.5, -2), c(0.8, 0, 1, 2)) y <- c(   x[1:100, ] %*% theta_0[1, ] + rnorm(100, 0, 3),   x[101:200, ] %*% theta_0[2, ] + rnorm(100, 0, 3),   x[201:n, ] %*% theta_0[3, ] + rnorm(100, 0, 3) ) lm_data <- data.frame(y = y, x = x)  plot.ts(lm_data) # Logistic regression set.seed(1) n <- 500 p <- 4 x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p)) theta <- rbind(rnorm(p, 0, 1), rnorm(p, 2, 1)) y <- c(   rbinom(300, 1, 1 / (1 + exp(-x[1:300, ] %*% theta[1, ]))),   rbinom(200, 1, 1 / (1 + exp(-x[301:n, ] %*% theta[2, ]))) ) binomial_data <- data.frame(y = y, x = x)  plot.ts(binomial_data) # Poisson regression set.seed(1) n <- 1100 p <- 3 x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p)) delta <- rnorm(p) theta_0 <- c(1, 0.3, -1) y <- c(   rpois(500, exp(x[1:500, ] %*% theta_0)),   rpois(300, exp(x[501:800, ] %*% (theta_0 + delta))),   rpois(200, exp(x[801:1000, ] %*% theta_0)),   rpois(100, exp(x[1001:1100, ] %*% (theta_0 - delta))) ) poisson_data <- data.frame(y = y, x = x)  plot.ts(log(poisson_data$y)) plot.ts(poisson_data[, -1]) # Lasso set.seed(1) n <- 480 p_true <- 6 p <- 50 x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p)) theta_0 <- rbind(   runif(p_true, -5, -2),   runif(p_true, -3, 3),   runif(p_true, 2, 5),   runif(p_true, -5, 5) ) theta_0 <- cbind(theta_0, matrix(0, ncol = p - p_true, nrow = 4)) y <- c(   x[1:80, ] %*% theta_0[1, ] + rnorm(80, 0, 1),   x[81:200, ] %*% theta_0[2, ] + rnorm(120, 0, 1),   x[201:320, ] %*% theta_0[3, ] + rnorm(120, 0, 1),   x[321:n, ] %*% theta_0[4, ] + rnorm(160, 0, 1) ) lasso_data <- data.frame(y = y, x = x)  plot.ts(lasso_data[, seq_len(p_true + 1)]) # AR(3) set.seed(1) n <- 1000 x <- rep(0, n + 3) for (i in 1:600) {   x[i + 3] <- 0.6 * x[i + 2] - 0.2 * x[i + 1] + 0.1 * x[i] + rnorm(1, 0, 3) } for (i in 601:1000) {   x[i + 3] <- 0.3 * x[i + 2] + 0.4 * x[i + 1] + 0.2 * x[i] + rnorm(1, 0, 3) } ar_data <- x[-seq_len(3)]  plot.ts(ar_data) # GARCH(1, 1) set.seed(1) n <- 1501 sigma_2 <- rep(1, n + 1) x <- rep(0, n + 1) for (i in seq_len(750)) {   sigma_2[i + 1] <- 20 + 0.8 * x[i]^2 + 0.1 * sigma_2[i]   x[i + 1] <- rnorm(1, 0, sqrt(sigma_2[i + 1])) } for (i in 751:n) {   sigma_2[i + 1] <- 1 + 0.1 * x[i]^2 + 0.5 * sigma_2[i]   x[i + 1] <- rnorm(1, 0, sqrt(sigma_2[i + 1])) } garch_data <- x[-1]  plot.ts(garch_data) # VAR(2) set.seed(1) n <- 800 p <- 2 theta_1 <- matrix(c(-0.3, 0.6, -0.5, 0.4, 0.2, 0.2, 0.2, -0.2), nrow = p) theta_2 <- matrix(c(0.3, -0.4, 0.1, -0.5, -0.5, -0.2, -0.5, 0.2), nrow = p) x <- matrix(0, n + 2, p) for (i in 1:500) {   x[i + 2, ] <- theta_1 %*% c(x[i + 1, ], x[i, ]) + rnorm(p, 0, 1) } for (i in 501:n) {   x[i + 2, ] <- theta_2 %*% c(x[i + 1, ], x[i, ]) + rnorm(p, 0, 1) } var_data <- x[-seq_len(2), ]  plot.ts(var_data) results[[\"mean_data_1\"]][[\"fastcpd\"]] <-   fastcpd::fastcpd.mean(mean_data_1, r.progress = FALSE)@cp_set results[[\"mean_data_1\"]][[\"fastcpd\"]] testthat::expect_equal(results[[\"mean_data_1\"]][[\"fastcpd\"]], c(300, 700), tolerance = 0.2) results[[\"mean_data_1\"]][[\"CptNonPar\"]] <-   CptNonPar::np.mojo(mean_data_1, G = floor(length(mean_data_1) / 6))$cpts results[[\"mean_data_1\"]][[\"CptNonPar\"]] testthat::expect_equal(results[[\"mean_data_1\"]][[\"CptNonPar\"]], c(300, 700), tolerance = 0.2) results[[\"mean_data_1\"]][[\"strucchange\"]] <-   strucchange::breakpoints(y ~ 1, data = data.frame(y = mean_data_1))$breakpoints results[[\"mean_data_1\"]][[\"strucchange\"]] testthat::expect_equal(results[[\"mean_data_1\"]][[\"strucchange\"]], c(300, 700), tolerance = 0.2) results[[\"mean_data_1\"]][[\"ecp\"]] <- ecp::e.divisive(mean_data_1)$estimates results[[\"mean_data_1\"]][[\"ecp\"]] testthat::expect_equal(results[[\"mean_data_1\"]][[\"ecp\"]], c(1, 301, 701, 1001), tolerance = 0.2) results[[\"mean_data_1\"]][[\"changepoint\"]] <-   changepoint::cpts(changepoint::cpt.mean(c(mean_data_1)/mad(mean_data_1), method = \"PELT\")) results[[\"mean_data_1\"]][[\"changepoint\"]] testthat::expect_equal(results[[\"mean_data_1\"]][[\"changepoint\"]], c(300, 700), tolerance = 0.2) results[[\"mean_data_1\"]][[\"breakfast\"]] <-   breakfast::breakfast(mean_data_1)$cptmodel.list[[6]]$cpts results[[\"mean_data_1\"]][[\"breakfast\"]] testthat::expect_equal(results[[\"mean_data_1\"]][[\"breakfast\"]], c(300, 700), tolerance = 0.2) results[[\"mean_data_1\"]][[\"wbs\"]] <-   wbs::wbs(mean_data_1)$cpt$cpt.ic$mbic.penalty results[[\"mean_data_1\"]][[\"wbs\"]] testthat::expect_equal(results[[\"mean_data_1\"]][[\"wbs\"]], c(300, 700), tolerance = 0.2) results[[\"mean_data_1\"]][[\"mosum\"]] <-   mosum::mosum(c(mean_data_1), G = 40)$cpts.info$cpts results[[\"mean_data_1\"]][[\"mosum\"]] testthat::expect_equal(results[[\"mean_data_1\"]][[\"mosum\"]], c(300, 700), tolerance = 0.2) results[[\"mean_data_1\"]][[\"fpop\"]] <-   fpop::Fpop(mean_data_1, nrow(mean_data_1))$t.est results[[\"mean_data_1\"]][[\"fpop\"]] testthat::expect_equal(results[[\"mean_data_1\"]][[\"fpop\"]], c(300, 700, 1000), tolerance = 0.2) results[[\"mean_data_1\"]][[\"gfpop\"]] <-   gfpop::gfpop(     data = mean_data_1,     mygraph = gfpop::graph(       penalty = 2 * log(nrow(mean_data_1)) * gfpop::sdDiff(mean_data_1) ^ 2,       type = \"updown\"     ),     type = \"mean\"   )$changepoints results[[\"mean_data_1\"]][[\"gfpop\"]] testthat::expect_equal(results[[\"mean_data_1\"]][[\"gfpop\"]], c(300, 700, 1000), tolerance = 0.2) results[[\"mean_data_1\"]][[\"jointseg\"]] <-   jointseg::jointSeg(mean_data_1, K = 2)$bestBkp results[[\"mean_data_1\"]][[\"jointseg\"]] testthat::expect_equal(results[[\"mean_data_1\"]][[\"jointseg\"]], c(300, 700), tolerance = 0.2) results[[\"mean_data_1\"]][[\"stepR\"]] <-   stepR::stepFit(mean_data_1, alpha = 0.5)$rightEnd results[[\"mean_data_1\"]][[\"stepR\"]] testthat::expect_equal(results[[\"mean_data_1\"]][[\"stepR\"]], c(300, 700, 1000), tolerance = 0.2) results[[\"mean_data_1\"]][[\"cpm\"]] <-   cpm::processStream(mean_data_1, cpmType = \"Student\")$changePoints results[[\"mean_data_1\"]][[\"cpm\"]] testthat::expect_equal(results[[\"mean_data_1\"]][[\"cpm\"]], c(299, 699), tolerance = 0.2) results[[\"mean_data_1\"]][[\"segmented\"]] <-   segmented::stepmented(     as.numeric(mean_data_1), npsi = 2   )$psi[, \"Est.\"] results[[\"mean_data_1\"]][[\"segmented\"]] testthat::expect_equal(results[[\"mean_data_1\"]][[\"segmented\"]], c(298, 699), ignore_attr = TRUE, tolerance = 0.2) results[[\"mean_data_1\"]][[\"mcp\"]] <- mcp::mcp(   list(y ~ 1, ~ 1, ~ 1),   data = data.frame(y = mean_data_1, x = seq_len(nrow(mean_data_1))),   par_x = \"x\" ) if (requireNamespace(\"mcp\", quietly = TRUE)) {   plot(results[[\"mean_data_1\"]][[\"mcp\"]]) } results[[\"mean_data_1\"]][[\"not\"]] <-   not::not(mean_data_1, contrast = \"pcwsConstMean\") if (requireNamespace(\"not\", quietly = TRUE)) {   plot(results[[\"mean_data_1\"]][[\"not\"]]) } results[[\"mean_data_1\"]][[\"bcp\"]] <- bcp::bcp(mean_data_1) if (requireNamespace(\"bcp\", quietly = TRUE)) {   plot(results[[\"mean_data_1\"]][[\"bcp\"]]) } results[[\"mv_data_1\"]][[\"fastcpd\"]] <-   fastcpd::fastcpd.mv(mv_data_1, r.progress = FALSE)@cp_set results[[\"mv_data_1\"]][[\"fastcpd\"]] testthat::expect_equal(results[[\"mv_data_1\"]][[\"fastcpd\"]], c(300, 700, 1001, 1300, 1700), tolerance = 0.2) results[[\"mv_data_1\"]][[\"ecp\"]] <- ecp::e.divisive(mv_data_1)$estimates results[[\"mv_data_1\"]][[\"ecp\"]] testthat::expect_equal(results[[\"mv_data_1\"]][[\"ecp\"]], c(1, 301, 701, 1001, 1301, 1701, 2001), tolerance = 0.2) results[[\"mv_data_1\"]][[\"changepoint\"]] <-   changepoint::cpts(changepoint::cpt.meanvar(c(mv_data_1), method = \"PELT\")) results[[\"mv_data_1\"]][[\"changepoint\"]] testthat::expect_equal(results[[\"mv_data_1\"]][[\"changepoint\"]], c(300, 700, 1000, 1300, 1700), tolerance = 0.2) results[[\"mv_data_1\"]][[\"CptNonPar\"]] <-   CptNonPar::np.mojo(mv_data_1, G = floor(length(mv_data_1) / 6))$cpts results[[\"mv_data_1\"]][[\"CptNonPar\"]] testthat::expect_equal(results[[\"mv_data_1\"]][[\"CptNonPar\"]], c(333, 700, 1300), tolerance = 0.2) results[[\"mv_data_1\"]][[\"cpm\"]] <-   cpm::processStream(mv_data_1, cpmType = \"GLR\")$changePoints results[[\"mv_data_1\"]][[\"cpm\"]] testthat::expect_equal(results[[\"mv_data_1\"]][[\"cpm\"]], c(293, 300, 403, 408, 618, 621, 696, 1000, 1021, 1024, 1293, 1300, 1417, 1693, 1700, 1981), tolerance = 0.2) results[[\"mv_data_1\"]][[\"mcp\"]] <- mcp::mcp(   list(y ~ 1, ~ 1, ~ 1, ~ 1, ~ 1, ~ 1),   data = data.frame(y = mv_data_1, x = seq_len(nrow(mv_data_1))),   par_x = \"x\" ) if (requireNamespace(\"mcp\", quietly = TRUE)) {   plot(results[[\"mv_data_1\"]][[\"mcp\"]]) } results[[\"mv_data_1\"]][[\"not\"]] <-   not::not(mv_data_1, contrast = \"pcwsConstMeanVar\") if (requireNamespace(\"not\", quietly = TRUE)) {   plot(results[[\"mv_data_1\"]][[\"not\"]]) } results[[\"mean_data_3\"]][[\"fastcpd\"]] <-   fastcpd::fastcpd.mean(mean_data_3, r.progress = FALSE)@cp_set results[[\"mean_data_3\"]][[\"fastcpd\"]] testthat::expect_equal(results[[\"mean_data_3\"]][[\"fastcpd\"]], c(300, 700), tolerance = 0.2) results[[\"mean_data_3\"]][[\"CptNonPar\"]] <-   CptNonPar::np.mojo(mean_data_3, G = floor(nrow(mean_data_3) / 6))$cpts results[[\"mean_data_3\"]][[\"CptNonPar\"]] testthat::expect_equal(results[[\"mean_data_3\"]][[\"CptNonPar\"]], c(300, 700), tolerance = 0.2) results[[\"mean_data_3\"]][[\"jointseg\"]] <-   jointseg::jointSeg(mean_data_3, K = 2)$bestBkp results[[\"mean_data_3\"]][[\"jointseg\"]] testthat::expect_equal(results[[\"mean_data_3\"]][[\"jointseg\"]], c(300, 700), tolerance = 0.2) results[[\"mean_data_3\"]][[\"strucchange\"]] <-   strucchange::breakpoints(     cbind(y.1, y.2, y.3) ~ 1, data = data.frame(y = mean_data_3)   )$breakpoints results[[\"mean_data_3\"]][[\"strucchange\"]] testthat::expect_equal(results[[\"mean_data_3\"]][[\"strucchange\"]], c(300, 700), tolerance = 0.2) results[[\"mean_data_3\"]][[\"ecp\"]] <- ecp::e.divisive(mean_data_3)$estimates results[[\"mean_data_3\"]][[\"ecp\"]] testthat::expect_equal(results[[\"mean_data_3\"]][[\"ecp\"]], c(1, 301, 701, 1001), tolerance = 0.2) results[[\"mean_data_3\"]][[\"bcp\"]] <- bcp::bcp(mean_data_3) if (requireNamespace(\"bcp\", quietly = TRUE)) {   plot(results[[\"mean_data_3\"]][[\"bcp\"]]) } results[[\"mv_data_3\"]][[\"fastcpd\"]] <-   fastcpd::fastcpd.mv(mv_data_3, r.progress = FALSE)@cp_set results[[\"mv_data_3\"]][[\"fastcpd\"]] testthat::expect_equal(results[[\"mv_data_3\"]][[\"fastcpd\"]], c(300, 700, 1013, 1300, 1700), tolerance = 0.2) results[[\"mv_data_3\"]][[\"ecp\"]] <- ecp::e.divisive(mv_data_3)$estimates results[[\"mv_data_3\"]][[\"ecp\"]] testthat::expect_equal(results[[\"mv_data_3\"]][[\"ecp\"]], c(1, 301, 701, 1001, 1301, 1701, 2001), tolerance = 0.2) results[[\"lm_data\"]][[\"fastcpd\"]] <-   fastcpd::fastcpd.lm(lm_data, r.progress = FALSE)@cp_set results[[\"lm_data\"]][[\"fastcpd\"]] testthat::expect_equal(results[[\"lm_data\"]][[\"fastcpd\"]], c(97, 201), tolerance = 0.2) results[[\"lm_data\"]][[\"strucchange\"]] <-   strucchange::breakpoints(y ~ . - 1, data = lm_data)$breakpoints results[[\"lm_data\"]][[\"strucchange\"]] testthat::expect_equal(results[[\"lm_data\"]][[\"strucchange\"]], c(100, 201), tolerance = 0.2) results[[\"lm_data\"]][[\"segmented\"]] <-   segmented::segmented(     lm(       y ~ . - 1, data.frame(y = lm_data$y, x = lm_data[, -1], index = seq_len(nrow(lm_data)))     ),     seg.Z = ~ index   )$psi[, \"Est.\"] results[[\"lm_data\"]][[\"segmented\"]] testthat::expect_equal(results[[\"lm_data\"]][[\"segmented\"]], c(233), ignore_attr = TRUE, tolerance = 0.2) results[[\"binomial_data\"]][[\"fastcpd\"]] <-   fastcpd::fastcpd.binomial(binomial_data, r.progress = FALSE)@cp_set results[[\"binomial_data\"]][[\"fastcpd\"]] testthat::expect_equal(results[[\"binomial_data\"]][[\"fastcpd\"]], 302, tolerance = 0.2) results[[\"binomial_data\"]][[\"strucchange\"]] <-   strucchange::breakpoints(y ~ . - 1, data = binomial_data)$breakpoints results[[\"binomial_data\"]][[\"strucchange\"]] testthat::expect_equal(results[[\"binomial_data\"]][[\"strucchange\"]], 297, tolerance = 0.2) results[[\"poisson_data\"]][[\"fastcpd\"]] <-   fastcpd::fastcpd.poisson(poisson_data, r.progress = FALSE)@cp_set results[[\"poisson_data\"]][[\"fastcpd\"]] testthat::expect_equal(results[[\"poisson_data\"]][[\"fastcpd\"]], c(498, 805, 1003), tolerance = 0.2) results[[\"poisson_data\"]][[\"strucchange\"]] <-   strucchange::breakpoints(y ~ . - 1, data = poisson_data)$breakpoints results[[\"poisson_data\"]][[\"strucchange\"]] testthat::expect_equal(results[[\"poisson_data\"]][[\"strucchange\"]], 935, tolerance = 0.2) results[[\"lasso_data\"]][[\"fastcpd\"]] <-   fastcpd::fastcpd.lasso(lasso_data, r.progress = FALSE)@cp_set results[[\"lasso_data\"]][[\"fastcpd\"]] testthat::expect_equal(results[[\"lasso_data\"]][[\"fastcpd\"]], c(79, 199, 320), tolerance = 0.2) results[[\"lasso_data\"]][[\"strucchange\"]] <-   strucchange::breakpoints(y ~ . - 1, data = lasso_data)$breakpoints results[[\"lasso_data\"]][[\"strucchange\"]] testthat::expect_equal(results[[\"lasso_data\"]][[\"strucchange\"]], c(80, 200, 321), tolerance = 0.2) results[[\"ar_data\"]][[\"fastcpd\"]] <-   fastcpd::fastcpd.ar(ar_data, 3, r.progress = FALSE)@cp_set results[[\"ar_data\"]][[\"fastcpd\"]] testthat::expect_equal(results[[\"ar_data\"]][[\"fastcpd\"]], c(614), tolerance = 0.2) results[[\"ar_data\"]][[\"CptNonPar\"]] <-   CptNonPar::np.mojo(ar_data, G = floor(length(ar_data) / 6))$cpts results[[\"ar_data\"]][[\"CptNonPar\"]] testthat::expect_equal(results[[\"ar_data\"]][[\"CptNonPar\"]], numeric(0), tolerance = 0.2) results[[\"ar_data\"]][[\"segmented\"]] <-   segmented::segmented(     lm(       y ~ x + 1, data.frame(y = ar_data, x = seq_along(ar_data))     ),     seg.Z = ~ x   )$psi[, \"Est.\"] results[[\"ar_data\"]][[\"segmented\"]] testthat::expect_equal(results[[\"ar_data\"]][[\"segmented\"]], c(690), ignore_attr = TRUE, tolerance = 0.2) results[[\"ar_data\"]][[\"mcp\"]] <-   mcp::mcp(     list(y ~ 1 + ar(3), ~ 0 + ar(3)),     data = data.frame(y = ar_data, x = seq_along(ar_data)),     par_x = \"x\"   ) if (requireNamespace(\"mcp\", quietly = TRUE)) {   plot(results[[\"ar_data\"]][[\"mcp\"]]) } results[[\"garch_data\"]][[\"fastcpd\"]] <-   fastcpd::fastcpd.garch(garch_data, c(1, 1), r.progress = FALSE)@cp_set results[[\"garch_data\"]][[\"fastcpd\"]] testthat::expect_equal(results[[\"garch_data\"]][[\"fastcpd\"]], c(759), tolerance = 0.2) results[[\"garch_data\"]][[\"CptNonPar\"]] <-   CptNonPar::np.mojo(garch_data, G = floor(length(garch_data) / 6))$cpts results[[\"garch_data\"]][[\"CptNonPar\"]] testthat::expect_equal(results[[\"garch_data\"]][[\"CptNonPar\"]], c(759), tolerance = 0.2) results[[\"garch_data\"]][[\"strucchange\"]] <-   strucchange::breakpoints(x ~ 1, data = data.frame(x = garch_data))$breakpoints results[[\"garch_data\"]][[\"strucchange\"]] testthat::expect_equal(results[[\"garch_data\"]][[\"strucchange\"]], NA, tolerance = 0.2) results[[\"var_data\"]][[\"fastcpd\"]] <-   fastcpd::fastcpd.var(var_data, 2, r.progress = FALSE)@cp_set results[[\"var_data\"]][[\"fastcpd\"]] testthat::expect_equal(results[[\"var_data\"]][[\"fastcpd\"]], c(500), tolerance = 0.2) results[[\"var_data\"]][[\"VARDetect\"]] <- VARDetect::tbss(var_data)$cp results[[\"var_data\"]][[\"VARDetect\"]] testthat::expect_equal(results[[\"var_data\"]][[\"VARDetect\"]], c(501), tolerance = 0.2) well_log <- fastcpd::well_log well_log <- well_log[well_log > 1e5]  results[[\"well_log\"]] <- list(   fastcpd = fastcpd::fastcpd.mean(well_log, trim = 0.003)@cp_set,   changepoint = changepoint::cpts(changepoint::cpt.mean(well_log/mad(well_log), method = \"PELT\")),   CptNonPar =     CptNonPar::np.mojo(well_log, G = floor(length(well_log) / 6))$cpts,   strucchange = strucchange::breakpoints(     y ~ 1, data = data.frame(y = well_log)   )$breakpoints,   ecp = ecp::e.divisive(matrix(well_log))$estimates,   breakfast = breakfast::breakfast(well_log)$cptmodel.list[[6]]$cpts,   wbs = wbs::wbs(well_log)$cpt$cpt.ic$mbic.penalty,   mosum = mosum::mosum(c(well_log), G = 40)$cpts.info$cpts,   # fpop = fpop::Fpop(well_log, length(well_log))$t.est,  # meaningless   gfpop = gfpop::gfpop(     data = well_log,     mygraph = gfpop::graph(       penalty = 2 * log(length(well_log)) * gfpop::sdDiff(well_log) ^ 2,       type = \"updown\"     ),     type = \"mean\"   )$changepoints,   jointseg = jointseg::jointSeg(well_log, K = 12)$bestBkp,   stepR = stepR::stepFit(well_log, alpha = 0.5)$rightEnd ) results[[\"well_log\"]] package_list <- sort(names(results[[\"well_log\"]]), decreasing = TRUE) comparison_table <- NULL for (package_index in seq_along(package_list)) {   package <- package_list[[package_index]]   comparison_table <- rbind(     comparison_table,     data.frame(       change_point = results[[\"well_log\"]][[package]],       package = package,       y_offset = (package_index - 1) * 1000     )   ) }  most_selected <- sort(table(comparison_table$change_point), decreasing = TRUE) most_selected <- sort(as.numeric(names(most_selected[most_selected >= 4]))) for (i in seq_len(length(most_selected) - 1)) {   if (most_selected[i + 1] - most_selected[i] < 2) {     most_selected[i] <- NA     most_selected[i + 1] <- most_selected[i + 1] - 0.5   } } (most_selected <- most_selected[!is.na(most_selected)]) if (requireNamespace(\"ggplot2\", quietly = TRUE)) {   ggplot2::ggplot() +     ggplot2::geom_point(       data = data.frame(x = seq_along(well_log), y = c(well_log)),       ggplot2::aes(x = x, y = y)     ) +     ggplot2::geom_vline(       xintercept = most_selected,       color = \"black\",       linetype = \"dashed\",       alpha = 0.2     ) +     ggplot2::geom_point(       data = comparison_table,       ggplot2::aes(x = change_point, y = 50000 + y_offset, color = package),       shape = 17,       size = 1.9     ) +     ggplot2::geom_hline(       data = comparison_table,       ggplot2::aes(yintercept = 50000 + y_offset, color = package),       linetype = \"dashed\",       alpha = 0.1     ) +     ggplot2::coord_cartesian(       ylim = c(50000 - 500, max(well_log) + 1000),       xlim = c(-200, length(well_log) + 200),       expand = FALSE     ) +     ggplot2::theme(       panel.background = ggplot2::element_blank(),       panel.border = ggplot2::element_rect(colour = \"black\", fill = NA),       panel.grid.major = ggplot2::element_blank(),       panel.grid.minor = ggplot2::element_blank()     ) +     ggplot2::xlab(NULL) + ggplot2::ylab(NULL) } results[[\"microbenchmark\"]] <- microbenchmark::microbenchmark(   fastcpd = fastcpd::fastcpd.mean(well_log, r.progress = FALSE, cp_only = TRUE),   changepoint = changepoint::cpt.mean(well_log/mad(well_log), method = \"PELT\"),   # CptNonPar = CptNonPar::np.mojo(well_log, G = floor(length(well_log) / 6)),   # strucchange = strucchange::breakpoints(y ~ 1, data = data.frame(y = well_log)),   # ecp = ecp::e.divisive(matrix(well_log)),   # breakfast = breakfast::breakfast(well_log),   wbs = wbs::wbs(well_log),   mosum = mosum::mosum(c(well_log), G = 40),   fpop = fpop::Fpop(well_log, nrow(well_log)),   gfpop = gfpop::gfpop(     data = well_log,     mygraph = gfpop::graph(       penalty = 2 * log(length(well_log)) * gfpop::sdDiff(well_log) ^ 2,       type = \"updown\"     ),     type = \"mean\"   ),   jointseg = jointseg::jointSeg(well_log, K = 12),   stepR = stepR::stepFit(well_log, alpha = 0.5),   not = not::not(well_log, contrast = \"pcwsConstMean\") ) results[[\"microbenchmark\"]] if (requireNamespace(\"ggplot2\", quietly = TRUE) && requireNamespace(\"microbenchmark\", quietly = TRUE)) {   ggplot2::autoplot(results[[\"microbenchmark\"]]) } if (!file.exists(\"comparison-packages-results.RData\")) {   save(results, file = \"comparison-packages-results.RData\") }"},{"path":[]},{"path":"https://fastcpd.xingchi.li/articles/comparison-pelt.html","id":"logistic-regression","dir":"Articles","previous_headings":"Setup","what":"Logistic regression","title":"Comparison with vanilla PELT","text":"","code":"#' Cost function for Logistic regression, i.e. binomial family in GLM. #' #' @param data Data to be used to calculate the cost values. The last column is #'     the response variable. #' @param family Family of the distribution. #' @keywords internal #' #' @noRd #' @return Cost value for the corresponding segment of data. cost_glm_binomial <- function(data, family = \"binomial\") {   data <- as.matrix(data)   p <- dim(data)[2] - 1   out <- fastglm::fastglm(     as.matrix(data[, 1:p]), data[, p + 1],     family = family   )   return(out$deviance / 2) }  #' Implementation of vanilla PELT for logistic regression type data. #' #' @param data Data to be used for change point detection. #' @param beta Penalty coefficient for the number of change points. #' @param cost Cost function to be used to calculate cost values. #' @keywords internal #' #' @noRd #' @return A list consisting of two: change point locations and negative log #'     likelihood values for each segment. pelt_vanilla_binomial <- function(data, beta, cost = cost_glm_binomial) {   n <- dim(data)[1]   p <- dim(data)[2] - 1   Fobj <- c(-beta, 0)   cp_set <- list(NULL, 0)   set <- c(0, 1)   for (t in 2:n)   {     m <- length(set)     cval <- rep(NA, m)     for (i in 1:m)     {       k <- set[i] + 1       cval[i] <- 0       if (t - k >= p - 1) cval[i] <- suppressWarnings(cost(data[k:t, ]))     }     obj <- cval + Fobj[set + 1] + beta     min_val <- min(obj)     ind <- which(obj == min_val)[1]     cp_set_add <- c(cp_set[[set[ind] + 1]], set[ind])     cp_set <- append(cp_set, list(cp_set_add))     ind2 <- (cval + Fobj[set + 1]) <= min_val     set <- c(set[ind2], t)     Fobj <- c(Fobj, min_val)   }   cp <- cp_set[[n + 1]]   nLL <- 0   cp_loc <- unique(c(0, cp, n))   for (i in 1:(length(cp_loc) - 1))   {     seg <- (cp_loc[i] + 1):cp_loc[i + 1]     data_seg <- data[seg, ]     out <- fastglm::fastglm(       as.matrix(data_seg[, 1:p]), data_seg[, p + 1],       family = \"binomial\"     )     nLL <- out$deviance / 2 + nLL   }    output <- list(cp, nLL)   names(output) <- c(\"cp\", \"nLL\")   return(output) }  #' Function to update the coefficients using gradient descent. #' #' @param data_new New data point used to update the coeffient. #' @param coef Previous coeffient to be updated. #' @param cum_coef Summation of all the past coefficients to be used in #'     averaging. #' @param cmatrix Hessian matrix in gradient descent. #' @param epsilon Small adjustment to avoid singularity when doing inverse on #'     the Hessian matrix. #' @keywords internal #' #' @noRd #' @return A list of values containing the new coefficients, summation of #'     coefficients so far and all the Hessian matrices. cost_logistic_update <- function(     data_new, coef, cum_coef, cmatrix, epsilon = 1e-10) {   p <- length(data_new) - 1   X_new <- data_new[1:p]   Y_new <- data_new[p + 1]   eta <- X_new %*% coef   mu <- 1 / (1 + exp(-eta))   cmatrix <- cmatrix + (X_new %o% X_new) * as.numeric((1 - mu) * mu)   lik_dev <- as.numeric(-(Y_new - mu)) * X_new   coef <- coef - solve(cmatrix + epsilon * diag(1, p), lik_dev)   cum_coef <- cum_coef + coef   return(list(coef, cum_coef, cmatrix)) }  #' Calculate negative log likelihood given data segment and guess of #' coefficient. #' #' @param data Data to be used to calculate the negative log likelihood. #' @param b Guess of the coefficient. #' @keywords internal #' #' @noRd #' @return Negative log likelihood. neg_log_lik_binomial <- function(data, b) {   p <- dim(data)[2] - 1   X <- data[, 1:p, drop = FALSE]   Y <- data[, p + 1, drop = FALSE]   u <- as.numeric(X %*% b)   L <- -Y * u + log(1 + exp(u))   return(sum(L)) }  #' Find change points using dynamic programming with pruning and SeGD. #' #' @param data Data used to find change points. #' @param beta Penalty coefficient for the number of change points. #' @param B Initial guess on the number of change points. #' @param trim Propotion of the data to ignore the change points at the #'     beginning, ending and between change points. #' @keywords internal #' #' @noRd #' @return A list containing potential change point locations and negative log #'     likelihood for each segment based on the change points guess. segd_binomial <- function(data, beta, B = 10, trim = 0.025) {   n <- dim(data)[1]   p <- dim(data)[2] - 1   Fobj <- c(-beta, 0)   cp_set <- list(NULL, 0)   set <- c(0, 1)    # choose the initial values based on pre-segmentation    index <- rep(1:B, rep(n / B, B))   coef.int <- matrix(NA, B, p)   for (i in 1:B)   {     out <- fastglm::fastglm(       as.matrix(data[index == i, 1:p]),       data[index == i, p + 1],       family = \"binomial\"     )     coef.int[i, ] <- coef(out)   }   X1 <- data[1, 1:p]   cum_coef <- coef <- matrix(coef.int[1, ], p, 1)   e_eta <- exp(coef %*% X1)   const <- e_eta / (1 + e_eta)^2   cmatrix <- array((X1 %o% X1) * as.numeric(const), c(p, p, 1))    for (t in 2:n)   {     m <- length(set)     cval <- rep(NA, m)      for (i in 1:(m - 1))     {       coef_c <- coef[, i]       cum_coef_c <- cum_coef[, i]       cmatrix_c <- cmatrix[, , i]       out <- cost_logistic_update(data[t, ], coef_c, cum_coef_c, cmatrix_c)       coef[, i] <- out[[1]]       cum_coef[, i] <- out[[2]]       cmatrix[, , i] <- out[[3]]       k <- set[i] + 1       cval[i] <- 0       if (t - k >= p - 1) {         cval[i] <-           neg_log_lik_binomial(data[k:t, ], cum_coef[, i] / (t - k + 1))       }     }      # the choice of initial values requires further investigation      cval[m] <- 0     Xt <- data[t, 1:p]     cum_coef_add <- coef_add <- coef.int[index[t], ]     e_eta_t <- exp(coef_add %*% Xt)     const <- e_eta_t / (1 + e_eta_t)^2     cmatrix_add <- (Xt %o% Xt) * as.numeric(const)      coef <- cbind(coef, coef_add)     cum_coef <- cbind(cum_coef, cum_coef_add)     cmatrix <- abind::abind(cmatrix, cmatrix_add, along = 3)      # Adding a momentum term (TBD)      obj <- cval + Fobj[set + 1] + beta     min_val <- min(obj)     ind <- which(obj == min_val)[1]     cp_set_add <- c(cp_set[[set[ind] + 1]], set[ind])     cp_set <- append(cp_set, list(cp_set_add))     ind2 <- (cval + Fobj[set + 1]) <= min_val     set <- c(set[ind2], t)     coef <- coef[, ind2, drop = FALSE]     cum_coef <- cum_coef[, ind2, drop = FALSE]     cmatrix <- cmatrix[, , ind2, drop = FALSE]     Fobj <- c(Fobj, min_val)   }    # Remove change-points close to the boundaries    cp <- cp_set[[n + 1]]   if (length(cp) > 0) {     ind3 <- (seq_len(length(cp)))[(cp < trim * n) | (cp > (1 - trim) * n)]     cp <- cp[-ind3]   }    nLL <- 0   cp_loc <- unique(c(0, cp, n))   for (i in 1:(length(cp_loc) - 1))   {     seg <- (cp_loc[i] + 1):cp_loc[i + 1]     data_seg <- data[seg, ]     out <- fastglm::fastglm(       as.matrix(data_seg[, 1:p]), data_seg[, p + 1],       family = \"binomial\"     )     nLL <- out$deviance / 2 + nLL   }    output <- list(cp, nLL)   names(output) <- c(\"cp\", \"nLL\")   return(output) }"},{"path":"https://fastcpd.xingchi.li/articles/comparison-pelt.html","id":"poisson-regression","dir":"Articles","previous_headings":"Setup","what":"Poisson regression","title":"Comparison with vanilla PELT","text":"","code":"#' Cost function for Poisson regression. #' #' @param data Data to be used to calculate the cost values. The last column is #'     the response variable. #' @param family Family of the distribution. #' @keywords internal #' #' @noRd #' @return Cost value for the corresponding segment of data. cost_glm_poisson <- function(data, family = \"poisson\") {   data <- as.matrix(data)   p <- dim(data)[2] - 1   out <- fastglm::fastglm(as.matrix(data[, 1:p]), data[, p + 1], family = family)   return(out$deviance / 2) }  #' Implementation of vanilla PELT for poisson regression type data. #' #' @param data Data to be used for change point detection. #' @param beta Penalty coefficient for the number of change points. #' @param cost Cost function to be used to calculate cost values. #' @keywords internal #' #' @noRd #' @return A list consisting of two: change point locations and negative log #'     likelihood values for each segment. pelt_vanilla_poisson <- function(data, beta, cost = cost_glm_poisson) {   n <- dim(data)[1]   p <- dim(data)[2] - 1   Fobj <- c(-beta, 0)   cp_set <- list(NULL, 0)   set <- c(0, 1)   for (t in 2:n)   {     m <- length(set)     cval <- rep(NA, m)     for (i in 1:m)     {       k <- set[i] + 1       if (t - k >= p - 1) cval[i] <- suppressWarnings(cost(data[k:t, ])) else cval[i] <- 0     }     obj <- cval + Fobj[set + 1] + beta     min_val <- min(obj)     ind <- which(obj == min_val)[1]     cp_set_add <- c(cp_set[[set[ind] + 1]], set[ind])     cp_set <- append(cp_set, list(cp_set_add))     ind2 <- (cval + Fobj[set + 1]) <= min_val     set <- c(set[ind2], t)     Fobj <- c(Fobj, min_val)     # if (t %% 100 == 0) print(t)   }   cp <- cp_set[[n + 1]]   output <- list(cp)   names(output) <- c(\"cp\")    return(output) }  #' Function to update the coefficients using gradient descent. #' #' @param data_new New data point used to update the coeffient. #' @param coef Previous coeffient to be updated. #' @param cum_coef Summation of all the past coefficients to be used in #'     averaging. #' @param cmatrix Hessian matrix in gradient descent. #' @param epsilon Small adjustment to avoid singularity when doing inverse on #'     the Hessian matrix. #' @param G Upper bound for the coefficient. #' @param L Winsorization lower bound. #' @param H Winsorization upper bound. #' @keywords internal #' #' @noRd #' @return A list of values containing the new coefficients, summation of #'     coefficients so far and all the Hessian matrices. cost_poisson_update <- function(data_new, coef, cum_coef, cmatrix, epsilon = 0.001, G = 10^10, L = -20, H = 20) {   p <- length(data_new) - 1   X_new <- data_new[1:p]   Y_new <- data_new[p + 1]   eta <- X_new %*% coef   mu <- exp(eta)   cmatrix <- cmatrix + (X_new %o% X_new) * min(as.numeric(mu), G)   lik_dev <- as.numeric(-(Y_new - mu)) * X_new   coef <- coef - solve(cmatrix + epsilon * diag(1, p), lik_dev)   coef <- pmin(pmax(coef, L), H)   cum_coef <- cum_coef + coef   return(list(coef, cum_coef, cmatrix)) }  #' Calculate negative log likelihood given data segment and guess of #' coefficient. #' #' @param data Data to be used to calculate the negative log likelihood. #' @param b Guess of the coefficient. #' @keywords internal #' #' @noRd #' @return Negative log likelihood. neg_log_lik_poisson <- function(data, b) {   p <- dim(data)[2] - 1   X <- data[, 1:p, drop = FALSE]   Y <- data[, p + 1, drop = FALSE]   u <- as.numeric(X %*% b)   L <- -Y * u + exp(u) + lfactorial(Y)   return(sum(L)) }  #' Find change points using dynamic programming with pruning and SeGD. #' #' @param data Data used to find change points. #' @param beta Penalty coefficient for the number of change points. #' @param B Initial guess on the number of change points. #' @param trim Propotion of the data to ignore the change points at the #'     beginning, ending and between change points. #' @param epsilon Small adjustment to avoid singularity when doing inverse on #'    the Hessian matrix. #' @param G Upper bound for the coefficient. #' @param L Winsorization lower bound. #' @param H Winsorization upper bound. #' @keywords internal #' #' @noRd #' @return A list containing potential change point locations and negative log #'     likelihood for each segment based on the change points guess. segd_poisson <- function(data, beta, B = 10, trim = 0.03, epsilon = 0.001, G = 10^10, L = -20, H = 20) {   n <- dim(data)[1]   p <- dim(data)[2] - 1   Fobj <- c(-beta, 0)   cp_set <- list(NULL, 0)   set <- c(0, 1)    # choose the initial values based on pre-segmentation    index <- rep(1:B, rep(n / B, B))   coef.int <- matrix(NA, B, p)   for (i in 1:B)   {     out <- fastglm::fastglm(x = as.matrix(data[index == i, 1:p]), y = data[index == i, p + 1], family = \"poisson\")     coef.int[i, ] <- coef(out)   }   X1 <- data[1, 1:p]   cum_coef <- coef <- pmin(pmax(matrix(coef.int[1, ], p, 1), L), H)   e_eta <- exp(coef %*% X1)   const <- e_eta   cmatrix <- array((X1 %o% X1) * as.numeric(const), c(p, p, 1))    for (t in 2:n)   {     m <- length(set)     cval <- rep(NA, m)     for (i in 1:(m - 1))     {       coef_c <- coef[, i]       cum_coef_c <- cum_coef[, i]       cmatrix_c <- cmatrix[, , i]       out <- cost_poisson_update(data[t, ], coef_c, cum_coef_c, cmatrix_c, epsilon = epsilon, G = G, L = L, H = H)       coef[, i] <- out[[1]]       cum_coef[, i] <- out[[2]]       cmatrix[, , i] <- out[[3]]       k <- set[i] + 1       cum_coef_win <- pmin(pmax(cum_coef[, i] / (t - k + 1), L), H)       if (t - k >= p - 1) cval[i] <- neg_log_lik_poisson(data[k:t, ], cum_coef_win) else cval[i] <- 0     }      # the choice of initial values requires further investigation      cval[m] <- 0     Xt <- data[t, 1:p]     cum_coef_add <- coef_add <- pmin(pmax(coef.int[index[t], ], L), H)     e_eta_t <- exp(coef_add %*% Xt)     const <- e_eta_t     cmatrix_add <- (Xt %o% Xt) * as.numeric(const)     coef <- cbind(coef, coef_add)     cum_coef <- cbind(cum_coef, cum_coef_add)     cmatrix <- abind::abind(cmatrix, cmatrix_add, along = 3)      # Adding a momentum term (TBD)      obj <- cval + Fobj[set + 1] + beta     min_val <- min(obj)     ind <- which(obj == min_val)[1]     cp_set_add <- c(cp_set[[set[ind] + 1]], set[ind])     cp_set <- append(cp_set, list(cp_set_add))     ind2 <- (cval + Fobj[set + 1]) <= min_val     set <- c(set[ind2], t)     coef <- coef[, ind2, drop = FALSE]     cum_coef <- cum_coef[, ind2, drop = FALSE]     cmatrix <- cmatrix[, , ind2, drop = FALSE]     Fobj <- c(Fobj, min_val)   }    # Remove change-points close to the boundaries    cp <- cp_set[[n + 1]]   if (length(cp) > 0) {     ind3 <- (1:length(cp))[(cp < trim * n) | (cp > (1 - trim) * n)]     if (length(ind3) > 0) cp <- cp[-ind3]   }    cp <- sort(unique(c(0, cp)))   index <- which((diff(cp) < trim * n) == TRUE)   if (length(index) > 0) cp <- floor((cp[-(index + 1)] + cp[-index]) / 2)   cp <- cp[cp > 0]    # nLL <- 0   # cp_loc <- unique(c(0,cp,n))   # for(i in 1:(length(cp_loc)-1))   # {   #   seg <- (cp_loc[i]+1):cp_loc[i+1]   #   data_seg <- data[seg,]   #   out <- fastglm(as.matrix(data_seg[, 1:p]), data_seg[, p+1], family=\"Poisson\")   #   nLL <- out$deviance/2 + nLL   # }    # output <- list(cp, nLL)   # names(output) <- c(\"cp\", \"nLL\")    output <- list(cp)   names(output) <- c(\"cp\")    return(output) }  # Generate data from poisson regression models with change-points #' @param n Number of observations. #' @param d Dimension of the covariates. #' @param true.coef True regression coefficients. #' @param true.cp.loc True change-point locations. #' @param Sigma Covariance matrix of the covariates. #' @keywords internal #' #' @noRd #' @return A list containing the generated data and the true cluster #'    assignments. data_gen_poisson <- function(n, d, true.coef, true.cp.loc, Sigma) {   loc <- unique(c(0, true.cp.loc, n))   if (dim(true.coef)[2] != length(loc) - 1) stop(\"true.coef and true.cp.loc do not match\")   x <- mvtnorm::rmvnorm(n, mean = rep(0, d), sigma = Sigma)   y <- NULL   for (i in 1:(length(loc) - 1))   {     mu <- exp(x[(loc[i] + 1):loc[i + 1], , drop = FALSE] %*% true.coef[, i, drop = FALSE])     group <- rpois(length(mu), mu)     y <- c(y, group)   }   data <- cbind(x, y)   true_cluster <- rep(1:(length(loc) - 1), diff(loc))   result <- list(data, true_cluster)   return(result) }"},{"path":"https://fastcpd.xingchi.li/articles/comparison-pelt.html","id":"penalized-linear-regression","dir":"Articles","previous_headings":"Setup","what":"Penalized linear regression","title":"Comparison with vanilla PELT","text":"","code":"#' Cost function for penalized linear regression. #' #' @param data Data to be used to calculate the cost values. The last column is #'     the response variable. #' @param lambda Penalty coefficient. #' @param family Family of the distribution. #' @keywords internal #' #' @noRd #' @return Cost value for the corresponding segment of data. cost_lasso <- function(data, lambda, family = \"gaussian\") {   data <- as.matrix(data)   n <- dim(data)[1]   p <- dim(data)[2] - 1   out <- glmnet::glmnet(as.matrix(data[, 1:p]), data[, p + 1], family = family, lambda = lambda)   return(deviance(out) / 2) }  #' Implementation of vanilla PELT for penalized linear regression type data. #' #' @param data Data to be used for change point detection. #' @param beta Penalty coefficient for the number of change points. #' @param B Initial guess on the number of change points. #' @param cost Cost function to be used to calculate cost values. #' @param family Family of the distribution. #' @keywords internal #' #' @noRd #' @return A list consisting of two: change point locations and negative log #'     likelihood values for each segment. pelt_vanilla_lasso <- function(data, beta, B = 10, cost = cost_lasso, family = \"gaussian\") {   n <- dim(data)[1]   p <- dim(data)[2] - 1   index <- rep(1:B, rep(n / B, B))   err_sd <- act_num <- rep(NA, B)   for (i in 1:B)   {     cvfit <- glmnet::cv.glmnet(as.matrix(data[index == i, 1:p]), data[index == i, p + 1], family = family)     coef <- coef(cvfit, s = \"lambda.1se\")[-1]     resi <- data[index == i, p + 1] - as.matrix(data[index == i, 1:p]) %*% as.numeric(coef)     err_sd[i] <- sqrt(mean(resi^2))     act_num[i] <- sum(abs(coef) > 0)   }   err_sd_mean <- mean(err_sd) # only works if error sd is unchanged.   act_num_mean <- mean(act_num)   beta <- (act_num_mean + 1) * beta # seems to work but there might be better choices    Fobj <- c(-beta, 0)   cp_set <- list(NULL, 0)   set <- c(0, 1)   for (t in 2:n)   {     m <- length(set)     cval <- rep(NA, m)     for (i in 1:m)     {       k <- set[i] + 1       if (t - k >= 1) cval[i] <- suppressWarnings(cost(data[k:t, ], lambda = err_sd_mean * sqrt(2 * log(p) / (t - k + 1)))) else cval[i] <- 0     }     obj <- cval + Fobj[set + 1] + beta     min_val <- min(obj)     ind <- which(obj == min_val)[1]     cp_set_add <- c(cp_set[[set[ind] + 1]], set[ind])     cp_set <- append(cp_set, list(cp_set_add))     ind2 <- (cval + Fobj[set + 1]) <= min_val     set <- c(set[ind2], t)     Fobj <- c(Fobj, min_val)     if (t %% 100 == 0) print(t)   }   cp <- cp_set[[n + 1]]   # nLL <- 0   # cp_loc <- unique(c(0,cp,n))   # for(i in 1:(length(cp_loc)-1))   # {   #  seg <- (cp_loc[i]+1):cp_loc[i+1]   #  data_seg <- data[seg,]   #  out <- glmnet(as.matrix(data_seg[, 1:p]), data_seg[, p+1], lambda=lambda, family=family)   #  nLL <- deviance(out)/2 + nLL   # }   # output <- list(cp, nLL)   output <- list(cp)   names(output) <- c(\"cp\")   return(output) }  #' Function to update the coefficients using gradient descent. #' @param a Coefficient to be updated. #' @param lambda Penalty coefficient. #' @keywords internal #' #' @noRd #' @return Updated coefficient. soft_threshold <- function(a, lambda) {   sign(a) * pmax(abs(a) - lambda, 0) }  #' Function to update the coefficients using gradient descent. #' #' @param data_new New data point used to update the coeffient. #' @param coef Previous coeffient to be updated. #' @param cum_coef Summation of all the past coefficients to be used in #'     averaging. #' @param cmatrix Hessian matrix in gradient descent. #' @param lambda Penalty coefficient. #' @keywords internal #' #' @noRd #' @return A list of values containing the new coefficients, summation of #'     coefficients so far and all the Hessian matrices. cost_lasso_update <- function(data_new, coef, cum_coef, cmatrix, lambda) {   p <- length(data_new) - 1   X_new <- data_new[1:p]   Y_new <- data_new[p + 1]   mu <- X_new %*% coef   cmatrix <- cmatrix + X_new %o% X_new   # B <- as.vector(cmatrix_inv%*%X_new)   # cmatrix_inv <- cmatrix_inv - B%o%B/(1+sum(X_new*B))   lik_dev <- as.numeric(-(Y_new - mu)) * X_new   coef <- coef - solve(cmatrix, lik_dev)   nc <- norm(cmatrix, type = \"F\") # the choice of norm affects the speed. Spectral norm is more accurate but slower than F norm.   coef <- soft_threshold(coef, lambda / nc)   cum_coef <- cum_coef + coef   return(list(coef, cum_coef, cmatrix)) }  #' Calculate negative log likelihood given data segment and guess of #' coefficient. #' #' @param data Data to be used to calculate the negative log likelihood. #' @param b Guess of the coefficient. #' @param lambda Penalty coefficient. #' @keywords internal #' #' @noRd #' @return Negative log likelihood. neg_log_lik_lasso <- function(data, b, lambda) {   p <- dim(data)[2] - 1   X <- data[, 1:p, drop = FALSE]   Y <- data[, p + 1, drop = FALSE]   resi <- Y - X %*% b   L <- sum(resi^2) / 2 + lambda * sum(abs(b))   return(L) }  #' Find change points using dynamic programming with pruning and SeGD. #' #' @param data Data used to find change points. #' @param beta Penalty coefficient for the number of change points. #' @param B Initial guess on the number of change points. #' @param trim Propotion of the data to ignore the change points at the #'     beginning, ending and between change points. #' @param epsilon Small adjustment to avoid singularity when doing inverse on #'    the Hessian matrix. #' @param family Family of the distribution. #' @keywords internal #' #' @noRd #' @return A list containing potential change point locations and negative log #'     likelihood for each segment based on the change points guess. segd_lasso <- function(data, beta, B = 10, trim = 0.025, epsilon = 1e-5, family = \"gaussian\") {   n <- dim(data)[1]   p <- dim(data)[2] - 1   Fobj <- c(-beta, 0)   cp_set <- list(NULL, 0)   set <- c(0, 1)    # choose the initial values based on pre-segmentation    index <- rep(1:B, rep(n / B, B))   coef.int <- matrix(NA, B, p)   err_sd <- act_num <- rep(NA, B)   for (i in 1:B)   {     cvfit <- glmnet::cv.glmnet(as.matrix(data[index == i, 1:p]), data[index == i, p + 1], family = family)     coef.int[i, ] <- coef(cvfit, s = \"lambda.1se\")[-1]     resi <- data[index == i, p + 1] - as.matrix(data[index == i, 1:p]) %*% as.numeric(coef.int[i, ])     err_sd[i] <- sqrt(mean(resi^2))     act_num[i] <- sum(abs(coef.int[i, ]) > 0)   }   err_sd_mean <- mean(err_sd) # only works if error sd is unchanged.   act_num_mean <- mean(act_num)   beta <- (act_num_mean + 1) * beta # seems to work but there might be better choices    X1 <- data[1, 1:p]   cum_coef <- coef <- matrix(coef.int[1, ], p, 1)   eta <- coef %*% X1   # c_int <- diag(1/epsilon,p) - X1%o%X1/epsilon^2/(1+sum(X1^2)/epsilon)   # cmatrix_inv <- array(c_int, c(p,p,1))   cmatrix <- array(X1 %o% X1 + epsilon * diag(1, p), c(p, p, 1))    for (t in 2:n)   {     m <- length(set)     cval <- rep(NA, m)      for (i in 1:(m - 1))     {       coef_c <- coef[, i]       cum_coef_c <- cum_coef[, i]       # cmatrix_inv_c <- cmatrix_inv[,,i]       cmatrix_c <- cmatrix[, , i]       k <- set[i] + 1       out <- cost_lasso_update(data[t, ], coef_c, cum_coef_c, cmatrix_c, lambda = err_sd_mean * sqrt(2 * log(p) / (t - k + 1)))       coef[, i] <- out[[1]]       cum_coef[, i] <- out[[2]]       # cmatrix_inv[,,i] <- out[[3]]       cmatrix[, , i] <- out[[3]]       if (t - k >= 2) cval[i] <- neg_log_lik_lasso(data[k:t, ], cum_coef[, i] / (t - k + 1), lambda = err_sd_mean * sqrt(2 * log(p) / (t - k + 1))) else cval[i] <- 0     }      # the choice of initial values requires further investigation      cval[m] <- 0     Xt <- data[t, 1:p]     cum_coef_add <- coef_add <- coef.int[index[t], ]     # cmatrix_inv_add <- diag(1/epsilon,p) - Xt%o%Xt/epsilon^2/(1+sum(Xt^2)/epsilon)      coef <- cbind(coef, coef_add)     cum_coef <- cbind(cum_coef, cum_coef_add)     # cmatrix_inv <- abind::abind(cmatrix_inv, cmatrix_inv_add, along=3)     cmatrix <- abind::abind(cmatrix, Xt %o% Xt + epsilon * diag(1, p), along = 3)      obj <- cval + Fobj[set + 1] + beta     min_val <- min(obj)     ind <- which(obj == min_val)[1]     cp_set_add <- c(cp_set[[set[ind] + 1]], set[ind])     cp_set <- append(cp_set, list(cp_set_add))     ind2 <- (cval + Fobj[set + 1]) <= min_val     set <- c(set[ind2], t)     coef <- coef[, ind2, drop = FALSE]     cum_coef <- cum_coef[, ind2, drop = FALSE]     cmatrix <- cmatrix[, , ind2, drop = FALSE]     # cmatrix_inv <- cmatrix_inv[,,ind2,drop=FALSE]     Fobj <- c(Fobj, min_val)   }    # Remove change-points close to the boundaries and merge change-points    cp <- cp_set[[n + 1]]   if (length(cp) > 0) {     ind3 <- (1:length(cp))[(cp < trim * n) | (cp > (1 - trim) * n)]     if (length(ind3) > 0) cp <- cp[-ind3]   }    cp <- sort(unique(c(0, cp)))   index <- which((diff(cp) < trim * n) == TRUE)   if (length(index) > 0) cp <- floor((cp[-(index + 1)] + cp[-index]) / 2)   cp <- cp[cp > 0]    # nLL <- 0   # cp_loc <- unique(c(0,cp,n))   # for(i in 1:(length(cp_loc)-1))   # {   #  seg <- (cp_loc[i]+1):cp_loc[i+1]   #  data_seg <- data[seg,]   #  out <- fastglm(as.matrix(data_seg[, 1:p]), data_seg[, p+1], family=\"binomial\")   #  nLL <- out$deviance/2 + nLL   # }    output <- list(cp)   names(output) <- c(\"cp\")   return(output) }  # Generate data from penalized linear regression models with change-points #' @param n Number of observations. #' @param d Dimension of the covariates. #' @param true.coef True regression coefficients. #' @param true.cp.loc True change-point locations. #' @param Sigma Covariance matrix of the covariates. #' @param evar Error variance. #' @keywords internal #' #' @noRd #' @return A list containing the generated data and the true cluster #'    assignments. data_gen_lasso <- function(n, d, true.coef, true.cp.loc, Sigma, evar) {   loc <- unique(c(0, true.cp.loc, n))   if (dim(true.coef)[2] != length(loc) - 1) stop(\"true.coef and true.cp.loc do not match\")   x <- mvtnorm::rmvnorm(n, mean = rep(0, d), sigma = Sigma)   y <- NULL   for (i in 1:(length(loc) - 1))   {     Xb <- x[(loc[i] + 1):loc[i + 1], , drop = FALSE] %*% true.coef[, i, drop = FALSE]     add <- Xb + rnorm(length(Xb), sd = sqrt(evar))     y <- c(y, add)   }   data <- cbind(x, y)   true_cluster <- rep(1:(length(loc) - 1), diff(loc))   result <- list(data, true_cluster)   return(result) }"},{"path":"https://fastcpd.xingchi.li/articles/comparison-pelt.html","id":"logistic-regression-1","dir":"Articles","previous_headings":"","what":"Logistic regression","title":"Comparison with vanilla PELT","text":"","code":"set.seed(1) p <- 5 x <- matrix(rnorm(300 * p, 0, 1), ncol = p)  # Randomly generate coefficients with different means. theta <- rbind(rnorm(p, 0, 1), rnorm(p, 2, 1))  # Randomly generate response variables based on the segmented data and # corresponding coefficients y <- c(   rbinom(125, 1, 1 / (1 + exp(-x[1:125, ] %*% theta[1, ]))),   rbinom(300 - 125, 1, 1 / (1 + exp(-x[(125 + 1):300, ] %*% theta[2, ]))) )  segd_binomial(cbind(x, y), (p + 1) * log(300) / 2, B = 5)$cp #> [1] 125  fastcpd.binomial(   cbind(y, x),   segment_count = 5,   beta = \"BIC\",   cost_adjustment = \"BIC\",   r.progress = FALSE )@cp_set #> [1] 125  pelt_vanilla_binomial(cbind(x, y), (p + 1) * log(300) / 2)$cp #> [1]   0 125  fastcpd.binomial(   cbind(y, x),   segment_count = 5,   vanilla_percentage = 1,   beta = \"BIC\",   cost_adjustment = \"BIC\",   r.progress = FALSE )@cp_set #> [1] 125"},{"path":"https://fastcpd.xingchi.li/articles/comparison-pelt.html","id":"poisson-regression-1","dir":"Articles","previous_headings":"","what":"Poisson regression","title":"Comparison with vanilla PELT","text":"","code":"set.seed(1) n <- 1500 d <- 5 rho <- 0.9 Sigma <- array(0, c(d, d)) for (i in 1:d) {   Sigma[i, ] <- rho^(abs(i - (1:d))) } delta <- c(5, 7, 9, 11, 13) a.sq <- 1 delta.new <-   delta * sqrt(a.sq) / sqrt(as.numeric(t(delta) %*% Sigma %*% delta)) true.cp.loc <- c(375, 750, 1125)  # regression coefficients true.coef <- matrix(0, nrow = d, ncol = length(true.cp.loc) + 1) true.coef[, 1] <- c(1, 1.2, -1, 0.5, -2) true.coef[, 2] <- true.coef[, 1] + delta.new true.coef[, 3] <- true.coef[, 1] true.coef[, 4] <- true.coef[, 3] - delta.new  out <- data_gen_poisson(n, d, true.coef, true.cp.loc, Sigma) data <- out[[1]] g_tr <- out[[2]] beta <- log(n) * (d + 1) / 2  segd_poisson(   data, beta, trim = 0.03, B = 10, epsilon = 0.001, G = 10^10, L = -20, H = 20 )$cp #> [1]  380  751 1136 1251  fastcpd.poisson(   cbind(data[, d + 1], data[, 1:d]),   beta = beta,   cost_adjustment = \"BIC\",   epsilon = 0.001,   segment_count = 10,   r.progress = FALSE )@cp_set #> [1]  380  751 1136 1251  pelt_vanilla_poisson(data, beta)$cp #> [1]    0  374  752 1133  fastcpd.poisson(   cbind(data[, d + 1], data[, 1:d]),   segment_count = 10,   vanilla_percentage = 1,   beta = beta,   cost_adjustment = \"BIC\",   r.progress = FALSE )@cp_set #> [1]  374  752 1133"},{"path":"https://fastcpd.xingchi.li/articles/comparison-pelt.html","id":"penalized-linear-regression-1","dir":"Articles","previous_headings":"","what":"Penalized linear regression","title":"Comparison with vanilla PELT","text":"","code":"set.seed(1) n <- 1000 s <- 3 d <- 50 evar <- 0.5 Sigma <- diag(1, d) true.cp.loc <- c(100, 300, 500, 800, 900) seg <- length(true.cp.loc) + 1 true.coef <- matrix(rnorm(seg * s), s, seg) true.coef <- rbind(true.coef, matrix(0, d - s, seg)) out <- data_gen_lasso(n, d, true.coef, true.cp.loc, Sigma, evar) data <- out[[1]] beta <- log(n) / 2 # beta here has different meaning  segd_lasso(data, beta, B = 10, trim = 0.025)$cp #> [1] 100 300 520 800 901  fastcpd.lasso(   cbind(data[, d + 1], data[, 1:d]),   epsilon = 1e-5,   beta = beta,   cost_adjustment = \"BIC\",   pruning_coef = 0,   r.progress = FALSE )@cp_set #> [1] 100 300 520 800 901  pelt_vanilla_lasso(data, beta, cost = cost_lasso)$cp #> [1] 100 #> [1] 200 #> [1] 300 #> [1] 400 #> [1] 500 #> [1] 600 #> [1] 700 #> [1] 800 #> [1] 900 #> [1] 1000 #> [1]   0 103 299 510 800 900  fastcpd.lasso(   cbind(data[, d + 1], data[, 1:d]),   vanilla_percentage = 1,   epsilon = 1e-5,   beta = beta,   cost_adjustment = \"BIC\",   pruning_coef = 0,   r.progress = FALSE )@cp_set #> [1] 103 299 510 800 900"},{"path":"https://fastcpd.xingchi.li/articles/comparison-pelt.html","id":"notes","dir":"Articles","previous_headings":"","what":"Notes","title":"Comparison with vanilla PELT","text":"document generated following code:","code":"R -e 'knitr::knit(\"vignettes/comparison-pelt.Rmd.original\", output = \"vignettes/comparison-pelt.Rmd\")'"},{"path":"https://fastcpd.xingchi.li/articles/comparison-pelt.html","id":"appendix-all-code-snippets","dir":"Articles","previous_headings":"","what":"Appendix: all code snippets","title":"Comparison with vanilla PELT","text":"","code":"knitr::opts_chunk$set(   collapse = TRUE, comment = \"#>\", eval = TRUE, cache = FALSE,   warning = FALSE, fig.width = 8, fig.height = 5 ) library(fastcpd) #' Cost function for Logistic regression, i.e. binomial family in GLM. #' #' @param data Data to be used to calculate the cost values. The last column is #'     the response variable. #' @param family Family of the distribution. #' @keywords internal #' #' @noRd #' @return Cost value for the corresponding segment of data. cost_glm_binomial <- function(data, family = \"binomial\") {   data <- as.matrix(data)   p <- dim(data)[2] - 1   out <- fastglm::fastglm(     as.matrix(data[, 1:p]), data[, p + 1],     family = family   )   return(out$deviance / 2) }  #' Implementation of vanilla PELT for logistic regression type data. #' #' @param data Data to be used for change point detection. #' @param beta Penalty coefficient for the number of change points. #' @param cost Cost function to be used to calculate cost values. #' @keywords internal #' #' @noRd #' @return A list consisting of two: change point locations and negative log #'     likelihood values for each segment. pelt_vanilla_binomial <- function(data, beta, cost = cost_glm_binomial) {   n <- dim(data)[1]   p <- dim(data)[2] - 1   Fobj <- c(-beta, 0)   cp_set <- list(NULL, 0)   set <- c(0, 1)   for (t in 2:n)   {     m <- length(set)     cval <- rep(NA, m)     for (i in 1:m)     {       k <- set[i] + 1       cval[i] <- 0       if (t - k >= p - 1) cval[i] <- suppressWarnings(cost(data[k:t, ]))     }     obj <- cval + Fobj[set + 1] + beta     min_val <- min(obj)     ind <- which(obj == min_val)[1]     cp_set_add <- c(cp_set[[set[ind] + 1]], set[ind])     cp_set <- append(cp_set, list(cp_set_add))     ind2 <- (cval + Fobj[set + 1]) <= min_val     set <- c(set[ind2], t)     Fobj <- c(Fobj, min_val)   }   cp <- cp_set[[n + 1]]   nLL <- 0   cp_loc <- unique(c(0, cp, n))   for (i in 1:(length(cp_loc) - 1))   {     seg <- (cp_loc[i] + 1):cp_loc[i + 1]     data_seg <- data[seg, ]     out <- fastglm::fastglm(       as.matrix(data_seg[, 1:p]), data_seg[, p + 1],       family = \"binomial\"     )     nLL <- out$deviance / 2 + nLL   }    output <- list(cp, nLL)   names(output) <- c(\"cp\", \"nLL\")   return(output) }  #' Function to update the coefficients using gradient descent. #' #' @param data_new New data point used to update the coeffient. #' @param coef Previous coeffient to be updated. #' @param cum_coef Summation of all the past coefficients to be used in #'     averaging. #' @param cmatrix Hessian matrix in gradient descent. #' @param epsilon Small adjustment to avoid singularity when doing inverse on #'     the Hessian matrix. #' @keywords internal #' #' @noRd #' @return A list of values containing the new coefficients, summation of #'     coefficients so far and all the Hessian matrices. cost_logistic_update <- function(     data_new, coef, cum_coef, cmatrix, epsilon = 1e-10) {   p <- length(data_new) - 1   X_new <- data_new[1:p]   Y_new <- data_new[p + 1]   eta <- X_new %*% coef   mu <- 1 / (1 + exp(-eta))   cmatrix <- cmatrix + (X_new %o% X_new) * as.numeric((1 - mu) * mu)   lik_dev <- as.numeric(-(Y_new - mu)) * X_new   coef <- coef - solve(cmatrix + epsilon * diag(1, p), lik_dev)   cum_coef <- cum_coef + coef   return(list(coef, cum_coef, cmatrix)) }  #' Calculate negative log likelihood given data segment and guess of #' coefficient. #' #' @param data Data to be used to calculate the negative log likelihood. #' @param b Guess of the coefficient. #' @keywords internal #' #' @noRd #' @return Negative log likelihood. neg_log_lik_binomial <- function(data, b) {   p <- dim(data)[2] - 1   X <- data[, 1:p, drop = FALSE]   Y <- data[, p + 1, drop = FALSE]   u <- as.numeric(X %*% b)   L <- -Y * u + log(1 + exp(u))   return(sum(L)) }  #' Find change points using dynamic programming with pruning and SeGD. #' #' @param data Data used to find change points. #' @param beta Penalty coefficient for the number of change points. #' @param B Initial guess on the number of change points. #' @param trim Propotion of the data to ignore the change points at the #'     beginning, ending and between change points. #' @keywords internal #' #' @noRd #' @return A list containing potential change point locations and negative log #'     likelihood for each segment based on the change points guess. segd_binomial <- function(data, beta, B = 10, trim = 0.025) {   n <- dim(data)[1]   p <- dim(data)[2] - 1   Fobj <- c(-beta, 0)   cp_set <- list(NULL, 0)   set <- c(0, 1)    # choose the initial values based on pre-segmentation    index <- rep(1:B, rep(n / B, B))   coef.int <- matrix(NA, B, p)   for (i in 1:B)   {     out <- fastglm::fastglm(       as.matrix(data[index == i, 1:p]),       data[index == i, p + 1],       family = \"binomial\"     )     coef.int[i, ] <- coef(out)   }   X1 <- data[1, 1:p]   cum_coef <- coef <- matrix(coef.int[1, ], p, 1)   e_eta <- exp(coef %*% X1)   const <- e_eta / (1 + e_eta)^2   cmatrix <- array((X1 %o% X1) * as.numeric(const), c(p, p, 1))    for (t in 2:n)   {     m <- length(set)     cval <- rep(NA, m)      for (i in 1:(m - 1))     {       coef_c <- coef[, i]       cum_coef_c <- cum_coef[, i]       cmatrix_c <- cmatrix[, , i]       out <- cost_logistic_update(data[t, ], coef_c, cum_coef_c, cmatrix_c)       coef[, i] <- out[[1]]       cum_coef[, i] <- out[[2]]       cmatrix[, , i] <- out[[3]]       k <- set[i] + 1       cval[i] <- 0       if (t - k >= p - 1) {         cval[i] <-           neg_log_lik_binomial(data[k:t, ], cum_coef[, i] / (t - k + 1))       }     }      # the choice of initial values requires further investigation      cval[m] <- 0     Xt <- data[t, 1:p]     cum_coef_add <- coef_add <- coef.int[index[t], ]     e_eta_t <- exp(coef_add %*% Xt)     const <- e_eta_t / (1 + e_eta_t)^2     cmatrix_add <- (Xt %o% Xt) * as.numeric(const)      coef <- cbind(coef, coef_add)     cum_coef <- cbind(cum_coef, cum_coef_add)     cmatrix <- abind::abind(cmatrix, cmatrix_add, along = 3)      # Adding a momentum term (TBD)      obj <- cval + Fobj[set + 1] + beta     min_val <- min(obj)     ind <- which(obj == min_val)[1]     cp_set_add <- c(cp_set[[set[ind] + 1]], set[ind])     cp_set <- append(cp_set, list(cp_set_add))     ind2 <- (cval + Fobj[set + 1]) <= min_val     set <- c(set[ind2], t)     coef <- coef[, ind2, drop = FALSE]     cum_coef <- cum_coef[, ind2, drop = FALSE]     cmatrix <- cmatrix[, , ind2, drop = FALSE]     Fobj <- c(Fobj, min_val)   }    # Remove change-points close to the boundaries    cp <- cp_set[[n + 1]]   if (length(cp) > 0) {     ind3 <- (seq_len(length(cp)))[(cp < trim * n) | (cp > (1 - trim) * n)]     cp <- cp[-ind3]   }    nLL <- 0   cp_loc <- unique(c(0, cp, n))   for (i in 1:(length(cp_loc) - 1))   {     seg <- (cp_loc[i] + 1):cp_loc[i + 1]     data_seg <- data[seg, ]     out <- fastglm::fastglm(       as.matrix(data_seg[, 1:p]), data_seg[, p + 1],       family = \"binomial\"     )     nLL <- out$deviance / 2 + nLL   }    output <- list(cp, nLL)   names(output) <- c(\"cp\", \"nLL\")   return(output) } #' Cost function for Poisson regression. #' #' @param data Data to be used to calculate the cost values. The last column is #'     the response variable. #' @param family Family of the distribution. #' @keywords internal #' #' @noRd #' @return Cost value for the corresponding segment of data. cost_glm_poisson <- function(data, family = \"poisson\") {   data <- as.matrix(data)   p <- dim(data)[2] - 1   out <- fastglm::fastglm(as.matrix(data[, 1:p]), data[, p + 1], family = family)   return(out$deviance / 2) }  #' Implementation of vanilla PELT for poisson regression type data. #' #' @param data Data to be used for change point detection. #' @param beta Penalty coefficient for the number of change points. #' @param cost Cost function to be used to calculate cost values. #' @keywords internal #' #' @noRd #' @return A list consisting of two: change point locations and negative log #'     likelihood values for each segment. pelt_vanilla_poisson <- function(data, beta, cost = cost_glm_poisson) {   n <- dim(data)[1]   p <- dim(data)[2] - 1   Fobj <- c(-beta, 0)   cp_set <- list(NULL, 0)   set <- c(0, 1)   for (t in 2:n)   {     m <- length(set)     cval <- rep(NA, m)     for (i in 1:m)     {       k <- set[i] + 1       if (t - k >= p - 1) cval[i] <- suppressWarnings(cost(data[k:t, ])) else cval[i] <- 0     }     obj <- cval + Fobj[set + 1] + beta     min_val <- min(obj)     ind <- which(obj == min_val)[1]     cp_set_add <- c(cp_set[[set[ind] + 1]], set[ind])     cp_set <- append(cp_set, list(cp_set_add))     ind2 <- (cval + Fobj[set + 1]) <= min_val     set <- c(set[ind2], t)     Fobj <- c(Fobj, min_val)     # if (t %% 100 == 0) print(t)   }   cp <- cp_set[[n + 1]]   output <- list(cp)   names(output) <- c(\"cp\")    return(output) }  #' Function to update the coefficients using gradient descent. #' #' @param data_new New data point used to update the coeffient. #' @param coef Previous coeffient to be updated. #' @param cum_coef Summation of all the past coefficients to be used in #'     averaging. #' @param cmatrix Hessian matrix in gradient descent. #' @param epsilon Small adjustment to avoid singularity when doing inverse on #'     the Hessian matrix. #' @param G Upper bound for the coefficient. #' @param L Winsorization lower bound. #' @param H Winsorization upper bound. #' @keywords internal #' #' @noRd #' @return A list of values containing the new coefficients, summation of #'     coefficients so far and all the Hessian matrices. cost_poisson_update <- function(data_new, coef, cum_coef, cmatrix, epsilon = 0.001, G = 10^10, L = -20, H = 20) {   p <- length(data_new) - 1   X_new <- data_new[1:p]   Y_new <- data_new[p + 1]   eta <- X_new %*% coef   mu <- exp(eta)   cmatrix <- cmatrix + (X_new %o% X_new) * min(as.numeric(mu), G)   lik_dev <- as.numeric(-(Y_new - mu)) * X_new   coef <- coef - solve(cmatrix + epsilon * diag(1, p), lik_dev)   coef <- pmin(pmax(coef, L), H)   cum_coef <- cum_coef + coef   return(list(coef, cum_coef, cmatrix)) }  #' Calculate negative log likelihood given data segment and guess of #' coefficient. #' #' @param data Data to be used to calculate the negative log likelihood. #' @param b Guess of the coefficient. #' @keywords internal #' #' @noRd #' @return Negative log likelihood. neg_log_lik_poisson <- function(data, b) {   p <- dim(data)[2] - 1   X <- data[, 1:p, drop = FALSE]   Y <- data[, p + 1, drop = FALSE]   u <- as.numeric(X %*% b)   L <- -Y * u + exp(u) + lfactorial(Y)   return(sum(L)) }  #' Find change points using dynamic programming with pruning and SeGD. #' #' @param data Data used to find change points. #' @param beta Penalty coefficient for the number of change points. #' @param B Initial guess on the number of change points. #' @param trim Propotion of the data to ignore the change points at the #'     beginning, ending and between change points. #' @param epsilon Small adjustment to avoid singularity when doing inverse on #'    the Hessian matrix. #' @param G Upper bound for the coefficient. #' @param L Winsorization lower bound. #' @param H Winsorization upper bound. #' @keywords internal #' #' @noRd #' @return A list containing potential change point locations and negative log #'     likelihood for each segment based on the change points guess. segd_poisson <- function(data, beta, B = 10, trim = 0.03, epsilon = 0.001, G = 10^10, L = -20, H = 20) {   n <- dim(data)[1]   p <- dim(data)[2] - 1   Fobj <- c(-beta, 0)   cp_set <- list(NULL, 0)   set <- c(0, 1)    # choose the initial values based on pre-segmentation    index <- rep(1:B, rep(n / B, B))   coef.int <- matrix(NA, B, p)   for (i in 1:B)   {     out <- fastglm::fastglm(x = as.matrix(data[index == i, 1:p]), y = data[index == i, p + 1], family = \"poisson\")     coef.int[i, ] <- coef(out)   }   X1 <- data[1, 1:p]   cum_coef <- coef <- pmin(pmax(matrix(coef.int[1, ], p, 1), L), H)   e_eta <- exp(coef %*% X1)   const <- e_eta   cmatrix <- array((X1 %o% X1) * as.numeric(const), c(p, p, 1))    for (t in 2:n)   {     m <- length(set)     cval <- rep(NA, m)     for (i in 1:(m - 1))     {       coef_c <- coef[, i]       cum_coef_c <- cum_coef[, i]       cmatrix_c <- cmatrix[, , i]       out <- cost_poisson_update(data[t, ], coef_c, cum_coef_c, cmatrix_c, epsilon = epsilon, G = G, L = L, H = H)       coef[, i] <- out[[1]]       cum_coef[, i] <- out[[2]]       cmatrix[, , i] <- out[[3]]       k <- set[i] + 1       cum_coef_win <- pmin(pmax(cum_coef[, i] / (t - k + 1), L), H)       if (t - k >= p - 1) cval[i] <- neg_log_lik_poisson(data[k:t, ], cum_coef_win) else cval[i] <- 0     }      # the choice of initial values requires further investigation      cval[m] <- 0     Xt <- data[t, 1:p]     cum_coef_add <- coef_add <- pmin(pmax(coef.int[index[t], ], L), H)     e_eta_t <- exp(coef_add %*% Xt)     const <- e_eta_t     cmatrix_add <- (Xt %o% Xt) * as.numeric(const)     coef <- cbind(coef, coef_add)     cum_coef <- cbind(cum_coef, cum_coef_add)     cmatrix <- abind::abind(cmatrix, cmatrix_add, along = 3)      # Adding a momentum term (TBD)      obj <- cval + Fobj[set + 1] + beta     min_val <- min(obj)     ind <- which(obj == min_val)[1]     cp_set_add <- c(cp_set[[set[ind] + 1]], set[ind])     cp_set <- append(cp_set, list(cp_set_add))     ind2 <- (cval + Fobj[set + 1]) <= min_val     set <- c(set[ind2], t)     coef <- coef[, ind2, drop = FALSE]     cum_coef <- cum_coef[, ind2, drop = FALSE]     cmatrix <- cmatrix[, , ind2, drop = FALSE]     Fobj <- c(Fobj, min_val)   }    # Remove change-points close to the boundaries    cp <- cp_set[[n + 1]]   if (length(cp) > 0) {     ind3 <- (1:length(cp))[(cp < trim * n) | (cp > (1 - trim) * n)]     if (length(ind3) > 0) cp <- cp[-ind3]   }    cp <- sort(unique(c(0, cp)))   index <- which((diff(cp) < trim * n) == TRUE)   if (length(index) > 0) cp <- floor((cp[-(index + 1)] + cp[-index]) / 2)   cp <- cp[cp > 0]    # nLL <- 0   # cp_loc <- unique(c(0,cp,n))   # for(i in 1:(length(cp_loc)-1))   # {   #   seg <- (cp_loc[i]+1):cp_loc[i+1]   #   data_seg <- data[seg,]   #   out <- fastglm(as.matrix(data_seg[, 1:p]), data_seg[, p+1], family=\"Poisson\")   #   nLL <- out$deviance/2 + nLL   # }    # output <- list(cp, nLL)   # names(output) <- c(\"cp\", \"nLL\")    output <- list(cp)   names(output) <- c(\"cp\")    return(output) }  # Generate data from poisson regression models with change-points #' @param n Number of observations. #' @param d Dimension of the covariates. #' @param true.coef True regression coefficients. #' @param true.cp.loc True change-point locations. #' @param Sigma Covariance matrix of the covariates. #' @keywords internal #' #' @noRd #' @return A list containing the generated data and the true cluster #'    assignments. data_gen_poisson <- function(n, d, true.coef, true.cp.loc, Sigma) {   loc <- unique(c(0, true.cp.loc, n))   if (dim(true.coef)[2] != length(loc) - 1) stop(\"true.coef and true.cp.loc do not match\")   x <- mvtnorm::rmvnorm(n, mean = rep(0, d), sigma = Sigma)   y <- NULL   for (i in 1:(length(loc) - 1))   {     mu <- exp(x[(loc[i] + 1):loc[i + 1], , drop = FALSE] %*% true.coef[, i, drop = FALSE])     group <- rpois(length(mu), mu)     y <- c(y, group)   }   data <- cbind(x, y)   true_cluster <- rep(1:(length(loc) - 1), diff(loc))   result <- list(data, true_cluster)   return(result) } #' Cost function for penalized linear regression. #' #' @param data Data to be used to calculate the cost values. The last column is #'     the response variable. #' @param lambda Penalty coefficient. #' @param family Family of the distribution. #' @keywords internal #' #' @noRd #' @return Cost value for the corresponding segment of data. cost_lasso <- function(data, lambda, family = \"gaussian\") {   data <- as.matrix(data)   n <- dim(data)[1]   p <- dim(data)[2] - 1   out <- glmnet::glmnet(as.matrix(data[, 1:p]), data[, p + 1], family = family, lambda = lambda)   return(deviance(out) / 2) }  #' Implementation of vanilla PELT for penalized linear regression type data. #' #' @param data Data to be used for change point detection. #' @param beta Penalty coefficient for the number of change points. #' @param B Initial guess on the number of change points. #' @param cost Cost function to be used to calculate cost values. #' @param family Family of the distribution. #' @keywords internal #' #' @noRd #' @return A list consisting of two: change point locations and negative log #'     likelihood values for each segment. pelt_vanilla_lasso <- function(data, beta, B = 10, cost = cost_lasso, family = \"gaussian\") {   n <- dim(data)[1]   p <- dim(data)[2] - 1   index <- rep(1:B, rep(n / B, B))   err_sd <- act_num <- rep(NA, B)   for (i in 1:B)   {     cvfit <- glmnet::cv.glmnet(as.matrix(data[index == i, 1:p]), data[index == i, p + 1], family = family)     coef <- coef(cvfit, s = \"lambda.1se\")[-1]     resi <- data[index == i, p + 1] - as.matrix(data[index == i, 1:p]) %*% as.numeric(coef)     err_sd[i] <- sqrt(mean(resi^2))     act_num[i] <- sum(abs(coef) > 0)   }   err_sd_mean <- mean(err_sd) # only works if error sd is unchanged.   act_num_mean <- mean(act_num)   beta <- (act_num_mean + 1) * beta # seems to work but there might be better choices    Fobj <- c(-beta, 0)   cp_set <- list(NULL, 0)   set <- c(0, 1)   for (t in 2:n)   {     m <- length(set)     cval <- rep(NA, m)     for (i in 1:m)     {       k <- set[i] + 1       if (t - k >= 1) cval[i] <- suppressWarnings(cost(data[k:t, ], lambda = err_sd_mean * sqrt(2 * log(p) / (t - k + 1)))) else cval[i] <- 0     }     obj <- cval + Fobj[set + 1] + beta     min_val <- min(obj)     ind <- which(obj == min_val)[1]     cp_set_add <- c(cp_set[[set[ind] + 1]], set[ind])     cp_set <- append(cp_set, list(cp_set_add))     ind2 <- (cval + Fobj[set + 1]) <= min_val     set <- c(set[ind2], t)     Fobj <- c(Fobj, min_val)     if (t %% 100 == 0) print(t)   }   cp <- cp_set[[n + 1]]   # nLL <- 0   # cp_loc <- unique(c(0,cp,n))   # for(i in 1:(length(cp_loc)-1))   # {   #  seg <- (cp_loc[i]+1):cp_loc[i+1]   #  data_seg <- data[seg,]   #  out <- glmnet(as.matrix(data_seg[, 1:p]), data_seg[, p+1], lambda=lambda, family=family)   #  nLL <- deviance(out)/2 + nLL   # }   # output <- list(cp, nLL)   output <- list(cp)   names(output) <- c(\"cp\")   return(output) }  #' Function to update the coefficients using gradient descent. #' @param a Coefficient to be updated. #' @param lambda Penalty coefficient. #' @keywords internal #' #' @noRd #' @return Updated coefficient. soft_threshold <- function(a, lambda) {   sign(a) * pmax(abs(a) - lambda, 0) }  #' Function to update the coefficients using gradient descent. #' #' @param data_new New data point used to update the coeffient. #' @param coef Previous coeffient to be updated. #' @param cum_coef Summation of all the past coefficients to be used in #'     averaging. #' @param cmatrix Hessian matrix in gradient descent. #' @param lambda Penalty coefficient. #' @keywords internal #' #' @noRd #' @return A list of values containing the new coefficients, summation of #'     coefficients so far and all the Hessian matrices. cost_lasso_update <- function(data_new, coef, cum_coef, cmatrix, lambda) {   p <- length(data_new) - 1   X_new <- data_new[1:p]   Y_new <- data_new[p + 1]   mu <- X_new %*% coef   cmatrix <- cmatrix + X_new %o% X_new   # B <- as.vector(cmatrix_inv%*%X_new)   # cmatrix_inv <- cmatrix_inv - B%o%B/(1+sum(X_new*B))   lik_dev <- as.numeric(-(Y_new - mu)) * X_new   coef <- coef - solve(cmatrix, lik_dev)   nc <- norm(cmatrix, type = \"F\") # the choice of norm affects the speed. Spectral norm is more accurate but slower than F norm.   coef <- soft_threshold(coef, lambda / nc)   cum_coef <- cum_coef + coef   return(list(coef, cum_coef, cmatrix)) }  #' Calculate negative log likelihood given data segment and guess of #' coefficient. #' #' @param data Data to be used to calculate the negative log likelihood. #' @param b Guess of the coefficient. #' @param lambda Penalty coefficient. #' @keywords internal #' #' @noRd #' @return Negative log likelihood. neg_log_lik_lasso <- function(data, b, lambda) {   p <- dim(data)[2] - 1   X <- data[, 1:p, drop = FALSE]   Y <- data[, p + 1, drop = FALSE]   resi <- Y - X %*% b   L <- sum(resi^2) / 2 + lambda * sum(abs(b))   return(L) }  #' Find change points using dynamic programming with pruning and SeGD. #' #' @param data Data used to find change points. #' @param beta Penalty coefficient for the number of change points. #' @param B Initial guess on the number of change points. #' @param trim Propotion of the data to ignore the change points at the #'     beginning, ending and between change points. #' @param epsilon Small adjustment to avoid singularity when doing inverse on #'    the Hessian matrix. #' @param family Family of the distribution. #' @keywords internal #' #' @noRd #' @return A list containing potential change point locations and negative log #'     likelihood for each segment based on the change points guess. segd_lasso <- function(data, beta, B = 10, trim = 0.025, epsilon = 1e-5, family = \"gaussian\") {   n <- dim(data)[1]   p <- dim(data)[2] - 1   Fobj <- c(-beta, 0)   cp_set <- list(NULL, 0)   set <- c(0, 1)    # choose the initial values based on pre-segmentation    index <- rep(1:B, rep(n / B, B))   coef.int <- matrix(NA, B, p)   err_sd <- act_num <- rep(NA, B)   for (i in 1:B)   {     cvfit <- glmnet::cv.glmnet(as.matrix(data[index == i, 1:p]), data[index == i, p + 1], family = family)     coef.int[i, ] <- coef(cvfit, s = \"lambda.1se\")[-1]     resi <- data[index == i, p + 1] - as.matrix(data[index == i, 1:p]) %*% as.numeric(coef.int[i, ])     err_sd[i] <- sqrt(mean(resi^2))     act_num[i] <- sum(abs(coef.int[i, ]) > 0)   }   err_sd_mean <- mean(err_sd) # only works if error sd is unchanged.   act_num_mean <- mean(act_num)   beta <- (act_num_mean + 1) * beta # seems to work but there might be better choices    X1 <- data[1, 1:p]   cum_coef <- coef <- matrix(coef.int[1, ], p, 1)   eta <- coef %*% X1   # c_int <- diag(1/epsilon,p) - X1%o%X1/epsilon^2/(1+sum(X1^2)/epsilon)   # cmatrix_inv <- array(c_int, c(p,p,1))   cmatrix <- array(X1 %o% X1 + epsilon * diag(1, p), c(p, p, 1))    for (t in 2:n)   {     m <- length(set)     cval <- rep(NA, m)      for (i in 1:(m - 1))     {       coef_c <- coef[, i]       cum_coef_c <- cum_coef[, i]       # cmatrix_inv_c <- cmatrix_inv[,,i]       cmatrix_c <- cmatrix[, , i]       k <- set[i] + 1       out <- cost_lasso_update(data[t, ], coef_c, cum_coef_c, cmatrix_c, lambda = err_sd_mean * sqrt(2 * log(p) / (t - k + 1)))       coef[, i] <- out[[1]]       cum_coef[, i] <- out[[2]]       # cmatrix_inv[,,i] <- out[[3]]       cmatrix[, , i] <- out[[3]]       if (t - k >= 2) cval[i] <- neg_log_lik_lasso(data[k:t, ], cum_coef[, i] / (t - k + 1), lambda = err_sd_mean * sqrt(2 * log(p) / (t - k + 1))) else cval[i] <- 0     }      # the choice of initial values requires further investigation      cval[m] <- 0     Xt <- data[t, 1:p]     cum_coef_add <- coef_add <- coef.int[index[t], ]     # cmatrix_inv_add <- diag(1/epsilon,p) - Xt%o%Xt/epsilon^2/(1+sum(Xt^2)/epsilon)      coef <- cbind(coef, coef_add)     cum_coef <- cbind(cum_coef, cum_coef_add)     # cmatrix_inv <- abind::abind(cmatrix_inv, cmatrix_inv_add, along=3)     cmatrix <- abind::abind(cmatrix, Xt %o% Xt + epsilon * diag(1, p), along = 3)      obj <- cval + Fobj[set + 1] + beta     min_val <- min(obj)     ind <- which(obj == min_val)[1]     cp_set_add <- c(cp_set[[set[ind] + 1]], set[ind])     cp_set <- append(cp_set, list(cp_set_add))     ind2 <- (cval + Fobj[set + 1]) <= min_val     set <- c(set[ind2], t)     coef <- coef[, ind2, drop = FALSE]     cum_coef <- cum_coef[, ind2, drop = FALSE]     cmatrix <- cmatrix[, , ind2, drop = FALSE]     # cmatrix_inv <- cmatrix_inv[,,ind2,drop=FALSE]     Fobj <- c(Fobj, min_val)   }    # Remove change-points close to the boundaries and merge change-points    cp <- cp_set[[n + 1]]   if (length(cp) > 0) {     ind3 <- (1:length(cp))[(cp < trim * n) | (cp > (1 - trim) * n)]     if (length(ind3) > 0) cp <- cp[-ind3]   }    cp <- sort(unique(c(0, cp)))   index <- which((diff(cp) < trim * n) == TRUE)   if (length(index) > 0) cp <- floor((cp[-(index + 1)] + cp[-index]) / 2)   cp <- cp[cp > 0]    # nLL <- 0   # cp_loc <- unique(c(0,cp,n))   # for(i in 1:(length(cp_loc)-1))   # {   #  seg <- (cp_loc[i]+1):cp_loc[i+1]   #  data_seg <- data[seg,]   #  out <- fastglm(as.matrix(data_seg[, 1:p]), data_seg[, p+1], family=\"binomial\")   #  nLL <- out$deviance/2 + nLL   # }    output <- list(cp)   names(output) <- c(\"cp\")   return(output) }  # Generate data from penalized linear regression models with change-points #' @param n Number of observations. #' @param d Dimension of the covariates. #' @param true.coef True regression coefficients. #' @param true.cp.loc True change-point locations. #' @param Sigma Covariance matrix of the covariates. #' @param evar Error variance. #' @keywords internal #' #' @noRd #' @return A list containing the generated data and the true cluster #'    assignments. data_gen_lasso <- function(n, d, true.coef, true.cp.loc, Sigma, evar) {   loc <- unique(c(0, true.cp.loc, n))   if (dim(true.coef)[2] != length(loc) - 1) stop(\"true.coef and true.cp.loc do not match\")   x <- mvtnorm::rmvnorm(n, mean = rep(0, d), sigma = Sigma)   y <- NULL   for (i in 1:(length(loc) - 1))   {     Xb <- x[(loc[i] + 1):loc[i + 1], , drop = FALSE] %*% true.coef[, i, drop = FALSE]     add <- Xb + rnorm(length(Xb), sd = sqrt(evar))     y <- c(y, add)   }   data <- cbind(x, y)   true_cluster <- rep(1:(length(loc) - 1), diff(loc))   result <- list(data, true_cluster)   return(result) } set.seed(1) p <- 5 x <- matrix(rnorm(300 * p, 0, 1), ncol = p)  # Randomly generate coefficients with different means. theta <- rbind(rnorm(p, 0, 1), rnorm(p, 2, 1))  # Randomly generate response variables based on the segmented data and # corresponding coefficients y <- c(   rbinom(125, 1, 1 / (1 + exp(-x[1:125, ] %*% theta[1, ]))),   rbinom(300 - 125, 1, 1 / (1 + exp(-x[(125 + 1):300, ] %*% theta[2, ]))) )  segd_binomial(cbind(x, y), (p + 1) * log(300) / 2, B = 5)$cp  fastcpd.binomial(   cbind(y, x),   segment_count = 5,   beta = \"BIC\",   cost_adjustment = \"BIC\",   r.progress = FALSE )@cp_set  pelt_vanilla_binomial(cbind(x, y), (p + 1) * log(300) / 2)$cp  fastcpd.binomial(   cbind(y, x),   segment_count = 5,   vanilla_percentage = 1,   beta = \"BIC\",   cost_adjustment = \"BIC\",   r.progress = FALSE )@cp_set set.seed(1) n <- 1500 d <- 5 rho <- 0.9 Sigma <- array(0, c(d, d)) for (i in 1:d) {   Sigma[i, ] <- rho^(abs(i - (1:d))) } delta <- c(5, 7, 9, 11, 13) a.sq <- 1 delta.new <-   delta * sqrt(a.sq) / sqrt(as.numeric(t(delta) %*% Sigma %*% delta)) true.cp.loc <- c(375, 750, 1125)  # regression coefficients true.coef <- matrix(0, nrow = d, ncol = length(true.cp.loc) + 1) true.coef[, 1] <- c(1, 1.2, -1, 0.5, -2) true.coef[, 2] <- true.coef[, 1] + delta.new true.coef[, 3] <- true.coef[, 1] true.coef[, 4] <- true.coef[, 3] - delta.new  out <- data_gen_poisson(n, d, true.coef, true.cp.loc, Sigma) data <- out[[1]] g_tr <- out[[2]] beta <- log(n) * (d + 1) / 2  segd_poisson(   data, beta, trim = 0.03, B = 10, epsilon = 0.001, G = 10^10, L = -20, H = 20 )$cp  fastcpd.poisson(   cbind(data[, d + 1], data[, 1:d]),   beta = beta,   cost_adjustment = \"BIC\",   epsilon = 0.001,   segment_count = 10,   r.progress = FALSE )@cp_set  pelt_vanilla_poisson(data, beta)$cp  fastcpd.poisson(   cbind(data[, d + 1], data[, 1:d]),   segment_count = 10,   vanilla_percentage = 1,   beta = beta,   cost_adjustment = \"BIC\",   r.progress = FALSE )@cp_set set.seed(1) n <- 1000 s <- 3 d <- 50 evar <- 0.5 Sigma <- diag(1, d) true.cp.loc <- c(100, 300, 500, 800, 900) seg <- length(true.cp.loc) + 1 true.coef <- matrix(rnorm(seg * s), s, seg) true.coef <- rbind(true.coef, matrix(0, d - s, seg)) out <- data_gen_lasso(n, d, true.coef, true.cp.loc, Sigma, evar) data <- out[[1]] beta <- log(n) / 2 # beta here has different meaning  segd_lasso(data, beta, B = 10, trim = 0.025)$cp  fastcpd.lasso(   cbind(data[, d + 1], data[, 1:d]),   epsilon = 1e-5,   beta = beta,   cost_adjustment = \"BIC\",   pruning_coef = 0,   r.progress = FALSE )@cp_set  pelt_vanilla_lasso(data, beta, cost = cost_lasso)$cp  fastcpd.lasso(   cbind(data[, d + 1], data[, 1:d]),   vanilla_percentage = 1,   epsilon = 1e-5,   beta = beta,   cost_adjustment = \"BIC\",   pruning_coef = 0,   r.progress = FALSE )@cp_set"},{"path":"https://fastcpd.xingchi.li/articles/examples-advanced.html","id":"vanilla-percentage","dir":"Articles","previous_headings":"","what":"Vanilla percentage","title":"Advanced examples","text":"","code":"result_vanilla_percentage <- fastcpd.lasso(   small_lasso, segment_count = 2, vanilla_percentage = 0.5,   r.progress = FALSE ) summary(result_vanilla_percentage) #>  #> Call: #> fastcpd.lasso(data = small_lasso, segment_count = 2, vanilla_percentage = 0.5,  #>     r.progress = FALSE) #>  #> Change points: #> 74 150  #>  #> Cost values: #> 404.3949 296.7204 1162.25  #>  #> Parameters: #> 40 x 3 sparse Matrix of class \"dgCMatrix\" #>       segment 1 segment 2 segment 3 #>  [1,] 0.2835972  3.208983 0.4299211 #>  [2,] 1.0913097 -1.306468 0.3019345 #>  [3,] 2.0550480  0.697885 .         #>  [4,] 0.2928737 -2.771848 1.4996787 #>  [5,] .          .        .         #>  [6,] .          .        .         #>  [7,] .          .        .         #>  [8,] .          .        .         #>  [9,] .          .        .         #> [10,] .          .        .         #> [11,] .          .        .         #> [12,] .          .        .         #> [13,] .          .        .         #> [14,] .          .        .         #> [15,] .          .        .         #> [16,] .          .        .         #> [17,] .          .        .         #> [18,] .          .        .         #> [19,] .          .        .         #> [20,] .          .        .         #> [21,] .          .        .         #> [22,] .          .        .         #> [23,] .          .        .         #> [24,] .          .        .         #> [25,] .          .        .         #> [26,] .          .        .         #> [27,] .          .        .         #> [28,] .          .        .         #> [29,] .          .        .         #> [30,] .          .        .         #> [31,] .          .        .         #> [32,] .          .        .         #> [33,] .          .        .         #> [34,] .          .        .         #> [35,] .          .        .         #> [36,] .          .        .         #> [37,] .          .        .         #> [38,] .          .        .         #> [39,] .          .        .         #> [40,] .          .        ."},{"path":"https://fastcpd.xingchi.li/articles/examples-advanced.html","id":"multiple-epochs","dir":"Articles","previous_headings":"","what":"Multiple epochs","title":"Advanced examples","text":"","code":"result_multiple_epochs <- fastcpd.lasso(   small_lasso,   segment_count = 2,   multiple_epochs = function(segment_length) {     if (segment_length < 25) 1 else 0   },   r.progress = FALSE ) summary(result_multiple_epochs) #>  #> Call: #> fastcpd.lasso(data = small_lasso, segment_count = 2, multiple_epochs = function(segment_length) { #>     if (segment_length < 25)  #>         1 #>     else 0 #> }, r.progress = FALSE) #>  #> Change points: #> 74 151 227  #>  #> Cost values: #> 404.3949 323.0533 394.7117 245.3975  #>  #> Parameters: #> 40 x 4 sparse Matrix of class \"dgCMatrix\" #>       segment 1 segment 2 segment 3 segment 4 #>  [1,] 0.2835972  3.269615 0.9960117 .         #>  [2,] 1.0913097 -1.089741 1.6936173 .         #>  [3,] 2.0550480  0.896723 1.5956191 .         #>  [4,] 0.2928737 -2.769824 2.1702226 0.1701821 #>  [5,] .          .        .         .         #>  [6,] .          .        .         .         #>  [7,] .          .        .         .         #>  [8,] .          .        .         .         #>  [9,] .          .        .         .         #> [10,] .          .        .         .         #> [11,] .          .        .         .         #> [12,] .          .        .         .         #> [13,] .          .        .         .         #> [14,] .          .        .         .         #> [15,] .          .        .         .         #> [16,] .          .        .         .         #> [17,] .          .        .         .         #> [18,] .          .        .         .         #> [19,] .          .        .         .         #> [20,] .          .        .         .         #> [21,] .          .        .         .         #> [22,] .          .        .         .         #> [23,] .          .        .         .         #> [24,] .          .        .         .         #> [25,] .          .        .         .         #> [26,] .          .        .         .         #> [27,] .          .        .         .         #> [28,] .          .        .         .         #> [29,] .          .        .         .         #> [30,] .          .        .         .         #> [31,] .          .        .         .         #> [32,] .          .        .         .         #> [33,] .          .        .         .         #> [34,] .          .        .         .         #> [35,] .          .        .         .         #> [36,] .          .        .         .         #> [37,] .          .        .         .         #> [38,] .          .        .         .         #> [39,] .          .        .         .         #> [40,] .          .        .         ."},{"path":"https://fastcpd.xingchi.li/articles/examples-advanced.html","id":"notes","dir":"Articles","previous_headings":"","what":"Notes","title":"Advanced examples","text":"document generated following code:","code":"R -e 'knitr::knit(\"vignettes/examples-advanced.Rmd.original\", output = \"vignettes/examples-advanced.Rmd\")'"},{"path":"https://fastcpd.xingchi.li/articles/examples-advanced.html","id":"appendix-all-code-snippets","dir":"Articles","previous_headings":"","what":"Appendix: all code snippets","title":"Advanced examples","text":"","code":"knitr::opts_chunk$set(   collapse = TRUE, comment = \"#>\", eval = TRUE, warning = FALSE ) library(fastcpd) set.seed(1) n <- 300 p_true <- 4 p <- 40 x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p)) theta_0 <- rbind(   runif(p_true, 1, 4),   runif(p_true, -5, 5),   runif(p_true, 1, 4),   runif(p_true, -3, 3) ) theta_0 <- cbind(theta_0, matrix(0, ncol = p - p_true, nrow = 4)) y <- c(   x[1:(n * 0.25), ] %*% theta_0[1, ] + rnorm(n * 0.25),   x[(n * 0.25 + 1):(n * 0.5), ] %*% theta_0[2, ] + rnorm(n * 0.25),   x[(n * 0.5 + 1):(n * 0.75), ] %*% theta_0[3, ] + rnorm(n * 0.25),   x[(n * 0.75 + 1):n, ] %*% theta_0[4, ] + rnorm(n * 0.25) ) small_lasso <- cbind.data.frame(y, x) result <- fastcpd.lasso(small_lasso, segment_count = 2, r.progress = FALSE) summary(result) set.seed(1) n <- 300 p_true <- 4 p <- 40 x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p)) theta_0 <- rbind(   runif(p_true, 1, 4),   runif(p_true, -5, 5),   runif(p_true, 1, 4),   runif(p_true, -3, 3) ) theta_0 <- cbind(theta_0, matrix(0, ncol = p - p_true, nrow = 4)) y <- c(   x[1:(n * 0.25), ] %*% theta_0[1, ] + rnorm(n * 0.25),   x[(n * 0.25 + 1):(n * 0.5), ] %*% theta_0[2, ] + rnorm(n * 0.25),   x[(n * 0.5 + 1):(n * 0.75), ] %*% theta_0[3, ] + rnorm(n * 0.25),   x[(n * 0.75 + 1):n, ] %*% theta_0[4, ] + rnorm(n * 0.25) ) small_lasso <- cbind.data.frame(y, x) result_vanilla_percentage <- fastcpd.lasso(   small_lasso, segment_count = 2, vanilla_percentage = 0.5,   r.progress = FALSE ) summary(result_vanilla_percentage) set.seed(1) n <- 300 p_true <- 4 p <- 40 x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p)) theta_0 <- rbind(   runif(p_true, 1, 4),   runif(p_true, -5, 5),   runif(p_true, 1, 4),   runif(p_true, -3, 3) ) theta_0 <- cbind(theta_0, matrix(0, ncol = p - p_true, nrow = 4)) y <- c(   x[1:(n * 0.25), ] %*% theta_0[1, ] + rnorm(n * 0.25),   x[(n * 0.25 + 1):(n * 0.5), ] %*% theta_0[2, ] + rnorm(n * 0.25),   x[(n * 0.5 + 1):(n * 0.75), ] %*% theta_0[3, ] + rnorm(n * 0.25),   x[(n * 0.75 + 1):n, ] %*% theta_0[4, ] + rnorm(n * 0.25) ) small_lasso <- cbind.data.frame(y, x) result_multiple_epochs <- fastcpd.lasso(   small_lasso,   segment_count = 2,   multiple_epochs = function(segment_length) {     if (segment_length < 25) 1 else 0   },   r.progress = FALSE ) summary(result_multiple_epochs)"},{"path":"https://fastcpd.xingchi.li/articles/examples-custom-model.html","id":"notes","dir":"Articles","previous_headings":"","what":"Notes","title":"Custom logistic regression model","text":"document generated following code:","code":"R -e 'knitr::knit(\"vignettes/examples-custom-model.Rmd.original\", output = \"vignettes/examples-custom-model.Rmd\")'"},{"path":"https://fastcpd.xingchi.li/articles/examples-custom-model.html","id":"appendix-all-code-snippets","dir":"Articles","previous_headings":"","what":"Appendix: all code snippets","title":"Custom logistic regression model","text":"","code":"knitr::opts_chunk$set(   collapse = TRUE, comment = \"#>\", eval = TRUE, warning = FALSE ) library(fastcpd) set.seed(1) x <- matrix(rnorm(2000, 0, 1), ncol = 5) theta <- rbind(rnorm(5, 0, 1), rnorm(5, 2, 1)) y <- c(   rbinom(250, 1, 1 / (1 + exp(-x[1:250, ] %*% theta[1, ]))),   rbinom(150, 1, 1 / (1 + exp(-x[251:400, ] %*% theta[2, ]))) ) binomial_data <- data.frame(y = y, x = x)  result <- fastcpd.binomial(cbind(y, x), r.progress = FALSE, cost_adjustment = NULL) summary(result) logistic_loss <- function(data, theta) {   x <- data[, -1]   y <- data[, 1]   u <- x %*% theta   nll <- -y * u + log(1 + exp(u))   nll[u > 10] <- -y[u > 10] * u[u > 10] + u[u > 10]   sum(nll) } logistic_gradient <- function(data, theta) {   x <- data[nrow(data), -1]   y <- data[nrow(data), 1]   c(-(y - 1 / (1 + exp(-x %*% theta)))) * x } logistic_hessian <- function(data, theta) {   x <- data[nrow(data), -1]   prob <- 1 / (1 + exp(-x %*% theta))   (x %o% x) * c((1 - prob) * prob) } result <- fastcpd(   y ~ . - 1, binomial_data, epsilon = 1e-5, cost = logistic_loss,   cost_gradient = logistic_gradient, cost_hessian = logistic_hessian,   r.progress = FALSE ) summary(result)"},{"path":"https://fastcpd.xingchi.li/articles/exploration-during-development.html","id":"exploration-of-the-qmle-method-for-arma-models","dir":"Articles","previous_headings":"","what":"Exploration of the QMLE method for ARMA models","title":"Exploration during development","text":"","code":"qmle <- function(data, theta, p = 1, q = 1) {   if (nrow(data) < max(p, q) + 1) {     return(0)   }   variance_term <- rep(0, nrow(data))   for (i in (max(p, q) + 1):nrow(data)) {     variance_term[i] <-       data[i] -       theta[1:p] %*% data[(i - 1):(i - p)] -       theta[(p + 1):(p + q)] %*% variance_term[(i - 1):(i - q)]   }   (log(2 * pi) + log(theta[p + q + 1])) * (nrow(data) - q) / 2 +     sum(variance_term^2) / (2 * theta[p + q + 1]) } qmle_gradient <- function(data, theta, p = 1, q = 1) {   if (nrow(data) < max(p, q) + 1) {     return(rep(1, length(theta)))   }   variance_term <- rep(0, nrow(data))   for (i in (max(p, q) + 1):nrow(data)) {     variance_term[i] <-       data[i] -       theta[1:p] %*% data[(i - 1):(i - p)] -       theta[(p + 1):(p + q)] %*% variance_term[(i - 1):(i - q)]   }   phi_coefficient <- matrix(0, nrow(data), p)   psi_coefficient <- matrix(0, nrow(data), q)   for (i in (max(p, q) + 1):nrow(data)) {     phi_coefficient[i, ] <-       -data[(i - 1):(i - p)] -       theta[(p + 1):(p + q)] %*% phi_coefficient[(i - 1):(i - q), ]   }   for (i in (q + 1):nrow(data)) {     psi_coefficient[i, ] <-       -variance_term[(i - 1):(i - q)] -       theta[(p + 1):(p + q)] %*% psi_coefficient[(i - 1):(i - q), ]   }   c(     phi_coefficient[nrow(data), ] * variance_term[nrow(data)] /       theta[p + q + 1],     psi_coefficient[nrow(data), ] * variance_term[nrow(data)] /       theta[p + q + 1],     1 / 2 / theta[p + q + 1] -       variance_term[nrow(data)]^2 / (2 * theta[p + q + 1]^2)   ) } qmle_gradient_sum <- function(data, theta, p = 1, q = 1) {   if (nrow(data) < max(p, q) + 1) {     return(rep(1, length(theta)))   }   variance_term <- rep(0, nrow(data))   for (i in (max(p, q) + 1):nrow(data)) {     variance_term[i] <-       data[i] -       theta[1:p] %*% data[(i - 1):(i - p)] -       theta[(p + 1):(p + q)] %*% variance_term[(i - 1):(i - q)]   }   phi_coefficient <- matrix(0, nrow(data), p)   psi_coefficient <- matrix(0, nrow(data), q)   for (i in (max(p, q) + 1):nrow(data)) {     phi_coefficient[i, ] <-       -data[(i - 1):(i - p)] -       theta[(p + 1):(p + q)] %*% phi_coefficient[(i - 1):(i - q), ]   }   for (i in (q + 1):nrow(data)) {     psi_coefficient[i, ] <-       -variance_term[(i - 1):(i - q)] -       theta[(p + 1):(p + q)] %*% psi_coefficient[(i - 1):(i - q), ]   }   c(     crossprod(phi_coefficient, variance_term) / theta[p + q + 1],     crossprod(psi_coefficient, variance_term) / theta[p + q + 1],     (nrow(data) - q) / 2 / theta[p + q + 1] -       crossprod(variance_term) / 2 / theta[p + q + 1]^2   ) } qmle_hessian <- function(data, theta, p = 1, q = 1) {   if (nrow(data) < max(p, q) + 1) {     return(diag(length(theta)))   }   variance_term <- rep(0, nrow(data))   for (i in (max(p, q) + 1):nrow(data)) {     variance_term[i] <-       data[i] -       theta[1:p] %*% data[(i - 1):(i - p)] -       theta[(p + 1):(p + q)] %*% variance_term[(i - 1):(i - q)]   }   phi_coefficient <- matrix(0, nrow(data), p)   psi_coefficient <- matrix(0, nrow(data), q)   for (i in (max(p, q) + 1):nrow(data)) {     phi_coefficient[i, ] <-       -data[(i - 1):(i - p)] -       theta[(p + 1):(p + q)] %*% phi_coefficient[(i - 1):(i - q), ]   }   for (i in (q + 1):nrow(data)) {     psi_coefficient[i, ] <-       -variance_term[(i - 1):(i - q)] -       theta[(p + 1):(p + q)] %*% psi_coefficient[(i - 1):(i - q), ]   }   phi_psi_coefficient <- array(0, c(q, p, nrow(data)))   psi_psi_coefficient <- array(0, c(q, q, nrow(data)))   for (i in (q + 1):nrow(data)) {     phi_psi_coefficient[, , i] <-       -phi_coefficient[(i - 1):(i - q), ] -       rowSums(         sweep(           phi_psi_coefficient[, , (i - 1):(i - q), drop = FALSE],           3,           theta[(p + 1):(p + q)],           `*`         ),         dims = 2       )     psi_psi_coefficient[, , i] <-       -psi_coefficient[(i - 1):(i - q), ] -       t(psi_coefficient[(i - 1):(i - q), ]) -       rowSums(         sweep(           psi_psi_coefficient[, , (i - 1):(i - q), drop = FALSE],           3,           theta[(p + 1):(p + q)],           `*`         ),         dims = 2       )   }   hessian <- matrix(0, nrow = p + q + 1, ncol = p + q + 1)   hessian[1:p, 1:p] <-     crossprod(phi_coefficient[nrow(data), , drop = FALSE]) /     theta[p + q + 1]   hessian[1:p, (p + 1):(p + q)] <- (     t(phi_psi_coefficient[, , nrow(data)]) * variance_term[nrow(data)] +       crossprod(         phi_coefficient[nrow(data), , drop = FALSE],         psi_coefficient[nrow(data), , drop = FALSE]       )   ) / theta[p + q + 1]   hessian[(p + 1):(p + q), 1:p] <- t(hessian[1:p, (p + 1):(p + q)])   hessian[1:p, p + q + 1] <-     -t(phi_coefficient[nrow(data), ]) *     variance_term[nrow(data)] / theta[p + q + 1]^2   hessian[p + q + 1, 1:p] <- t(hessian[1:p, p + q + 1])   hessian[(p + 1):(p + q), (p + 1):(p + q)] <- (     crossprod(psi_coefficient[nrow(data), , drop = FALSE]) +       psi_psi_coefficient[, , nrow(data)] * variance_term[nrow(data)]   ) / theta[p + q + 1]   hessian[(p + 1):(p + q), p + q + 1] <-     -t(psi_coefficient[nrow(data), ]) *     variance_term[nrow(data)] / theta[p + q + 1]^2   hessian[p + q + 1, (p + 1):(p + q)] <-     t(hessian[(p + 1):(p + q), p + q + 1])   hessian[p + q + 1, p + q + 1] <-     variance_term[nrow(data)]^2 / theta[p + q + 1]^3 -     1 / 2 / theta[p + q + 1]^2   hessian } qmle_hessian_sum <- function(data, theta, p = 1, q = 1) {   if (nrow(data) < max(p, q) + 1) {     return(diag(length(theta)))   }   variance_term <- rep(0, nrow(data))   for (i in (max(p, q) + 1):nrow(data)) {     variance_term[i] <-       data[i] -       theta[1:p] %*% data[(i - 1):(i - p)] -       theta[(p + 1):(p + q)] %*% variance_term[(i - 1):(i - q)]   }   phi_coefficient <- matrix(0, nrow(data), p)   psi_coefficient <- matrix(0, nrow(data), q)   for (i in (max(p, q) + 1):nrow(data)) {     phi_coefficient[i, ] <-       -data[(i - 1):(i - p)] -       theta[(p + 1):(p + q)] %*% phi_coefficient[(i - 1):(i - q), ]   }   for (i in (q + 1):nrow(data)) {     psi_coefficient[i, ] <-       -variance_term[(i - 1):(i - q)] -       theta[(p + 1):(p + q)] %*% psi_coefficient[(i - 1):(i - q), ]   }   phi_psi_coefficient <- array(0, c(q, p, nrow(data)))   psi_psi_coefficient <- array(0, c(q, q, nrow(data)))   for (i in (q + 1):nrow(data)) {     phi_psi_coefficient[, , i] <-       -phi_coefficient[(i - 1):(i - q), ] -       rowSums(         sweep(           phi_psi_coefficient[, , (i - 1):(i - q), drop = FALSE],           3,           theta[(p + 1):(p + q)],           `*`         ),         dims = 2       )     psi_psi_coefficient[, , i] <-       -psi_coefficient[(i - 1):(i - q), ] -       t(psi_coefficient[(i - 1):(i - q), ]) -       rowSums(         sweep(           psi_psi_coefficient[, , (i - 1):(i - q), drop = FALSE],           3,           theta[(p + 1):(p + q)],           `*`         ),         dims = 2       )   }   hessian <- matrix(0, nrow = p + q + 1, ncol = p + q + 1)   hessian[1:p, 1:p] <-     crossprod(phi_coefficient) / theta[p + q + 1]   hessian[(p + 1):(p + q), 1:p] <- (     rowSums(       sweep(         phi_psi_coefficient,         3,         variance_term,         `*`       ),       dims = 2     ) +       crossprod(         psi_coefficient, phi_coefficient       )   ) / theta[p + q + 1]   hessian[1:p, (p + 1):(p + q)] <- t(hessian[(p + 1):(p + q), 1:p])   hessian[1:p, p + q + 1] <-     -crossprod(phi_coefficient, variance_term) / theta[p + q + 1]^2   hessian[p + q + 1, 1:p] <- t(hessian[1:p, p + q + 1])   hessian[(p + 1):(p + q), (p + 1):(p + q)] <- (     crossprod(psi_coefficient) + rowSums(       sweep(         psi_psi_coefficient,         3,         variance_term,         `*`       ),       dims = 2     )   ) / theta[p + q + 1]   hessian[(p + 1):(p + q), p + q + 1] <-     -crossprod(psi_coefficient, variance_term) / theta[p + q + 1]^2   hessian[p + q + 1, (p + 1):(p + q)] <-     t(hessian[(p + 1):(p + q), p + q + 1])   hessian[p + q + 1, p + q + 1] <-     crossprod(variance_term) / theta[p + q + 1]^3 -     (nrow(data) - q) / 2 / theta[p + q + 1]^2   hessian }  # fastcpd arma 1 1 set.seed(1) n <- 600 w <- rnorm(n + 1, 0, 1) x <- rep(0, n + 1) for (i in 1:300) {   x[i + 1] <- 0.1 * x[i] + w[i + 1] + 0.1 * w[i] } for (i in 301:n) {   x[i + 1] <- 0.3 * x[i] + w[i + 1] + 0.4 * w[i] } result <- fastcpd(   formula = ~ . - 1,   data = data.frame(x = x[1 + seq_len(n)]),   trim = 0,   p = 1 + 1 + 1,   beta = (1 + 1 + 1 + 1) * log(n) / 2,   cost_adjustment = \"BIC\",   cost = qmle,   cost_gradient = qmle_gradient,   cost_hessian = qmle_hessian,   cp_only = TRUE,   lower = c(rep(-1, 1 + 1), 1e-10),   upper = c(rep(1, 1 + 1), Inf),   line_search = c(1, 0.1, 1e-2, 1e-3, 1e-4, 1e-5, 1e-6, 1e-7, 1e-8, 1e-9),   r.progress = FALSE ) summary(result) #>  #> Call: #> fastcpd(formula = ~. - 1, data = data.frame(x = x[1 + seq_len(n)]),  #>     beta = (1 + 1 + 1 + 1) * log(n)/2, cost_adjustment = \"BIC\",  #>     cost = qmle, cost_gradient = qmle_gradient, cost_hessian = qmle_hessian,  #>     line_search = c(1, 0.1, 0.01, 0.001, 1e-04, 1e-05, 1e-06,  #>         1e-07, 1e-08, 1e-09), lower = c(rep(-1, 1 + 1), 1e-10),  #>     upper = c(rep(1, 1 + 1), Inf), trim = 0, p = 1 + 1 + 1, cp_only = TRUE,  #>     r.progress = FALSE) #>  #> Change points: #> 3 300  # fastcpd arma 3 2 set.seed(1) n <- 600 w <- rnorm(n + 2, 0, 1) x <- rep(0, n + 3) for (i in 1:300) {   x[i + 3] <- 0.1 * x[i + 2] - 0.2 * x[i + 1] + 0.6 * x[i] +     w[i + 2] + 0.1 * w[i + 1] + 0.5 * w[i] } for (i in 301:n) {   x[i + 3] <- 0.3 * x[i + 2] + 0.4 * x[i + 1] + 0.2 * x[i] +     w[i + 2] + 0.4 * w[i + 1] + 0.1 * w[i] } # result <- fastcpd( #   formula = ~ . - 1, #   data = data.frame(x = x[3 + seq_len(n)]), #   trim = 0, #   p = 3 + 2 + 1, #   beta = (3 + 2 + 1 + 1) * log(n) / 2, #   cost_adjustment = \"BIC\", #   cost = function(data, theta) { #     qmle(data, theta, 3, 2) #   }, #   cost_gradient = function(data, theta) { #     qmle_gradient(data, theta, 3, 2) #   }, #   cost_hessian = function(data, theta) { #     qmle_hessian(data, theta, 3, 2) #   }, #   cp_only = TRUE, #   lower = c(rep(-1, 3 + 2), 1e-10), #   upper = c(rep(1, 3 + 2), Inf), #   line_search = c(1, 0.1, 1e-2, 1e-3, 1e-4, 1e-5, 1e-6, 1e-7, 1e-8, 1e-9), #   r.progress = FALSE # ) # summary(result)  # hessian check theta_estimate <- rep(0.1, 3 + 2 + 1) testthat::expect_equal(   numDeriv::hessian(     qmle, theta_estimate, data = matrix(x[3 + seq_len(n)]), p = 3, q = 2   ),   qmle_hessian_sum(matrix(x[3 + seq_len(n)]), theta_estimate, 3, 2) )  optim(   rep(0.1, 3 + 2 + 1),   fn = function(data, theta) {     qmle(data, theta, 3, 2)   },   data = matrix(x[3 + seq_len(n)]),   method = \"L-BFGS-B\",   lower = c(rep(-1, 3 + 2), 1e-10),   upper = c(rep(1, 3 + 2), Inf),   gr = function(data, theta) {     qmle_gradient_sum(data, theta, 3, 2)   } ) #> $par #> [1]  0.2255153 -0.1465193  0.6170471  0.2376060  0.5062720  1.1398935 #>  #> $value #> [1] 887.6911 #>  #> $counts #> function gradient  #>       25       25  #>  #> $convergence #> [1] 0 #>  #> $message #> [1] \"CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH\"  # convergence check x <- arima.sim(list(ar = c(0.1, -0.2, 0.6), ma = c(0.1, 0.5)), n = n + 3) theta_estimate <- rep(0.1, 3 + 2 + 1) data <- matrix(x[3 + seq_len(n)]) qmle_path <- NULL prev_qmle <- 1 curr_qmle <- Inf epochs_num <- 0 while (abs(curr_qmle - prev_qmle) > 1e-5) {   prev_qmle <- curr_qmle   hessian <-     Matrix::nearPD(qmle_hessian_sum(data, theta_estimate, 3, 2))$mat   step <- solve(     hessian, qmle_gradient_sum(data, theta_estimate, 3, 2)   )   # line search   lr_choices <- c(1, 0.1, 1e-2, 1e-3, 1e-4, 1e-5, 1e-6, 1e-7, 1e-8, 1e-9)   lr <- lr_choices[which.min(     sapply(lr_choices, function(lr) {       qmle(data, pmin(         pmax(theta_estimate - lr * step, c(rep(-1, 3 + 2), 1e-10)),         c(rep(1, 3 + 2), Inf)       ), 3, 2)     })   )]   theta_estimate <- pmin(     pmax(theta_estimate - lr * step, c(rep(-1, 3 + 2), 1e-10)),     c(rep(1, 3 + 2), Inf)   )   curr_qmle <- qmle(data, theta_estimate, 3, 2)   cat(epochs_num, curr_qmle, theta_estimate, \"\\n\")   qmle_path <- c(qmle_path, curr_qmle)   epochs_num <- epochs_num + 1 } #> 0 3944.634 0.04233446 -0.001623946 0.1377787 0.115717 0.2221914 0.09941663  #> 1 3936.952 0.01542032 -0.0531825 0.1509683 0.1246861 0.2805771 0.09928027  #> 2 3910.965 -0.08797532 -0.242957 0.1906819 0.170578 0.4839799 0.09910547  #> 3 3848.468 -0.04161028 -0.07070869 0.2030628 0.1721869 0.3068375 0.09787254  #> 4 3831.932 0.1216262 0.08513928 0.1587053 0.009073249 0.192338 0.09769375  #> 5 3776.199 -0.01651633 -0.01397911 0.2307269 0.1592173 0.2581484 0.09649129  #> 6 3765.216 -0.1259345 -0.2358653 0.2811266 0.2247347 0.4917298 0.09625032  #> 7 3747.53 -0.2338781 -0.2000905 0.3095502 0.381256 0.4029239 0.09616148  #> 8 3716.551 -0.153926 -0.2491416 0.3136961 0.2642216 0.4770571 0.09560175  #> 9 3713.008 -0.123153 -0.2626475 0.3090286 0.221204 0.5032787 0.09552786  #> 10 3711.746 -0.1027739 -0.2675548 0.3047442 0.1937621 0.5168513 0.09550011  #> 11 3710.812 0.07776053 -0.2838975 0.2622506 -0.04304759 0.610297 0.09530323  #> 12 2459.683 -0.07466526 -0.1866228 0.5580706 0.2496629 0.398122 0.1325774  #> 13 1756.478 0.01341224 -0.1173666 0.5715505 0.1583534 0.34973 0.1930662  #> 14 1337.572 0.04397173 -0.09448422 0.5641567 0.1253938 0.3330598 0.279927  #> 15 1094.001 0.0589584 -0.08427659 0.5583676 0.1088234 0.3254585 0.3992378  #> 16 962.9662 0.06613462 -0.0797346 0.5551347 0.1007856 0.3220491 0.5542437  #> 17 901.8344 0.06929215 -0.07782492 0.5536197 0.09722635 0.3206128 0.7372815  #> 18 880.06 0.07048913 -0.0771186 0.5530292 0.09587296 0.3200815 0.9184269  #> 19 875.545 0.07082844 -0.07692082 0.5528597 0.09548877 0.3199327 1.045147  #> 20 875.2373 0.07088068 -0.07689054 0.5528334 0.09542957 0.3199099 1.089357  #> 21 875.2352 0.07088299 -0.0768892 0.5528323 0.09542696 0.3199089 1.093412  #> 22 875.2352 0.070883 -0.0768892 0.5528323 0.09542695 0.3199089 1.093443"},{"path":"https://fastcpd.xingchi.li/articles/exploration-during-development.html","id":"notes","dir":"Articles","previous_headings":"","what":"Notes","title":"Exploration during development","text":"document generated following code:","code":"R -e 'knitr::knit(\"vignettes/exploration-during-development.Rmd.original\", output = \"vignettes/exploration-during-development.Rmd\")'"},{"path":"https://fastcpd.xingchi.li/articles/exploration-during-development.html","id":"appendix-all-code-snippets","dir":"Articles","previous_headings":"","what":"Appendix: all code snippets","title":"Exploration during development","text":"","code":"knitr::opts_chunk$set(   collapse = TRUE, comment = \"#>\", eval = TRUE, warning = FALSE ) library(fastcpd) qmle <- function(data, theta, p = 1, q = 1) {   if (nrow(data) < max(p, q) + 1) {     return(0)   }   variance_term <- rep(0, nrow(data))   for (i in (max(p, q) + 1):nrow(data)) {     variance_term[i] <-       data[i] -       theta[1:p] %*% data[(i - 1):(i - p)] -       theta[(p + 1):(p + q)] %*% variance_term[(i - 1):(i - q)]   }   (log(2 * pi) + log(theta[p + q + 1])) * (nrow(data) - q) / 2 +     sum(variance_term^2) / (2 * theta[p + q + 1]) } qmle_gradient <- function(data, theta, p = 1, q = 1) {   if (nrow(data) < max(p, q) + 1) {     return(rep(1, length(theta)))   }   variance_term <- rep(0, nrow(data))   for (i in (max(p, q) + 1):nrow(data)) {     variance_term[i] <-       data[i] -       theta[1:p] %*% data[(i - 1):(i - p)] -       theta[(p + 1):(p + q)] %*% variance_term[(i - 1):(i - q)]   }   phi_coefficient <- matrix(0, nrow(data), p)   psi_coefficient <- matrix(0, nrow(data), q)   for (i in (max(p, q) + 1):nrow(data)) {     phi_coefficient[i, ] <-       -data[(i - 1):(i - p)] -       theta[(p + 1):(p + q)] %*% phi_coefficient[(i - 1):(i - q), ]   }   for (i in (q + 1):nrow(data)) {     psi_coefficient[i, ] <-       -variance_term[(i - 1):(i - q)] -       theta[(p + 1):(p + q)] %*% psi_coefficient[(i - 1):(i - q), ]   }   c(     phi_coefficient[nrow(data), ] * variance_term[nrow(data)] /       theta[p + q + 1],     psi_coefficient[nrow(data), ] * variance_term[nrow(data)] /       theta[p + q + 1],     1 / 2 / theta[p + q + 1] -       variance_term[nrow(data)]^2 / (2 * theta[p + q + 1]^2)   ) } qmle_gradient_sum <- function(data, theta, p = 1, q = 1) {   if (nrow(data) < max(p, q) + 1) {     return(rep(1, length(theta)))   }   variance_term <- rep(0, nrow(data))   for (i in (max(p, q) + 1):nrow(data)) {     variance_term[i] <-       data[i] -       theta[1:p] %*% data[(i - 1):(i - p)] -       theta[(p + 1):(p + q)] %*% variance_term[(i - 1):(i - q)]   }   phi_coefficient <- matrix(0, nrow(data), p)   psi_coefficient <- matrix(0, nrow(data), q)   for (i in (max(p, q) + 1):nrow(data)) {     phi_coefficient[i, ] <-       -data[(i - 1):(i - p)] -       theta[(p + 1):(p + q)] %*% phi_coefficient[(i - 1):(i - q), ]   }   for (i in (q + 1):nrow(data)) {     psi_coefficient[i, ] <-       -variance_term[(i - 1):(i - q)] -       theta[(p + 1):(p + q)] %*% psi_coefficient[(i - 1):(i - q), ]   }   c(     crossprod(phi_coefficient, variance_term) / theta[p + q + 1],     crossprod(psi_coefficient, variance_term) / theta[p + q + 1],     (nrow(data) - q) / 2 / theta[p + q + 1] -       crossprod(variance_term) / 2 / theta[p + q + 1]^2   ) } qmle_hessian <- function(data, theta, p = 1, q = 1) {   if (nrow(data) < max(p, q) + 1) {     return(diag(length(theta)))   }   variance_term <- rep(0, nrow(data))   for (i in (max(p, q) + 1):nrow(data)) {     variance_term[i] <-       data[i] -       theta[1:p] %*% data[(i - 1):(i - p)] -       theta[(p + 1):(p + q)] %*% variance_term[(i - 1):(i - q)]   }   phi_coefficient <- matrix(0, nrow(data), p)   psi_coefficient <- matrix(0, nrow(data), q)   for (i in (max(p, q) + 1):nrow(data)) {     phi_coefficient[i, ] <-       -data[(i - 1):(i - p)] -       theta[(p + 1):(p + q)] %*% phi_coefficient[(i - 1):(i - q), ]   }   for (i in (q + 1):nrow(data)) {     psi_coefficient[i, ] <-       -variance_term[(i - 1):(i - q)] -       theta[(p + 1):(p + q)] %*% psi_coefficient[(i - 1):(i - q), ]   }   phi_psi_coefficient <- array(0, c(q, p, nrow(data)))   psi_psi_coefficient <- array(0, c(q, q, nrow(data)))   for (i in (q + 1):nrow(data)) {     phi_psi_coefficient[, , i] <-       -phi_coefficient[(i - 1):(i - q), ] -       rowSums(         sweep(           phi_psi_coefficient[, , (i - 1):(i - q), drop = FALSE],           3,           theta[(p + 1):(p + q)],           `*`         ),         dims = 2       )     psi_psi_coefficient[, , i] <-       -psi_coefficient[(i - 1):(i - q), ] -       t(psi_coefficient[(i - 1):(i - q), ]) -       rowSums(         sweep(           psi_psi_coefficient[, , (i - 1):(i - q), drop = FALSE],           3,           theta[(p + 1):(p + q)],           `*`         ),         dims = 2       )   }   hessian <- matrix(0, nrow = p + q + 1, ncol = p + q + 1)   hessian[1:p, 1:p] <-     crossprod(phi_coefficient[nrow(data), , drop = FALSE]) /     theta[p + q + 1]   hessian[1:p, (p + 1):(p + q)] <- (     t(phi_psi_coefficient[, , nrow(data)]) * variance_term[nrow(data)] +       crossprod(         phi_coefficient[nrow(data), , drop = FALSE],         psi_coefficient[nrow(data), , drop = FALSE]       )   ) / theta[p + q + 1]   hessian[(p + 1):(p + q), 1:p] <- t(hessian[1:p, (p + 1):(p + q)])   hessian[1:p, p + q + 1] <-     -t(phi_coefficient[nrow(data), ]) *     variance_term[nrow(data)] / theta[p + q + 1]^2   hessian[p + q + 1, 1:p] <- t(hessian[1:p, p + q + 1])   hessian[(p + 1):(p + q), (p + 1):(p + q)] <- (     crossprod(psi_coefficient[nrow(data), , drop = FALSE]) +       psi_psi_coefficient[, , nrow(data)] * variance_term[nrow(data)]   ) / theta[p + q + 1]   hessian[(p + 1):(p + q), p + q + 1] <-     -t(psi_coefficient[nrow(data), ]) *     variance_term[nrow(data)] / theta[p + q + 1]^2   hessian[p + q + 1, (p + 1):(p + q)] <-     t(hessian[(p + 1):(p + q), p + q + 1])   hessian[p + q + 1, p + q + 1] <-     variance_term[nrow(data)]^2 / theta[p + q + 1]^3 -     1 / 2 / theta[p + q + 1]^2   hessian } qmle_hessian_sum <- function(data, theta, p = 1, q = 1) {   if (nrow(data) < max(p, q) + 1) {     return(diag(length(theta)))   }   variance_term <- rep(0, nrow(data))   for (i in (max(p, q) + 1):nrow(data)) {     variance_term[i] <-       data[i] -       theta[1:p] %*% data[(i - 1):(i - p)] -       theta[(p + 1):(p + q)] %*% variance_term[(i - 1):(i - q)]   }   phi_coefficient <- matrix(0, nrow(data), p)   psi_coefficient <- matrix(0, nrow(data), q)   for (i in (max(p, q) + 1):nrow(data)) {     phi_coefficient[i, ] <-       -data[(i - 1):(i - p)] -       theta[(p + 1):(p + q)] %*% phi_coefficient[(i - 1):(i - q), ]   }   for (i in (q + 1):nrow(data)) {     psi_coefficient[i, ] <-       -variance_term[(i - 1):(i - q)] -       theta[(p + 1):(p + q)] %*% psi_coefficient[(i - 1):(i - q), ]   }   phi_psi_coefficient <- array(0, c(q, p, nrow(data)))   psi_psi_coefficient <- array(0, c(q, q, nrow(data)))   for (i in (q + 1):nrow(data)) {     phi_psi_coefficient[, , i] <-       -phi_coefficient[(i - 1):(i - q), ] -       rowSums(         sweep(           phi_psi_coefficient[, , (i - 1):(i - q), drop = FALSE],           3,           theta[(p + 1):(p + q)],           `*`         ),         dims = 2       )     psi_psi_coefficient[, , i] <-       -psi_coefficient[(i - 1):(i - q), ] -       t(psi_coefficient[(i - 1):(i - q), ]) -       rowSums(         sweep(           psi_psi_coefficient[, , (i - 1):(i - q), drop = FALSE],           3,           theta[(p + 1):(p + q)],           `*`         ),         dims = 2       )   }   hessian <- matrix(0, nrow = p + q + 1, ncol = p + q + 1)   hessian[1:p, 1:p] <-     crossprod(phi_coefficient) / theta[p + q + 1]   hessian[(p + 1):(p + q), 1:p] <- (     rowSums(       sweep(         phi_psi_coefficient,         3,         variance_term,         `*`       ),       dims = 2     ) +       crossprod(         psi_coefficient, phi_coefficient       )   ) / theta[p + q + 1]   hessian[1:p, (p + 1):(p + q)] <- t(hessian[(p + 1):(p + q), 1:p])   hessian[1:p, p + q + 1] <-     -crossprod(phi_coefficient, variance_term) / theta[p + q + 1]^2   hessian[p + q + 1, 1:p] <- t(hessian[1:p, p + q + 1])   hessian[(p + 1):(p + q), (p + 1):(p + q)] <- (     crossprod(psi_coefficient) + rowSums(       sweep(         psi_psi_coefficient,         3,         variance_term,         `*`       ),       dims = 2     )   ) / theta[p + q + 1]   hessian[(p + 1):(p + q), p + q + 1] <-     -crossprod(psi_coefficient, variance_term) / theta[p + q + 1]^2   hessian[p + q + 1, (p + 1):(p + q)] <-     t(hessian[(p + 1):(p + q), p + q + 1])   hessian[p + q + 1, p + q + 1] <-     crossprod(variance_term) / theta[p + q + 1]^3 -     (nrow(data) - q) / 2 / theta[p + q + 1]^2   hessian }  # fastcpd arma 1 1 set.seed(1) n <- 600 w <- rnorm(n + 1, 0, 1) x <- rep(0, n + 1) for (i in 1:300) {   x[i + 1] <- 0.1 * x[i] + w[i + 1] + 0.1 * w[i] } for (i in 301:n) {   x[i + 1] <- 0.3 * x[i] + w[i + 1] + 0.4 * w[i] } result <- fastcpd(   formula = ~ . - 1,   data = data.frame(x = x[1 + seq_len(n)]),   trim = 0,   p = 1 + 1 + 1,   beta = (1 + 1 + 1 + 1) * log(n) / 2,   cost_adjustment = \"BIC\",   cost = qmle,   cost_gradient = qmle_gradient,   cost_hessian = qmle_hessian,   cp_only = TRUE,   lower = c(rep(-1, 1 + 1), 1e-10),   upper = c(rep(1, 1 + 1), Inf),   line_search = c(1, 0.1, 1e-2, 1e-3, 1e-4, 1e-5, 1e-6, 1e-7, 1e-8, 1e-9),   r.progress = FALSE ) summary(result)  # fastcpd arma 3 2 set.seed(1) n <- 600 w <- rnorm(n + 2, 0, 1) x <- rep(0, n + 3) for (i in 1:300) {   x[i + 3] <- 0.1 * x[i + 2] - 0.2 * x[i + 1] + 0.6 * x[i] +     w[i + 2] + 0.1 * w[i + 1] + 0.5 * w[i] } for (i in 301:n) {   x[i + 3] <- 0.3 * x[i + 2] + 0.4 * x[i + 1] + 0.2 * x[i] +     w[i + 2] + 0.4 * w[i + 1] + 0.1 * w[i] } # result <- fastcpd( #   formula = ~ . - 1, #   data = data.frame(x = x[3 + seq_len(n)]), #   trim = 0, #   p = 3 + 2 + 1, #   beta = (3 + 2 + 1 + 1) * log(n) / 2, #   cost_adjustment = \"BIC\", #   cost = function(data, theta) { #     qmle(data, theta, 3, 2) #   }, #   cost_gradient = function(data, theta) { #     qmle_gradient(data, theta, 3, 2) #   }, #   cost_hessian = function(data, theta) { #     qmle_hessian(data, theta, 3, 2) #   }, #   cp_only = TRUE, #   lower = c(rep(-1, 3 + 2), 1e-10), #   upper = c(rep(1, 3 + 2), Inf), #   line_search = c(1, 0.1, 1e-2, 1e-3, 1e-4, 1e-5, 1e-6, 1e-7, 1e-8, 1e-9), #   r.progress = FALSE # ) # summary(result)  # hessian check theta_estimate <- rep(0.1, 3 + 2 + 1) testthat::expect_equal(   numDeriv::hessian(     qmle, theta_estimate, data = matrix(x[3 + seq_len(n)]), p = 3, q = 2   ),   qmle_hessian_sum(matrix(x[3 + seq_len(n)]), theta_estimate, 3, 2) )  optim(   rep(0.1, 3 + 2 + 1),   fn = function(data, theta) {     qmle(data, theta, 3, 2)   },   data = matrix(x[3 + seq_len(n)]),   method = \"L-BFGS-B\",   lower = c(rep(-1, 3 + 2), 1e-10),   upper = c(rep(1, 3 + 2), Inf),   gr = function(data, theta) {     qmle_gradient_sum(data, theta, 3, 2)   } )  # convergence check x <- arima.sim(list(ar = c(0.1, -0.2, 0.6), ma = c(0.1, 0.5)), n = n + 3) theta_estimate <- rep(0.1, 3 + 2 + 1) data <- matrix(x[3 + seq_len(n)]) qmle_path <- NULL prev_qmle <- 1 curr_qmle <- Inf epochs_num <- 0 while (abs(curr_qmle - prev_qmle) > 1e-5) {   prev_qmle <- curr_qmle   hessian <-     Matrix::nearPD(qmle_hessian_sum(data, theta_estimate, 3, 2))$mat   step <- solve(     hessian, qmle_gradient_sum(data, theta_estimate, 3, 2)   )   # line search   lr_choices <- c(1, 0.1, 1e-2, 1e-3, 1e-4, 1e-5, 1e-6, 1e-7, 1e-8, 1e-9)   lr <- lr_choices[which.min(     sapply(lr_choices, function(lr) {       qmle(data, pmin(         pmax(theta_estimate - lr * step, c(rep(-1, 3 + 2), 1e-10)),         c(rep(1, 3 + 2), Inf)       ), 3, 2)     })   )]   theta_estimate <- pmin(     pmax(theta_estimate - lr * step, c(rep(-1, 3 + 2), 1e-10)),     c(rep(1, 3 + 2), Inf)   )   curr_qmle <- qmle(data, theta_estimate, 3, 2)   cat(epochs_num, curr_qmle, theta_estimate, \"\\n\")   qmle_path <- c(qmle_path, curr_qmle)   epochs_num <- epochs_num + 1 }"},{"path":"https://fastcpd.xingchi.li/articles/time-complexity.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Time Complexity Analysis in fastcpd","text":"vignette examines two aspects fastcpd package: Time Complexity fastcpd.mean(): assess execution time scales length data. Impact SeDG fastcpd.lasso(): simulate Lasso regression setting multiple change points compare detected change points two settings vanilla_percentage parameter. highlights performance improvement provided SeDG.","code":""},{"path":"https://fastcpd.xingchi.li/articles/time-complexity.html","id":"time-complexity-simulation-for-fastcpd-mean","dir":"Articles","previous_headings":"","what":"Time Complexity Simulation for fastcpd.mean()","title":"Time Complexity Analysis in fastcpd","text":"section, generate multivariate normal data varying lengths measure execution time fastcpd.mean() function. create log-log plot execution times perform linear regression log-transformed data estimate power law coefficient.","code":"# Load necessary libraries library(ggplot2) library(fastcpd)  # Set a seed for reproducibility set.seed(1)  # Define a sequence of data lengths ns <- 1e+3 * c(1, 5, 10, 50, 100, 500, 1000, 5000, 1e+4, 5e+4) p <- 4  # Dimensionality of the data  # Evaluate execution times for each data length execution_times <- numeric(length(ns))  for (i in seq_along(ns)) {   execution_times[i] <- system.time(fastcpd.mean(     mvtnorm::rmvnorm(ns[i], mean = rep(0, p), sigma = diag(1, p)),     r.progress = FALSE,     cp_only = TRUE   ))[[1]] }  # Prepare data for plotting time_data <- data.frame(   n = ns,   time = execution_times )  # Plot execution times on a log-log scale ggplot(time_data, aes(x = n, y = time)) +   geom_point() +   geom_line() +   scale_x_log10() +   scale_y_log10() +   labs(     title = \"Time Complexity of fastcpd.mean\",     x = \"Data Length (log10 scale)\",     y = \"Execution Time (seconds, log10 scale)\"   ) +   theme_minimal() # Log-transform the data for linear regression log_ns <- log10(ns) log_times <- log10(execution_times)  # Perform linear regression to estimate the power coefficient regression_model <- lm(log_times ~ log_ns) summary(regression_model) #>  #> Call: #> lm(formula = log_times ~ log_ns) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -0.18758 -0.11814  0.01454  0.03862  0.38958  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -5.27452    0.21144  -24.95 7.13e-09 *** #> log_ns       0.92934    0.03814   24.37 8.58e-09 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.1757 on 8 degrees of freedom #> Multiple R-squared:  0.9867, Adjusted R-squared:  0.985  #> F-statistic: 593.8 on 1 and 8 DF,  p-value: 8.582e-09  # Extract and display the slope (power coefficient) power_coefficient <- coef(regression_model)[2] power_coefficient #>   log_ns  #> 0.929341"},{"path":"https://fastcpd.xingchi.li/articles/time-complexity.html","id":"impact-of-sedg-in-fastcpd-lasso","dir":"Articles","previous_headings":"","what":"Impact of SeDG in fastcpd.lasso()","title":"Time Complexity Analysis in fastcpd","text":"section, simulate Lasso regression model change points. compare performance vanilla approach (without SeDG) SeDG-enhanced approach varying vanilla_percentage parameter. detected change points extracted settings.","code":"# Load required libraries library(fastcpd)  # Set seed for reproducibility set.seed(1)  # Simulation parameters n <- 480         # Total number of observations p_true <- 6      # Number of true predictors with non-zero coefficients p <- 50          # Total number of predictors  # Generate design matrix with n observations and p predictors x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p))  # Create true coefficient matrix for 4 segments theta_0 <- rbind(   runif(p_true, -5, -2),   runif(p_true, -3, 3),   runif(p_true, 2, 5),   runif(p_true, -5, 5) ) # Pad the coefficient matrix with zeros for the remaining predictors theta_0 <- cbind(theta_0, matrix(0, ncol = p - p_true, nrow = 4))  # Simulate response variable with change points across segments y <- c(   x[1:80, ] %*% theta_0[1, ] + rnorm(80, 0, 2),   x[81:200, ] %*% theta_0[2, ] + rnorm(120, 0, 2),   x[201:320, ] %*% theta_0[3, ] + rnorm(120, 0, 2),   x[321:n, ] %*% theta_0[4, ] + rnorm(160, 0, 2) )  # Combine response and predictors into a data frame lasso_data <- data.frame(y = y, x = x)  # Detect change points using fastcpd.lasso without SeDG (vanilla_percentage = 0) system.time(result_seg_non_vanilla <- fastcpd.lasso(lasso_data, vanilla_percentage = 0, r.progress = FALSE)) #>    user  system elapsed  #>   5.556   0.794   6.364 cat(\"Change points with SeDG (vanilla_percentage = 0):\\n\") #> Change points with SeDG (vanilla_percentage = 0): result_seg_non_vanilla@cp_set #> [1]  79 203 320  # Detect change points using fastcpd.lasso with the vanilla approach (vanilla_percentage = 1) system.time(result_seg_vanilla <- fastcpd.lasso(lasso_data, vanilla_percentage = 1, r.progress = FALSE)) #>    user  system elapsed  #> 112.649   5.302 118.156 cat(\"Change points with vanilla approach (vanilla_percentage = 1):\\n\") #> Change points with vanilla approach (vanilla_percentage = 1): result_seg_vanilla@cp_set #> [1] 200 321"},{"path":"https://fastcpd.xingchi.li/articles/time-complexity.html","id":"notes","dir":"Articles","previous_headings":"","what":"Notes","title":"Time Complexity Analysis in fastcpd","text":"document generated following code:","code":"R -e 'knitr::knit(\"vignettes/time-complexity.Rmd.original\", output = \"vignettes/time-complexity.Rmd\")' && rm -rf vignettes/time-complexity && mv -f time-complexity vignettes"},{"path":"https://fastcpd.xingchi.li/articles/time-complexity.html","id":"appendix-all-code-snippets","dir":"Articles","previous_headings":"","what":"Appendix: all code snippets","title":"Time Complexity Analysis in fastcpd","text":"","code":"knitr::opts_chunk$set(   collapse = TRUE, comment = \"#>\", eval = TRUE, warning = FALSE,   fig.path=\"time-complexity/\" ) library(fastcpd) # Load necessary libraries library(ggplot2) library(fastcpd)  # Set a seed for reproducibility set.seed(1)  # Define a sequence of data lengths ns <- 1e+3 * c(1, 5, 10, 50, 100, 500, 1000, 5000, 1e+4, 5e+4) p <- 4  # Dimensionality of the data  # Evaluate execution times for each data length execution_times <- numeric(length(ns))  for (i in seq_along(ns)) {   execution_times[i] <- system.time(fastcpd.mean(     mvtnorm::rmvnorm(ns[i], mean = rep(0, p), sigma = diag(1, p)),     r.progress = FALSE,     cp_only = TRUE   ))[[1]] }  # Prepare data for plotting time_data <- data.frame(   n = ns,   time = execution_times )  # Plot execution times on a log-log scale ggplot(time_data, aes(x = n, y = time)) +   geom_point() +   geom_line() +   scale_x_log10() +   scale_y_log10() +   labs(     title = \"Time Complexity of fastcpd.mean\",     x = \"Data Length (log10 scale)\",     y = \"Execution Time (seconds, log10 scale)\"   ) +   theme_minimal()  # Log-transform the data for linear regression log_ns <- log10(ns) log_times <- log10(execution_times)  # Perform linear regression to estimate the power coefficient regression_model <- lm(log_times ~ log_ns) summary(regression_model)  # Extract and display the slope (power coefficient) power_coefficient <- coef(regression_model)[2] power_coefficient # Load required libraries library(fastcpd)  # Set seed for reproducibility set.seed(1)  # Simulation parameters n <- 480         # Total number of observations p_true <- 6      # Number of true predictors with non-zero coefficients p <- 50          # Total number of predictors  # Generate design matrix with n observations and p predictors x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p))  # Create true coefficient matrix for 4 segments theta_0 <- rbind(   runif(p_true, -5, -2),   runif(p_true, -3, 3),   runif(p_true, 2, 5),   runif(p_true, -5, 5) ) # Pad the coefficient matrix with zeros for the remaining predictors theta_0 <- cbind(theta_0, matrix(0, ncol = p - p_true, nrow = 4))  # Simulate response variable with change points across segments y <- c(   x[1:80, ] %*% theta_0[1, ] + rnorm(80, 0, 2),   x[81:200, ] %*% theta_0[2, ] + rnorm(120, 0, 2),   x[201:320, ] %*% theta_0[3, ] + rnorm(120, 0, 2),   x[321:n, ] %*% theta_0[4, ] + rnorm(160, 0, 2) )  # Combine response and predictors into a data frame lasso_data <- data.frame(y = y, x = x)  # Detect change points using fastcpd.lasso without SeDG (vanilla_percentage = 0) system.time(result_seg_non_vanilla <- fastcpd.lasso(lasso_data, vanilla_percentage = 0, r.progress = FALSE)) cat(\"Change points with SeDG (vanilla_percentage = 0):\\n\") result_seg_non_vanilla@cp_set  # Detect change points using fastcpd.lasso with the vanilla approach (vanilla_percentage = 1) system.time(result_seg_vanilla <- fastcpd.lasso(lasso_data, vanilla_percentage = 1, r.progress = FALSE)) cat(\"Change points with vanilla approach (vanilla_percentage = 1):\\n\") result_seg_vanilla@cp_set"},{"path":"https://fastcpd.xingchi.li/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Xingchi Li. Author, maintainer, copyright holder. Xianyang Zhang. Author, copyright holder.","code":""},{"path":"https://fastcpd.xingchi.li/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Li X, Zhang X (2024). “fastcpd: Fast Change Point Detection R.” doi:10.48550/arXiv.2404.05933. Zhang X, Dawn T (2023). “Sequential Gradient Descent Quasi-Newton's Method Change-Point Analysis.” Ruiz, Francisco, Dy, Jennifer, van de Meent, Jan-Willem (eds.), Proceedings 26th International Conference Artificial Intelligence Statistics, volume 206 series Proceedings Machine Learning Research, 1129–1143. https://proceedings.mlr.press/v206/zhang23b.html.","code":"@Misc{,   title = {fastcpd: Fast Change Point Detection in R},   author = {Xingchi Li and Xianyang Zhang},   year = {2024},   doi = {10.48550/arXiv.2404.05933},   publisher = {arXiv}, } @InProceedings{,   title = {Sequential Gradient Descent and Quasi-Newton's Method for Change-Point Analysis},   author = {Xianyang Zhang and Trisha Dawn},   year = {2023},   booktitle = {Proceedings of The 26th International Conference on Artificial Intelligence and Statistics},   volume = {206},   pages = {1129--1143},   editor = {{Ruiz} and {Francisco} and {Dy} and {Jennifer} and {van de Meent} and {Jan-Willem}},   series = {Proceedings of Machine Learning Research},   month = {25--27 Apr},   publisher = {PMLR},   pdf = {https://proceedings.mlr.press/v206/zhang23b/zhang23b.pdf},   url = {https://proceedings.mlr.press/v206/zhang23b.html},   abstract = {One common approach to detecting change-points is minimizing a cost function over possible numbers and locations of change-points. The framework includes several well-established procedures, such as the penalized likelihood and minimum description length. Such an approach requires finding the cost value repeatedly over different segments of the data set, which can be time-consuming when (i) the data sequence is long and (ii) obtaining the cost value involves solving a non-trivial optimization problem. This paper introduces a new sequential updating method (SE) to find the cost value effectively. The core idea is to update the cost value using the information from previous steps without re-optimizing the objective function. The new method is applied to change-point detection in generalized linear models and penalized regression. Numerical studies show that the new approach can be orders of magnitude faster than the Pruned Exact Linear Time (PELT) method without sacrificing estimation accuracy.}, }"},{"path":[]},{"path":"https://fastcpd.xingchi.li/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Fast Change Point Detection via Sequential Gradient Descent","text":"fastcpd (fast change point detection) fast implmentation change point detection methods R. fastcpd package designed find change points fast manner. easy install extensible kinds change point problems user specified cost function apart built-cost functions. learn behind algorithms: fastcpd: Fast Change Point Detection R Sequential Gradient Descent Quasi-Newton’s Method Change-Point Analysis","code":""},{"path":"https://fastcpd.xingchi.li/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fast Change Point Detection via Sequential Gradient Descent","text":"","code":"install.packages(   \"fastcpd\",   repos = c(\"https://doccstat.r-universe.dev\", \"https://cloud.r-project.org\") ) pak::pak(\"doccstat/fastcpd\") devtools::install_github(\"doccstat/fastcpd\") # conda-forge is a fork from CRAN and may not be up-to-date  # Use mamba mamba install r-fastcpd # Use conda conda install -c conda-forge r-fastcpd"},{"path":"https://fastcpd.xingchi.li/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Fast Change Point Detection via Sequential Gradient Descent","text":"r.progress = FALSE used suppress progress bar. Users expected see progress bar running code default.","code":"set.seed(1) n <- 1000 x <- rep(0, n + 3) for (i in 1:600) {   x[i + 3] <- 0.6 * x[i + 2] - 0.2 * x[i + 1] + 0.1 * x[i] + rnorm(1, 0, 3) } for (i in 601:1000) {   x[i + 3] <- 0.3 * x[i + 2] + 0.4 * x[i + 1] + 0.2 * x[i] + rnorm(1, 0, 3) } result <- fastcpd::fastcpd.ar(x[3 + seq_len(n)], 3, r.progress = FALSE) summary(result) #>  #> Call: #> fastcpd::fastcpd.ar(data = x[3 + seq_len(n)], order = 3, r.progress = FALSE) #>  #> Change points: #> 614  #>  #> Cost values: #> 2754.116 2038.945  #>  #> Parameters: #>     segment 1 segment 2 #> 1  0.57120256 0.2371809 #> 2 -0.20985108 0.4031244 #> 3  0.08221978 0.2290323 plot(result)"},{"path":"https://fastcpd.xingchi.li/index.html","id":"comparison","dir":"","previous_headings":"Usage","what":"Comparison","title":"Fast Change Point Detection via Sequential Gradient Descent","text":"packages included microbenchmark comparison due either memory constraints long running time.","code":"library(microbenchmark) set.seed(1) n <- 5 * 10^6 mean_data <- c(rnorm(n / 2, 0, 1), rnorm(n / 2, 50, 1)) ggplot2::autoplot(microbenchmark(   fastcpd = fastcpd::fastcpd.mean(mean_data, r.progress = FALSE, cp_only = TRUE, variance_estimation = 1),   changepoint = changepoint::cpt.mean(mean_data, method = \"PELT\"),   fpop = fpop::Fpop(mean_data, 2 * log(n)),   gfpop = gfpop::gfpop(     data = mean_data,     mygraph = gfpop::graph(       penalty = 2 * log(length(mean_data)) * gfpop::sdDiff(mean_data) ^ 2,       type = \"updown\"     ),     type = \"mean\"   ),   jointseg = jointseg::jointSeg(mean_data, K = 12),   mosum = mosum::mosum(c(mean_data), G = 40),   not = not::not(mean_data, contrast = \"pcwsConstMean\"),   wbs = wbs::wbs(mean_data) )) #> Warning in microbenchmark(fastcpd = fastcpd::fastcpd.mean(mean_data, r.progress #> = FALSE, : less accurate nanosecond times to avoid potential integer overflows library(microbenchmark) set.seed(1) n <- 10^8 mean_data <- c(rnorm(n / 2, 0, 1), rnorm(n / 2, 50, 1)) system.time(fastcpd::fastcpd.mean(mean_data, r.progress = FALSE, cp_only = TRUE, variance_estimation = 1)) #>    user  system elapsed  #>  11.753   9.150  26.455  system.time(changepoint::cpt.mean(mean_data, method = \"PELT\")) #>    user  system elapsed  #>  32.342   9.681  66.056  system.time(fpop::Fpop(mean_data, 2 * log(n))) #>    user  system elapsed  #>  35.926   5.231  58.269  system.time(mosum::mosum(c(mean_data), G = 40)) #>    user  system elapsed  #>   5.518  11.516  38.368  ggplot2::autoplot(microbenchmark(   fastcpd = fastcpd::fastcpd.mean(mean_data, r.progress = FALSE, cp_only = TRUE, variance_estimation = 1),   changepoint = changepoint::cpt.mean(mean_data, method = \"PELT\"),   fpop = fpop::Fpop(mean_data, 2 * log(n)),   mosum = mosum::mosum(c(mean_data), G = 40),   times = 10 )) #> Warning in microbenchmark(fastcpd = fastcpd::fastcpd.mean(mean_data, r.progress #> = FALSE, : less accurate nanosecond times to avoid potential integer overflows # Device: Mac mini (M1, 2020) # Memory: 8 GB system.time(CptNonPar::np.mojo(mean_data, G = floor(length(mean_data) / 6))) #> Error: vector memory limit of 16.0 Gb reached, see mem.maxVSize() #> Timing stopped at: 0.061 0.026 0.092 system.time(ecp::e.divisive(matrix(mean_data))) #> Error: vector memory limit of 16.0 Gb reached, see mem.maxVSize() #> Timing stopped at: 0.076 0.044 0.241 system.time(strucchange::breakpoints(y ~ 1, data = data.frame(y = mean_data))) #> Timing stopped at: 265.1 145.8 832.5 system.time(breakfast::breakfast(mean_data)) #> Timing stopped at: 45.9 89.21 562.3"},{"path":"https://fastcpd.xingchi.li/index.html","id":"cheatsheet","dir":"","previous_headings":"","what":"Cheatsheet","title":"Fast Change Point Detection via Sequential Gradient Descent","text":"fastcpd AR(p): fastcpd_ar ARIMA(p, d, q): fastcpd_arima ARMA(p, q): fastcpd_arma GARCH(p, q): fastcpd_garch VAR(p): fastcpd_var General time series: fastcpd_ts Mean change: fastcpd_mean Variance change: fastcpd_variance Mean /variance change: fastcpd_meanvariance Logistic regression: fastcpd_binomial Penalized linear regression: fastcpd_lasso Linear regression: fastcpd_lm Poisson regression: fastcpd_poisson Variance estimation ARMA models: variance_arma Variance estimation linear models: variance_lm Variance estimation mean change models: variance_mean Variance estimation median change models: variance_median Plot: plot Print: print Show: show Summary: summary Bitcoin Market Price (USD): bitcoin Occupancy Detection Data Set: occupancy Transcription Profiling 57 Human Bladder Carcinoma Samples: transcriptome UK Seatbelts Data: uk_seatbelts Well-log Dataset Numerical Bayesian Methods Applied Signal Processing: well_log fastcpd","code":""},{"path":"https://fastcpd.xingchi.li/index.html","id":"r-shiny-app","dir":"","previous_headings":"Cheatsheet","what":"R Shiny App","title":"Fast Change Point Detection via Sequential Gradient Descent","text":"Available soon: rshiny.fastcpd.xingchi.li","code":""},{"path":"https://fastcpd.xingchi.li/index.html","id":"faq","dir":"","previous_headings":"","what":"FAQ","title":"Fast Change Point Detection via Sequential Gradient Descent","text":"suggested packages required main functionality package. required vignettes. want learn package comparison vignettes, either check vignettes CRAN pkgdown generated documentation. package able install Mac Linux distribution without problems dependencies installed. However, encountered problems related gfortran, might RcppArmadillo installed previously. Try Mac OSX stackoverflow solution Linux stackover solution trouble installing RcppArmadillo. Fork repo. Create new branch main branch. Make changes commit . Please follow Google’s R style guide naming variables functions. adding new family models new cost functions corresponding gradient Hessian, please add src/fastcpd_class_cost.cc proper example tests vignettes/gallery.Rmd tests/testthat/test-gallery.R. Add family name src/fastcpd_constants.h. [Recommended] Add new wrapper function R/fastcpd_wrappers.R new family models move examples new wrapper function roxygen examples. Add new wrapper function corresponding section _pkgdown.yml. Push changes fork. Create pull request. Make sure pull request create new warnings errors devtools::check(). File ticket GitHub Issues. Contact authors specified DESCRIPTION.","code":""},{"path":[]},{"path":[]},{"path":"https://fastcpd.xingchi.li/reference/bitcoin.html","id":null,"dir":"Reference","previous_headings":"","what":"Bitcoin Market Price (USD) — bitcoin","title":"Bitcoin Market Price (USD) — bitcoin","text":"average USD market price across major bitcoin exchanges.","code":""},{"path":"https://fastcpd.xingchi.li/reference/bitcoin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bitcoin Market Price (USD) — bitcoin","text":"","code":"bitcoin"},{"path":"https://fastcpd.xingchi.li/reference/bitcoin.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Bitcoin Market Price (USD) — bitcoin","text":"data frame 1354 rows 2 variables: date POSIXct,POSIXt (TZ: \"UTC\") 2019-01-02 2023-10-28 price average USD market price across major bitcoin exchanges","code":""},{"path":"https://fastcpd.xingchi.li/reference/bitcoin.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Bitcoin Market Price (USD) — bitcoin","text":"<https://www.blockchain.com/explorer/charts/market-price>","code":""},{"path":"https://fastcpd.xingchi.li/reference/bitcoin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bitcoin Market Price (USD) — bitcoin","text":"","code":"# \\donttest{ if (requireNamespace(\"ggplot2\", quietly = TRUE)) {   p <- ggplot2::ggplot(bitcoin, ggplot2::aes(x = date, y = price)) +     ggplot2::geom_line()   print(p)    result <- suppressWarnings(fastcpd.garch(     diff(log(bitcoin$price[600:900])), c(1, 1),     beta = \"BIC\", cost_adjustment = \"BIC\"   ))   summary(result)   bitcoin$date[result@cp_set + 600]   plot(result)    cp_dates <- bitcoin[600 + result@cp_set + 1, \"date\"]   ggplot2::ggplot(     data = data.frame(       x = bitcoin$date[600:900], y = bitcoin$price[600:900]     ),     ggplot2::aes(x = x, y = y)   ) +     ggplot2::geom_line(color = \"steelblue\") +     ggplot2::geom_vline(       xintercept = cp_dates,       color = \"red\",       linetype = \"dotted\",       linewidth = 0.5,       alpha = 0.7     ) +     ggplot2::labs(       x = \"Year\",       y = \"Bitcoin price in USD\"     ) +     ggplot2::annotate(       \"text\",       x = cp_dates,       y = 2000,       label = as.character(cp_dates),       color = \"steelblue\"     ) +     ggplot2::theme_bw() }  #>  #> Call: #> fastcpd.garch(data = diff(log(bitcoin$price[600:900])), order = c(1,  #>     1), beta = \"BIC\", cost_adjustment = \"BIC\") #>  #> Change points: #> 128  #>  #> Cost values: #> -328.3151 -324.7008  #>  #> Parameters: #>      segment 1    segment 2 #> 1 0.0005468705 0.0004985193 #> 2 0.5362635868 0.1374093753 #> 3 0.3725827046 0.8052973996   # }"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to store the output created with fastcpd() — fastcpd-class","title":"An S4 class to store the output created with fastcpd() — fastcpd-class","text":"S4 class stores output fastcpd() fastcpd.family. fastcpd object consist several slots including call fastcpd(), data used, family model, change points, cost values, residuals, estimated parameters boolean indicating whether model fitted change points change points parameters, can select using @.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to store the output created with fastcpd() — fastcpd-class","text":"call call function. data data passed function. order order time series model. family family model. cp_set set change points. cost_values cost function values segment. residuals residuals model change points. Used built-families. thetas estimated parameters segment. Used built-families. cp_only boolean indicating whether fastcpd() run return change points change points estimated parameters cost values segment.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd.html","id":null,"dir":"Reference","previous_headings":"","what":"Find change points efficiently — fastcpd","title":"Find change points efficiently — fastcpd","text":"fastcpd() takes formulas, data, families extra parameters returns fastcpd object.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find change points efficiently — fastcpd","text":"","code":"fastcpd(   formula = y ~ . - 1,   data,   beta = \"MBIC\",   cost_adjustment = \"MBIC\",   family = NULL,   cost = NULL,   cost_gradient = NULL,   cost_hessian = NULL,   line_search = c(1),   lower = rep(-Inf, p),   upper = rep(Inf, p),   pruning_coef = 0,   segment_count = 10,   trim = 0.02,   momentum_coef = 0,   multiple_epochs = function(x) 0,   epsilon = 1e-10,   order = c(0, 0, 0),   p = ncol(data) - 1,   variance_estimation = NULL,   cp_only = FALSE,   vanilla_percentage = 0,   warm_start = FALSE,   ... )"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find change points efficiently — fastcpd","text":"formula formula object specifying model fitted. (optional) response variable LHS formula, covariates RHS. naming variables used formula consistent column names data frame provided data. intercept term removed formula. response variable needed mean/variance change models time series models. default, intercept column added data, similar lm() function. Thus, suggested users remove intercept term appending - 1 formula. Note fastcpd.family functions require formula input. data data frame dimension \\(T \\times d\\) containing data segmented (row denotes data point \\(z_t \\\\mathbb{R}^d\\) \\(t = 1, \\ldots, T\\)) required main function, matrix vector input also accepted fastcpd.family functions. beta Penalty criterion number change points. parameter takes string value \"BIC\", \"MBIC\", \"MDL\" numeric value. numeric value provided, value used penalty. default, mBIC criterion used, \\(\\beta = (p + 2) \\log(T) / 2\\). parameter usage paired cost_adjustment described . Discussions penalty criterion can found references. cost_adjustment Cost adjustment criterion. can \"BIC\", \"MBIC\", \"MDL\" NULL. default, cost adjustment criterion set \"MBIC\". \"MBIC\" \"MDL\" criteria modify cost function adding negative adjustment term cost function. \"BIC\" NULL modify cost function. Details can found references. family Family class change point model. can \"mean\" mean change, \"variance\" variance change, \"meanvariance\" mean /variance change, \"lm\" linear regression, \"binomial\" logistic regression, \"poisson\" Poisson regression, \"lasso\" penalized linear regression, \"ar\" AR(\\(p\\)) models, \"arma\" ARMA(\\(p\\), \\(q\\)) models, \"arima\" ARIMA(\\(p\\), \\(d\\), \\(q\\)) models, \"garch\" GARCH(\\(p\\), \\(q\\)) models, \"var\" VAR(\\(p\\)) models \"custom\" user-specified custom models. Omitting parameter specifying parameter \"custom\" NULL, case, users must specify custom cost function. cost Cost function used. cost, cost_gradient, cost_hessian specified time family built-families cost functions implemented C++ provide better performance. specified, default negative log-likelihood corresponding family. Custom cost functions can provided following two formats: cost = function(data) {...} cost = function(data, theta) {...} Users can specify loss function using second format used calculate cost value. formats, input data subset original data frame form matrix (matrix single column case univariate data set). first format, specified cost function directly calculates cost value. fastcpd() performs vanilla PELT algorithm, cost_gradient cost_hessian provided since parameter updating necessary vanilla PELT. second format, loss function \\(\\sum_{= s}^t l(z_i, \\theta)\\) provided, optimized parameter \\(\\theta\\) obtain cost value. detailed discussion custom cost function usage can found references. cost_gradient Gradient custom cost function. Example usage:   gradient function takes two inputs, first matrix representing segment data, similar format used cost function, second parameter needs optimized. gradient function returns value gradient loss function, .e., \\(\\sum_{= s}^t \\nabla l(z_i, \\theta)\\). cost_hessian Hessian custom loss function. Hessian function takes two inputs, first matrix representing segment data, similar format used cost function, second parameter needs optimized. gradient function returns Hessian loss function, .e., \\(\\sum_{= s}^t \\nabla^2 l(z_i, \\theta)\\). line_search vector numeric values provided, line search performed find optimal step size update. Detailed usage line_search can found references. lower Lower bound parameters. Used specify domain parameters gradient descent step. specified, lower bound set -Inf parameters. lower especially useful estimated parameters take positive values, noise variance. upper Upper bound parameters. Used specify domain parameters gradient descent step. specified, upper bound set Inf parameters. pruning_coef Pruning coefficient $c_0$ used pruning step PELT algorithm default value 0. cost_adjustment specified \"MBIC\", adjustment term \\(p\\log(2)\\) added pruning coefficient. cost_adjustment specified \"MDL\", adjustment term \\(p\\log_2(2)\\) added pruning coefficient. Detailed discussion pruning coefficient can found references. segment_count initial guess number segments. specified, initial guess number segments 10. initial guess affects initial estimates parameters SeGD. trim Trimming boundary change points change point close boundary counted change point. parameter also specifies minimum distance two change points. several change points mutual distances smaller trim * nrow(data), change points merged one single change point. value parameter 0 1. momentum_coef Momentum coefficient applied update. parameter used loss function bad-shaped maintaining momentum previous update desired. Default value 0, meaning algorithm maintain momentum default. multiple_epochs function can specified adaptive number multiple epochs can utilized improve algorithm's performance. multiple_epochs function length data segment. function returns integer indicating many epochs performed apart default update. default, function returns zero, meaning multiple epochs used update parameters. Example usage:   function let SeGD perform parameter updates additional epoch segment length less 100 additional epoch segments lengths greater equal 100. epsilon Epsilon avoid numerical issues. used Hessian computation Logistic Regression Poisson Regression. order Order AR(\\(p\\)), VAR(\\(p\\)) ARIMA(\\(p\\), \\(d\\), \\(q\\)) model. p Number covariates model. specified, number covariates inferred data, .e., p = ncol(data) - 1. parameter superseded order case time series models: \"ar\", \"var\", \"arima\". variance_estimation estimate variance / covariance matrix data. specified, variance / covariance matrix estimated using data. cp_only TRUE, change points returned. Otherwise, cost function values together estimated parameters segment also returned. default value set FALSE plot can used visualize results built-model. cp_only performance impact algorithm, since cost values estimated parameters segment need calculated stored. users interested change points, setting cp_only TRUE help computational cost. vanilla_percentage parameter \\(v\\) zero one. segment, length \\(vT\\), cost value computed performing exact minimization loss function parameter. length greater \\(vT\\), cost value approximated SeGD. Therefore, parameter induces algorithm can interpreted interpolation dynamic programming SeGD (\\(v = 0\\)) vanilla PELT (\\(v = 1\\)). readers referred references details. warm_start TRUE, algorithm use estimated parameters previous segment initial value current segment. parameter used \"glm\" families. ... parameters specific models. include.mean used determine mean/intercept term included ARIMA(\\(p\\), \\(d\\), \\(q\\)) GARCH(\\(p\\), \\(q\\)) models. r.progress used control progress bar. default progress bar shown. disable , set r.progress = FALSE. p.response used specify number response variables. parameter especially useful linear models multivariate responses.","code":"cost_gradient = function(data, theta) {   ...   return(gradient) } multiple_epochs = function(segment_length) {   if (segment_length < 100) 1   else 0 }"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find change points efficiently — fastcpd","text":"fastcpd object.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd.html","id":"gallery","dir":"Reference","previous_headings":"","what":"Gallery","title":"Find change points efficiently — fastcpd","text":"https://github.com/doccstat/fastcpd/tree/main/tests/testthat/examples","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Find change points efficiently — fastcpd","text":"Xingchi Li, Xianyang Zhang (2024). “fastcpd: Fast Change Point Detection R.” arXiv:2404.05933, https://arxiv.org/abs/2404.05933. Xianyang Zhang, Trisha Dawn (2023). “Sequential Gradient Descent Quasi-Newton's Method Change-Point Analysis.” Ruiz, Francisco, Dy, Jennifer, van de Meent, Jan-Willem (eds.), Proceedings 26th International Conference Artificial Intelligence Statistics, volume 206 series Proceedings Machine Learning Research, 1129-1143.","code":""},{"path":[]},{"path":"https://fastcpd.xingchi.li/reference/fastcpd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find change points efficiently — fastcpd","text":"","code":"if (requireNamespace(\"mvtnorm\", quietly = TRUE)) {   set.seed(1)   n <- 200   p <- 4   d <- 2   x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p))   theta_1 <- matrix(runif(8, -3, -1), nrow = p)   theta_2 <- matrix(runif(8, -1, 3), nrow = p)   y <- rbind(     x[1:125, ] %*% theta_1 + mvtnorm::rmvnorm(125, rep(0, d), 3 * diag(d)),     x[126:n, ] %*% theta_2 + mvtnorm::rmvnorm(75, rep(0, d), 3 * diag(d))   )   result_mlm <- fastcpd(     cbind(y.1, y.2) ~ . - 1, cbind.data.frame(y = y, x = x), family = \"lm\"   )   summary(result_mlm) } #>  #> Call: #> fastcpd(formula = cbind(y.1, y.2) ~ . - 1, data = cbind.data.frame(y = y,  #>     x = x), family = \"lm\") #>  #> Change points: #> 125  #>  #> Cost values: #> 522.26 317.5959  #>  #> Parameters: #>   segment 1  segment 2 #> 1 -2.870872  0.1521972 #> 2 -2.946976 -0.4559850 #> 3 -2.971442  0.6369559 #> 4 -1.257543  1.5949148 #> 5 -1.501633  0.3805461 #> 6 -2.737303  1.9325768 #> 7 -2.034249  2.2404699 #> 8 -2.438544  2.2219857 if (   requireNamespace(\"mvtnorm\", quietly = TRUE) &&     requireNamespace(\"stats\", quietly = TRUE) ) {   set.seed(1)   n <- 400 + 300 + 500   p <- 5   x <- mvtnorm::rmvnorm(n, mean = rep(0, p), sigma = diag(p))   theta <- rbind(     mvtnorm::rmvnorm(1, mean = rep(0, p - 3), sigma = diag(p - 3)),     mvtnorm::rmvnorm(1, mean = rep(5, p - 3), sigma = diag(p - 3)),     mvtnorm::rmvnorm(1, mean = rep(9, p - 3), sigma = diag(p - 3))   )   theta <- cbind(theta, matrix(0, 3, 3))   theta <- theta[rep(seq_len(3), c(400, 300, 500)), ]   y_true <- rowSums(x * theta)   factor <- c(     2 * stats::rbinom(400, size = 1, prob = 0.95) - 1,     2 * stats::rbinom(300, size = 1, prob = 0.95) - 1,     2 * stats::rbinom(500, size = 1, prob = 0.95) - 1   )   y <- factor * y_true + stats::rnorm(n)   data <- cbind.data.frame(y, x)   huber_threshold <- 1   huber_loss <- function(data, theta) {     residual <- data[, 1] - data[, -1, drop = FALSE] %*% theta     indicator <- abs(residual) <= huber_threshold     sum(       residual^2 / 2 * indicator +         huber_threshold * (           abs(residual) - huber_threshold / 2         ) * (1 - indicator)     )   }   huber_loss_gradient <- function(data, theta) {     residual <- c(data[nrow(data), 1] - data[nrow(data), -1] %*% theta)     if (abs(residual) <= huber_threshold) {       -residual * data[nrow(data), -1]     } else {       -huber_threshold * sign(residual) * data[nrow(data), -1]     }   }   huber_loss_hessian <- function(data, theta) {     residual <- c(data[nrow(data), 1] - data[nrow(data), -1] %*% theta)     if (abs(residual) <= huber_threshold) {       outer(data[nrow(data), -1], data[nrow(data), -1])     } else {       0.01 * diag(length(theta))     }   }   huber_regression_result <- fastcpd(     formula = y ~ . - 1,     data = data,     beta = (p + 1) * log(n) / 2,     cost = huber_loss,     cost_gradient = huber_loss_gradient,     cost_hessian = huber_loss_hessian   )   summary(huber_regression_result) } #>  #> Call: #> fastcpd(formula = y ~ . - 1, data = data, beta = (p + 1) * log(n)/2,  #>     cost = huber_loss, cost_gradient = huber_loss_gradient, cost_hessian = huber_loss_hessian) #>  #> Change points: #> 418 726  #>  #> Parameters: #>   segment 1 segment 2 segment 3 #> 1         0         0         0 #> 2         0         0         0 #> 3         0         0         0 #> 4         0         0         0 #> 5         0         0         0 # \\donttest{ set.seed(1) p <- 1 x <- matrix(rnorm(375 * p, 0, 1), ncol = p) theta <- rbind(rnorm(p, 0, 1), rnorm(p, 2, 1)) y <- c(   rbinom(200, 1, 1 / (1 + exp(-x[1:200, ] %*% theta[1, , drop = FALSE]))),   rbinom(175, 1, 1 / (1 + exp(-x[201:375, ] %*% theta[2, , drop = FALSE]))) ) data <- data.frame(y = y, x = x) result_builtin <- suppressWarnings(fastcpd.binomial(data)) logistic_loss <- function(data, theta) {   x <- data[, -1, drop = FALSE]   y <- data[, 1]   u <- x %*% theta   nll <- -y * u + log(1 + exp(u))   nll[u > 10] <- -y[u > 10] * u[u > 10] + u[u > 10]   sum(nll) } logistic_loss_gradient <- function(data, theta) {   x <- data[nrow(data), -1, drop = FALSE]   y <- data[nrow(data), 1]   c(-(y - 1 / (1 + exp(-x %*% theta)))) * x } logistic_loss_hessian <- function(data, theta) {   x <- data[nrow(data), -1]   prob <- 1 / (1 + exp(-x %*% theta))   (x %o% x) * c((1 - prob) * prob) } result_custom <- fastcpd(   formula = y ~ . - 1,   data = data,   epsilon = 1e-5,   cost = logistic_loss,   cost_gradient = logistic_loss_gradient,   cost_hessian = logistic_loss_hessian ) result_builtin@cp_set #> [1] 201 result_custom@cp_set #> [1] 198 # } # \\donttest{ if (requireNamespace(\"mvtnorm\", quietly = TRUE)) {   set.seed(1)   n <- 480   p_true <- 6   p <- 50   x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p))   theta_0 <- rbind(     runif(p_true, -5, -2),     runif(p_true, -3, 3),     runif(p_true, 2, 5),     runif(p_true, -5, 5)   )   theta_0 <- cbind(theta_0, matrix(0, ncol = p - p_true, nrow = 4))   y <- c(     x[1:80, ] %*% theta_0[1, ] + rnorm(80, 0, 1),     x[81:200, ] %*% theta_0[2, ] + rnorm(120, 0, 1),     x[201:320, ] %*% theta_0[3, ] + rnorm(120, 0, 1),     x[321:n, ] %*% theta_0[4, ] + rnorm(160, 0, 1)   )   small_lasso_data <- cbind.data.frame(y, x)   result_no_vp <- fastcpd.lasso(     small_lasso_data,     beta = \"BIC\",     cost_adjustment = NULL,     pruning_coef = 0   )   summary(result_no_vp)   result_20_vp <- fastcpd.lasso(     small_lasso_data,     beta = \"BIC\",     cost_adjustment = NULL,     vanilla_percentage = 0.2,     pruning_coef = 0   )   summary(result_20_vp) } #>  #> Call: #> fastcpd.lasso(data = small_lasso_data, beta = \"BIC\", cost_adjustment = NULL,  #>     pruning_coef = 0) #>  #> Change points: #> 79 202 325  #>  #> Cost values: #> 225.1888 483.1718 296.2071 234.5633  #>  #> Parameters: #> 50 x 4 sparse Matrix of class \"dgCMatrix\" #>       segment 1  segment 2 segment 3 segment 4 #>  [1,] -1.711812 -1.6765421  3.912308 -2.514218 #>  [2,] -1.582950 -1.3620689  3.369924  2.332381 #>  [3,] -3.219438  0.9095076  4.147441  3.012944 #>  [4,] -3.981378  .          1.882587 -2.665623 #>  [5,] -3.877523  .          3.957234  2.472344 #>  [6,] -3.105195 -1.7059755  2.487288  3.490967 #>  [7,]  .         .          .         .        #>  [8,]  .         .          .         .        #>  [9,]  .         .          .         .        #> [10,]  .         .          .         .        #> [11,]  .         .          .         .        #> [12,]  .         .          .         .        #> [13,]  .         .          .         .        #> [14,]  .         .          .         .        #> [15,]  .         .          .         .        #> [16,]  .         .          .         .        #> [17,]  .         .          .         .        #> [18,]  .         .          .         .        #> [19,]  .         .          .         .        #> [20,]  .         .          .         .        #> [21,]  .         .          .         .        #> [22,]  .         .          .         .        #> [23,]  .         .          .         .        #> [24,]  .         .          .         .        #> [25,]  .         .          .         .        #> [26,]  .         .          .         .        #> [27,]  .         .          .         .        #> [28,]  .         .          .         .        #> [29,]  .         .          .         .        #> [30,]  .         .          .         .        #> [31,]  .         .          .         .        #> [32,]  .         .          .         .        #> [33,]  .         .          .         .        #> [34,]  .         .          .         .        #> [35,]  .         .          .         .        #> [36,]  .         .          .         .        #> [37,]  .         .          .         .        #> [38,]  .         .          .         .        #> [39,]  .         .          .         .        #> [40,]  .         .          .         .        #> [41,]  .         .          .         .        #> [42,]  .         .          .         .        #> [43,]  .         .          .         .        #> [44,]  .         .          .         .        #> [45,]  .         .          .         .        #> [46,]  .         .          .         .        #> [47,]  .         .          .         .        #> [48,]  .         .          .         .        #> [49,]  .         .          .         .        #> [50,]  .         .          .         .        #>  #> Call: #> fastcpd.lasso(data = small_lasso_data, beta = \"BIC\", cost_adjustment = NULL,  #>     vanilla_percentage = 0.2, pruning_coef = 0) #>  #> Change points: #> 80 202 320  #>  #> Cost values: #> 165.2546 441.1355 169.5999 179.529  #>  #> Parameters: #> 50 x 4 sparse Matrix of class \"dgCMatrix\" #>       segment 1 segment 2 segment 3 segment 4 #>  [1,] -1.913439 -1.847690  4.279765 -2.618052 #>  [2,] -1.767632 -1.523499  3.477482  2.512695 #>  [3,] -3.413538  1.004398  4.477043  3.148531 #>  [4,] -4.123507  .         1.926447 -2.711508 #>  [5,] -4.023657  .         4.012015  2.627367 #>  [6,] -3.265791 -1.818040  2.552415  3.685795 #>  [7,]  .         .         .         .        #>  [8,]  .         .         .         .        #>  [9,]  .         .         .         .        #> [10,]  .         .         .         .        #> [11,]  .         .         .         .        #> [12,]  .         .         .         .        #> [13,]  .         .         .         .        #> [14,]  .         .         .         .        #> [15,]  .         .         .         .        #> [16,]  .         .         .         .        #> [17,]  .         .         .         .        #> [18,]  .         .         .         .        #> [19,]  .         .         .         .        #> [20,]  .         .         .         .        #> [21,]  .         .         .         .        #> [22,]  .         .         .         .        #> [23,]  .         .         .         .        #> [24,]  .         .         .         .        #> [25,]  .         .         .         .        #> [26,]  .         .         .         .        #> [27,]  .         .         .         .        #> [28,]  .         .         .         .        #> [29,]  .         .         .         .        #> [30,]  .         .         .         .        #> [31,]  .         .         .         .        #> [32,]  .         .         .         .        #> [33,]  .         .         .         .        #> [34,]  .         .         .         .        #> [35,]  .         .         .         .        #> [36,]  .         .         .         .        #> [37,]  .         .         .         .        #> [38,]  .         .         .         .        #> [39,]  .         .         .         .        #> [40,]  .         .         .         .        #> [41,]  .         .         .         .        #> [42,]  .         .         .         .        #> [43,]  .         .         .         .        #> [44,]  .         .         .         .        #> [45,]  .         .         .         .        #> [46,]  .         .         .         .        #> [47,]  .         .         .         .        #> [48,]  .         .         .         .        #> [49,]  .         .         .         .        #> [50,]  .         .         .         .        # }"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_ar.html","id":null,"dir":"Reference","previous_headings":"","what":"Find change points efficiently in AR(\\(p\\)) models — fastcpd_ar","title":"Find change points efficiently in AR(\\(p\\)) models — fastcpd_ar","text":"fastcpd_ar() fastcpd.ar() wrapper functions fastcpd() find change points AR(\\(p\\)) models. function similar fastcpd() except data default one-column matrix univariate vector thus formula required .","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_ar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find change points efficiently in AR(\\(p\\)) models — fastcpd_ar","text":"","code":"fastcpd_ar(data, order = 0, ...)  fastcpd.ar(data, order = 0, ...)"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_ar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find change points efficiently in AR(\\(p\\)) models — fastcpd_ar","text":"data numeric vector, matrix, data frame time series object. order positive integer specifying order AR model. ... arguments passed fastcpd(), example, segment_count. One special argument can passed include.mean, logical value indicating whether mean included model. default value TRUE.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_ar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find change points efficiently in AR(\\(p\\)) models — fastcpd_ar","text":"fastcpd object.","code":""},{"path":[]},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_ar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find change points efficiently in AR(\\(p\\)) models — fastcpd_ar","text":"","code":"set.seed(1) n <- 1000 x <- rep(0, n + 3) for (i in 1:600) {   x[i + 3] <- 0.6 * x[i + 2] - 0.2 * x[i + 1] + 0.1 * x[i] + rnorm(1, 0, 3) } for (i in 601:1000) {   x[i + 3] <- 0.3 * x[i + 2] + 0.4 * x[i + 1] + 0.2 * x[i] + rnorm(1, 0, 3) } result <- fastcpd.ar(x[3 + seq_len(n)], 3) summary(result) #>  #> Call: #> fastcpd.ar(data = x[3 + seq_len(n)], order = 3) #>  #> Change points: #> 614  #>  #> Cost values: #> 2754.116 2038.945  #>  #> Parameters: #>     segment 1 segment 2 #> 1  0.57120256 0.2371809 #> 2 -0.20985108 0.4031244 #> 3  0.08221978 0.2290323 plot(result)  set.seed(1) n <- 1000 x <- rep(0, n + 3) for (i in 1:600) {   x[i + 3] <- 0.6 * x[i + 2] - 0.2 * x[i + 1] + 0.1 * x[i] + rnorm(1, 0, 3) } for (i in 601:1000) {   x[i + 3] <- 0.3 * x[i + 2] + 0.4 * x[i + 1] + 0.2 * x[i] + rnorm(1, 0, 3) } result <-   fastcpd.ar(x[3 + seq_len(n)], 3, beta = \"MDL\", cost_adjustment = \"MDL\") summary(result) #>  #> Call: #> fastcpd.ar(data = x[3 + seq_len(n)], order = 3, beta = \"MDL\",  #>     cost_adjustment = \"MDL\") #>  #> Change points: #> 614  #>  #> Cost values: #> 3973.35 2941.576  #>  #> Parameters: #>     segment 1 segment 2 #> 1  0.57120256 0.2371809 #> 2 -0.20985108 0.4031244 #> 3  0.08221978 0.2290323 plot(result)"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_arima.html","id":null,"dir":"Reference","previous_headings":"","what":"Find change points efficiently in ARIMA(\\(p\\), \\(d\\), \\(q\\)) models — fastcpd_arima","title":"Find change points efficiently in ARIMA(\\(p\\), \\(d\\), \\(q\\)) models — fastcpd_arima","text":"fastcpd_arima() fastcpd.arima() wrapper functions fastcpd() find change points ARIMA(\\(p\\), \\(d\\), \\(q\\)) models. function similar fastcpd() except data default one-column matrix univariate vector thus formula required .","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_arima.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find change points efficiently in ARIMA(\\(p\\), \\(d\\), \\(q\\)) models — fastcpd_arima","text":"","code":"fastcpd_arima(data, order = 0, ...)  fastcpd.arima(data, order = 0, ...)"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_arima.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find change points efficiently in ARIMA(\\(p\\), \\(d\\), \\(q\\)) models — fastcpd_arima","text":"data numeric vector, matrix, data frame time series object. order vector length three specifying order ARIMA model. ... arguments passed fastcpd(), example, segment_count. One special argument can passed include.mean, logical value indicating whether mean included model. default value TRUE.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_arima.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find change points efficiently in ARIMA(\\(p\\), \\(d\\), \\(q\\)) models — fastcpd_arima","text":"fastcpd object.","code":""},{"path":[]},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_arima.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find change points efficiently in ARIMA(\\(p\\), \\(d\\), \\(q\\)) models — fastcpd_arima","text":"","code":"# \\donttest{ set.seed(1) n <- 801 w <- rnorm(n + 1, 0, 3) dx <- rep(0, n + 1) x <- rep(0, n + 1) for (i in 1:400) {   dx[i + 1] <- 0.9 * dx[i] + w[i + 1] - 0.1 * w[i]   x[i + 1] <- x[i] + dx[i + 1] } for (i in 401:n) {   dx[i + 1] <- -0.6 * dx[i] + w[i + 1] + 0.3 * w[i]   x[i + 1] <- x[i] + dx[i + 1] } result <- fastcpd.arima(   diff(x[1 + seq_len(n)]),   c(1, 0, 1),   segment_count = 3,   include.mean = FALSE ) #> Warning: possible convergence problem: optim gave code = 1 #> Warning: possible convergence problem: optim gave code = 1 #> Warning: possible convergence problem: optim gave code = 1 #> Warning: possible convergence problem: optim gave code = 1 #> Warning: possible convergence problem: optim gave code = 1 #> Warning: possible convergence problem: optim gave code = 1 #> Warning: possible convergence problem: optim gave code = 1 #> Warning: possible convergence problem: optim gave code = 1 #> Warning: possible convergence problem: optim gave code = 1 #> Warning: possible convergence problem: optim gave code = 1 #> Warning: possible convergence problem: optim gave code = 1 #> Warning: possible convergence problem: optim gave code = 1 #> Warning: possible convergence problem: optim gave code = 1 #> Warning: possible convergence problem: optim gave code = 1 #> Warning: possible convergence problem: optim gave code = 1 #> Warning: possible convergence problem: optim gave code = 1 #> Warning: possible convergence problem: optim gave code = 1 summary(result) #>  #> Call: #> fastcpd.arima(data = diff(x[1 + seq_len(n)]), order = c(1, 0,  #>     1), segment_count = 3, include.mean = FALSE) #>  #> Change points: #> 429  #>  #> Cost values: #> 1088.875 973.5151  #>  #> Parameters: #>   segment 1 segment 2 #> 1         0         0 #> 2         0         0 #> 3         0         0 plot(result)  # }"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_arma.html","id":null,"dir":"Reference","previous_headings":"","what":"Find change points efficiently in ARMA(\\(p\\), \\(q\\)) models — fastcpd_arma","title":"Find change points efficiently in ARMA(\\(p\\), \\(q\\)) models — fastcpd_arma","text":"fastcpd_arma() fastcpd.arma() wrapper functions fastcpd() find change points ARMA(\\(p\\), \\(q\\)) models. function similar fastcpd() except data default one-column matrix univariate vector thus formula required .","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_arma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find change points efficiently in ARMA(\\(p\\), \\(q\\)) models — fastcpd_arma","text":"","code":"fastcpd_arma(data, order = c(0, 0), ...)  fastcpd.arma(data, order = c(0, 0), ...)"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_arma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find change points efficiently in ARMA(\\(p\\), \\(q\\)) models — fastcpd_arma","text":"data numeric vector, matrix, data frame time series object. order vector length two specifying order ARMA model. ... arguments passed fastcpd(), example, segment_count.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_arma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find change points efficiently in ARMA(\\(p\\), \\(q\\)) models — fastcpd_arma","text":"fastcpd object.","code":""},{"path":[]},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_arma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find change points efficiently in ARMA(\\(p\\), \\(q\\)) models — fastcpd_arma","text":"","code":"# \\donttest{ set.seed(1) n <- 200 w <- rnorm(n + 3, 0, 3) x <- rep(0, n + 3) for (i in 1:150) {   x[i + 3] <- 0.1 * x[i + 2] - 0.3 * x[i + 1] + 0.1 * x[i] +     0.1 * w[i + 2] + 0.5 * w[i + 1] + w[i + 3] } for (i in 151:n) {   x[i + 3] <- 0.3 * x[i + 2] + 0.1 * x[i + 1] - 0.3 * x[i] -     0.6 * w[i + 2] - 0.1 * w[i + 1] + w[i + 3] } result <- suppressWarnings(   fastcpd.arma(     data = x[3 + seq_len(n)],     order = c(3, 2),     segment_count = 3,     lower = c(rep(-1, 3 + 2), 1e-10),     upper = c(rep(1, 3 + 2), Inf),     line_search = c(1, 0.1, 1e-2),     beta = \"BIC\",     cost_adjustment = \"BIC\",     trim = 0.025   ) ) summary(result) #>  #> Call: #> fastcpd.arma(data = x[3 + seq_len(n)], order = c(3, 2), segment_count = 3,  #>     lower = c(rep(-1, 3 + 2), 1e-10), upper = c(rep(1, 3 + 2),  #>         Inf), line_search = c(1, 0.1, 0.01), beta = \"BIC\", cost_adjustment = \"BIC\",  #>     trim = 0.025) #>  #> Change points: #> 139  #>  #> Cost values: #> 330.6779 157.0954  #>  #> Parameters: #>    segment 1  segment 2 #> 1  0.7108329  1.2165407 #> 2 -0.1568921 -0.7959726 #> 3 -0.1388433 -0.1341928 #> 4 -0.5309670 -1.4286676 #> 5  0.3217713  0.9999122 #> 6  6.8097404  9.4577537 plot(result)  # }"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_binomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Find change points efficiently in logistic regression models — fastcpd_binomial","title":"Find change points efficiently in logistic regression models — fastcpd_binomial","text":"fastcpd_binomial() fastcpd.binomial() wrapper functions fastcpd() find change points logistic regression models. function similar fastcpd() except data default matrix data frame response variable first column thus formula required .","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_binomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find change points efficiently in logistic regression models — fastcpd_binomial","text":"","code":"fastcpd_binomial(data, ...)  fastcpd.binomial(data, ...)"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_binomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find change points efficiently in logistic regression models — fastcpd_binomial","text":"data matrix data frame response variable first column. ... arguments passed fastcpd(), example, segment_count.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_binomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find change points efficiently in logistic regression models — fastcpd_binomial","text":"fastcpd object.","code":""},{"path":[]},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_binomial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find change points efficiently in logistic regression models — fastcpd_binomial","text":"","code":"if (requireNamespace(\"mvtnorm\", quietly = TRUE)) {   set.seed(1)   n <- 500   p <- 4   x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p))   theta <- rbind(rnorm(p, 0, 1), rnorm(p, 2, 1))   y <- c(     rbinom(300, 1, 1 / (1 + exp(-x[1:300, ] %*% theta[1, ]))),     rbinom(200, 1, 1 / (1 + exp(-x[301:n, ] %*% theta[2, ])))   )   result <- suppressWarnings(fastcpd.binomial(cbind(y, x)))   summary(result)   plot(result) } #>  #> Call: #> fastcpd.binomial(data = cbind(y, x)) #>  #> Change points: #> 302  #>  #> Cost values: #> 136.8846 66.69302  #>  #> Parameters: #>    segment 1 segment 2 #> 1 -0.9260182 2.1294962 #> 2 -1.6033835 2.7583247 #> 3  1.0343338 2.3818010 #> 4  0.3653870 0.7261152"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_family.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper functions for fastcpd — fastcpd_family","title":"Wrapper functions for fastcpd — fastcpd_family","text":"Wrapper functions fastcpd find change points various models.","code":""},{"path":[]},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_garch.html","id":null,"dir":"Reference","previous_headings":"","what":"Find change points efficiently in GARCH(\\(p\\), \\(q\\)) models — fastcpd_garch","title":"Find change points efficiently in GARCH(\\(p\\), \\(q\\)) models — fastcpd_garch","text":"fastcpd_garch() fastcpd.garch() wrapper functions fastcpd() find change points GARCH(\\(p\\), \\(q\\)) models. function similar fastcpd() except data default one-column matrix univariate vector thus formula required .","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_garch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find change points efficiently in GARCH(\\(p\\), \\(q\\)) models — fastcpd_garch","text":"","code":"fastcpd_garch(data, order = c(0, 0), ...)  fastcpd.garch(data, order = c(0, 0), ...)"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_garch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find change points efficiently in GARCH(\\(p\\), \\(q\\)) models — fastcpd_garch","text":"data numeric vector, matrix, data frame time series object. order positive integer vector length two specifying order GARCH model. ... arguments passed fastcpd(), example, segment_count.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_garch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find change points efficiently in GARCH(\\(p\\), \\(q\\)) models — fastcpd_garch","text":"fastcpd object.","code":""},{"path":[]},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_garch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find change points efficiently in GARCH(\\(p\\), \\(q\\)) models — fastcpd_garch","text":"","code":"# \\donttest{ set.seed(1) n <- 1501 sigma_2 <- rep(1, n + 1) x <- rep(0, n + 1) for (i in seq_len(750)) {   sigma_2[i + 1] <- 20 + 0.8 * x[i]^2 + 0.1 * sigma_2[i]   x[i + 1] <- rnorm(1, 0, sqrt(sigma_2[i + 1])) } for (i in 751:n) {   sigma_2[i + 1] <- 1 + 0.1 * x[i]^2 + 0.5 * sigma_2[i]   x[i + 1] <- rnorm(1, 0, sqrt(sigma_2[i + 1])) } result <- suppressWarnings(   fastcpd.garch(x[-1], c(1, 1), include.mean = FALSE) ) summary(result) #>  #> Call: #> fastcpd.garch(data = x[-1], order = c(1, 1), include.mean = FALSE) #>  #> Change points: #> 759  #>  #> Cost values: #> 2034.494 736.2013  #>  #> Parameters: #>      segment 1 segment 2 #> 1 7.982285e+01 1.3761900 #> 2 1.965442e-01 0.1254212 #> 3 7.275673e-13 0.3565612 plot(result)  # }"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_lasso.html","id":null,"dir":"Reference","previous_headings":"","what":"Find change points efficiently in penalized linear regression models — fastcpd_lasso","title":"Find change points efficiently in penalized linear regression models — fastcpd_lasso","text":"fastcpd_lasso() fastcpd.lasso() wrapper functions fastcpd() find change points penalized linear regression models. function similar fastcpd() except data default matrix data frame response variable first column thus formula required .","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_lasso.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find change points efficiently in penalized linear regression models — fastcpd_lasso","text":"","code":"fastcpd_lasso(data, ...)  fastcpd.lasso(data, ...)"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_lasso.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find change points efficiently in penalized linear regression models — fastcpd_lasso","text":"data matrix data frame response variable first column. ... arguments passed fastcpd(), example, segment_count.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_lasso.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find change points efficiently in penalized linear regression models — fastcpd_lasso","text":"fastcpd object.","code":""},{"path":[]},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_lasso.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find change points efficiently in penalized linear regression models — fastcpd_lasso","text":"","code":"# \\donttest{ if (   requireNamespace(\"ggplot2\", quietly = TRUE) &&     requireNamespace(\"mvtnorm\", quietly = TRUE) ) {   set.seed(1)   n <- 480   p_true <- 5   p <- 50   x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p))   theta_0 <- rbind(     runif(p_true, -5, -2),     runif(p_true, -3, 3),     runif(p_true, 2, 5),     runif(p_true, -5, 5)   )   theta_0 <- cbind(theta_0, matrix(0, ncol = p - p_true, nrow = 4))   y <- c(     x[1:80, ] %*% theta_0[1, ] + rnorm(80, 0, 1),     x[81:200, ] %*% theta_0[2, ] + rnorm(120, 0, 1),     x[201:320, ] %*% theta_0[3, ] + rnorm(120, 0, 1),     x[321:n, ] %*% theta_0[4, ] + rnorm(160, 0, 1)   )   result <- fastcpd.lasso(     cbind(y, x),     multiple_epochs = function(segment_length) if (segment_length < 30) 1 else 0   )   summary(result)   plot(result)    # Combine estimated thetas with true parameters   thetas <- result@thetas   thetas <- cbind.data.frame(thetas, t(theta_0))   names(thetas) <- c(     \"segment 1\", \"segment 2\", \"segment 3\", \"segment 4\",     \"segment 1 truth\", \"segment 2 truth\", \"segment 3 truth\", \"segment 4 truth\"   )   thetas$coordinate <- c(seq_len(p_true), rep(\"rest\", p - p_true))    # Melt the data frame using base R (i.e., convert from wide to long format)   data_cols <- setdiff(names(thetas), \"coordinate\")   molten <- data.frame(     coordinate = rep(thetas$coordinate, times = length(data_cols)),     variable = rep(data_cols, each = nrow(thetas)),     value = as.vector(as.matrix(thetas[, data_cols]))   )    # Remove the \"segment \" and \" truth\" parts to extract the segment number   molten$segment <- gsub(\"segment \", \"\", molten$variable)   molten$segment <- gsub(\" truth\", \"\", molten$segment)    # Compute height: the numeric value of the segment plus an offset for truth values   molten$height <- as.numeric(gsub(\"segment.*\", \"\", molten$segment)) +     0.2 * as.numeric(grepl(\"truth\", molten$variable))    # Create a parameter indicator based on whether the variable corresponds to truth or estimation   molten$parameter <- ifelse(grepl(\"truth\", molten$variable), \"truth\", \"estimated\")    p <- ggplot2::ggplot() +     ggplot2::geom_point(       data = molten,       ggplot2::aes(         x = value, y = height, shape = coordinate, color = parameter       ),       size = 4     ) +     ggplot2::ylim(0.8, 4.4) +     ggplot2::ylab(\"segment\") +     ggplot2::theme_bw()   print(p) } #>  #> Call: #> fastcpd.lasso(data = cbind(y, x), multiple_epochs = function(segment_length) if (segment_length <  #>     30) 1 else 0) #>  #> Change points: #> 80 200 321  #>  #> Cost values: #> 279.5634 294.3328 286.4413 318.8088  #>  #> Parameters: #> 50 x 4 sparse Matrix of class \"dgCMatrix\" #>       segment 1  segment 2 segment 3  segment 4 #>  [1,] -1.857418 -0.3996309  3.052401 -2.0014044 #>  [2,] -1.950296 -1.8422983  1.702204  3.3916313 #>  [3,] -3.260942 -1.6565430  4.201749 -0.5949362 #>  [4,] -3.807289  0.4543850  3.461070 -2.4616567 #>  [5,] -3.884467  .          4.390503  2.4178720 #>  [6,]  .         .          .         .         #>  [7,]  .         .          .         .         #>  [8,]  .         .          .         .         #>  [9,]  .         .          .         .         #> [10,]  .         .          .         .         #> [11,]  .         .          .         .         #> [12,]  .         .          .         .         #> [13,]  .         .          .         .         #> [14,]  .         .          .         .         #> [15,]  .         .          .         .         #> [16,]  .         .          .         .         #> [17,]  .         .          .         .         #> [18,]  .         .          .         .         #> [19,]  .         .          .         .         #> [20,]  .         .          .         .         #> [21,]  .         .          .         .         #> [22,]  .         .          .         .         #> [23,]  .         .          .         .         #> [24,]  .         .          .         .         #> [25,]  .         .          .         .         #> [26,]  .         .          .         .         #> [27,]  .         .          .         .         #> [28,]  .         .          .         .         #> [29,]  .         .          .         .         #> [30,]  .         .          .         .         #> [31,]  .         .          .         .         #> [32,]  .         .          .         .         #> [33,]  .         .          .         .         #> [34,]  .         .          .         .         #> [35,]  .         .          .         .         #> [36,]  .         .          .         .         #> [37,]  .         .          .         .         #> [38,]  .         .          .         .         #> [39,]  .         .          .         .         #> [40,]  .         .          .         .         #> [41,]  .         .          .         .         #> [42,]  .         .          .         .         #> [43,]  .         .          .         .         #> [44,]  .         .          .         .         #> [45,]  .         .          .         .         #> [46,]  .         .          .         .         #> [47,]  .         .          .         .         #> [48,]  .         .          .         .         #> [49,]  .         .          .         .         #> [50,]  .         .          .         .           # }"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_lm.html","id":null,"dir":"Reference","previous_headings":"","what":"Find change points efficiently in linear regression models — fastcpd_lm","title":"Find change points efficiently in linear regression models — fastcpd_lm","text":"fastcpd_lm() fastcpd.lm() wrapper functions fastcpd() find change points linear regression models. function similar fastcpd() except data default matrix data frame response variable first column thus formula required .","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find change points efficiently in linear regression models — fastcpd_lm","text":"","code":"fastcpd_lm(data, ...)  fastcpd.lm(data, ...)"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_lm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find change points efficiently in linear regression models — fastcpd_lm","text":"data matrix data frame response variable first column. ... arguments passed fastcpd(), example, segment_count.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_lm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find change points efficiently in linear regression models — fastcpd_lm","text":"fastcpd object.","code":""},{"path":[]},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_lm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find change points efficiently in linear regression models — fastcpd_lm","text":"","code":"if (requireNamespace(\"mvtnorm\", quietly = TRUE)) {   set.seed(1)   n <- 300   p <- 4   x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p))   theta_0 <- rbind(c(1, 3.2, -1, 0), c(-1, -0.5, 2.5, -2), c(0.8, 0, 1, 2))   y <- c(     x[1:100, ] %*% theta_0[1, ] + rnorm(100, 0, 3),     x[101:200, ] %*% theta_0[2, ] + rnorm(100, 0, 3),     x[201:n, ] %*% theta_0[3, ] + rnorm(100, 0, 3)   )   result_lm <- fastcpd.lm(cbind(y, x))   summary(result_lm)   plot(result_lm) } #>  #> Call: #> fastcpd.lm(data = cbind(y, x)) #>  #> Change points: #> 97 201  #>  #> Cost values: #> 528.9771 424.3702 471.2645  #>  #> Parameters: #>     segment 1  segment 2 segment 3 #> 1  0.74291290 -0.6153049 0.8733473 #> 2  3.69465275 -0.5034948 0.3222868 #> 3 -1.24746871  2.2522352 1.0188455 #> 4  0.09579985 -1.9875126 2.2761340  # \\donttest{ if (requireNamespace(\"mvtnorm\", quietly = TRUE)) {   set.seed(1)   n <- 600   p <- 4   d <- 2   x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p))   theta_1 <- matrix(runif(8, -3, -1), nrow = p)   theta_2 <- matrix(runif(8, -1, 3), nrow = p)   y <- rbind(     x[1:350, ] %*% theta_1 + mvtnorm::rmvnorm(350, rep(0, d), 3 * diag(d)),     x[351:n, ] %*% theta_2 + mvtnorm::rmvnorm(250, rep(0, d), 3 * diag(d))   )   result_mlm <- fastcpd.lm(cbind.data.frame(y = y, x = x), p.response = 2)   summary(result_mlm) } #>  #> Call: #> fastcpd.lm(data = cbind.data.frame(y = y, x = x), p.response = 2) #>  #> Change points: #> 350  #>  #> Cost values: #> 1431.408 1019.454  #>  #> Parameters: #>   segment 1   segment 2 #> 1 -2.453012  1.68044714 #> 2 -2.295667 -0.46458087 #> 3 -1.327543  1.07765071 #> 4 -2.783358 -0.15196831 #> 5 -1.895117  2.86434615 #> 6 -1.927478  2.61647011 #> 7 -1.168885  1.73783271 #> 8 -1.380168  0.09453771 # }"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Find change points efficiently in mean change models — fastcpd_mean","title":"Find change points efficiently in mean change models — fastcpd_mean","text":"fastcpd_mean() fastcpd.mean() wrapper functions fastcpd() find mean change. function similar fastcpd() except data default matrix data frame vector row / element observation thus formula required .","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find change points efficiently in mean change models — fastcpd_mean","text":"","code":"fastcpd_mean(data, ...)  fastcpd.mean(data, ...)"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find change points efficiently in mean change models — fastcpd_mean","text":"data matrix, data frame vector. ... arguments passed fastcpd(), example, segment_count.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find change points efficiently in mean change models — fastcpd_mean","text":"fastcpd object.","code":""},{"path":[]},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find change points efficiently in mean change models — fastcpd_mean","text":"","code":"set.seed(1) data <- matrix(c(   rnorm(300, mean = 0, sd = 10),   rnorm(400, mean = 50, sd = 10),   rnorm(300, mean = 2, sd = 10) )) system.time(result <- fastcpd.mean(data)) #>    user  system elapsed  #>   0.005   0.000   0.005  summary(result) #>  #> Call: #> fastcpd.mean(data = data) #>  #> Change points: #> 300 700  #>  #> Cost values: #> 124.2113 197.0938 154.3416  #>  #> Parameters: #>   segment 1 segment 2 segment 3 #> 1 0.3358428  49.42092  2.047991 plot(result)  set.seed(1) p <- 3 data <- rbind(   matrix(rnorm(p * 3e+5, mean = 0, sd = 10), ncol = p),   matrix(rnorm(p * 4e+5, mean = 50, sd = 10), ncol = p),   matrix(rnorm(p * 3e+5, mean = 2, sd = 10), ncol = p) ) system.time(result <- fastcpd.mean(data, r.progress = FALSE, cp_only = TRUE)) #>    user  system elapsed  #>   3.962   0.335   3.967  summary(result) #>  #> Call: #> fastcpd.mean(data = data, r.progress = FALSE, cp_only = TRUE) #>  #> Change points: #> 3e+05 7e+05"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_meanvariance.html","id":null,"dir":"Reference","previous_headings":"","what":"Find change points efficiently in mean variance change models — fastcpd_meanvariance","title":"Find change points efficiently in mean variance change models — fastcpd_meanvariance","text":"fastcpd_meanvariance(), fastcpd.meanvariance(), fastcpd_mv(), fastcpd.mv() wrapper functions fastcpd() find meanvariance change. function similar fastcpd() except data default matrix data frame vector row / element observation thus formula required .","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_meanvariance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find change points efficiently in mean variance change models — fastcpd_meanvariance","text":"","code":"fastcpd_meanvariance(data, ...)  fastcpd.meanvariance(data, ...)  fastcpd_mv(data, ...)  fastcpd.mv(data, ...)"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_meanvariance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find change points efficiently in mean variance change models — fastcpd_meanvariance","text":"data matrix, data frame vector. ... arguments passed fastcpd(), example, segment_count.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_meanvariance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find change points efficiently in mean variance change models — fastcpd_meanvariance","text":"fastcpd object.","code":""},{"path":[]},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_meanvariance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find change points efficiently in mean variance change models — fastcpd_meanvariance","text":"","code":"set.seed(1) data <- c(   rnorm(3000, 0, 1),   rnorm(1000, 10, 1),   rnorm(3000, 10, 20),   rnorm(1000, 0, 1) ) system.time(result <- fastcpd.mv(data)) #>    user  system elapsed  #>   0.004   0.000   0.004  summary(result) #>  #> Call: #> fastcpd.mv(data = data) #>  #> Change points: #> 3000 4000 7000  #>  #> Cost values: #> 110.9701 44.33282 9001.941 7.441331  #>  #> Parameters: #>     segment 1 segment 2  segment 3    segment 4 #> 1 -0.00420034 10.016722   9.650309 -0.004211938 #> 2  1.07141035  1.078801 401.934668  1.002069791 plot(result)  set.seed(1) p <- 3 data <- if (requireNamespace(\"mvtnorm\", quietly = TRUE)) {   rbind(     mvtnorm::rmvnorm(2e+5, mean = rep(0, p), sigma = diag(1, p)),     mvtnorm::rmvnorm(1e+5, mean = rep(50, p), sigma = diag(1, p)),     mvtnorm::rmvnorm(2e+5, mean = rep(0, p), sigma = diag(100, p)),     mvtnorm::rmvnorm(2e+5, mean = rep(0, p), sigma = diag(1, p)),     mvtnorm::rmvnorm(1e+5, mean = rep(50, p), sigma = diag(1, p)),     mvtnorm::rmvnorm(2e+5, mean = rep(50, p), sigma = diag(100, p))   ) } else {   rbind(     matrix(rnorm(p * 2e+5, mean = 0, sd = 1), ncol = p),     matrix(rnorm(p * 1e+5, mean = 50, sd = 1), ncol = p),     matrix(rnorm(p * 2e+5, mean = 0, sd = 10), ncol = p),     matrix(rnorm(p * 2e+5, mean = 0, sd = 1), ncol = p),     matrix(rnorm(p * 1e+5, mean = 50, sd = 1), ncol = p),     matrix(rnorm(p * 2e+5, mean = 50, sd = 10), ncol = p)   ) } system.time(result <- fastcpd.mv(data)) #>    user  system elapsed  #>   0.695   0.170   0.865  summary(result) #>  #> Call: #> fastcpd.mv(data = data) #>  #> Change points: #> 2e+05 3e+05 500408 7e+05 8e+05  #>  #> Cost values: #> 108.8674 -43.02536 1385124 -50.71083 377.4763 1381660  #>  #> Parameters: #>       segment 1     segment 2     segment 3     segment 4    segment 5 #> 1   0.001011082 50.0003528125  -0.016501485  0.0033379848 49.995348620 #> 2  -0.001572291 50.0047380197   0.027308617 -0.0002731255 49.995608790 #> 3  -0.001048280 49.9949663194  -0.000285863 -0.0022305825 50.004925725 #> 4   1.001716184  1.0053160771  99.837900270  1.0049251320  1.011184355 #> 5   0.003146441 -0.0061509213   0.155411984  0.0033208418  0.002837378 #> 6   0.001702982 -0.0009432632  -0.174243448 -0.0030404684 -0.001092170 #> 7   0.003146441 -0.0061509213   0.155411984  0.0033208418  0.002837378 #> 8   0.998570871  0.9954591727 100.257688784  0.9940791908  0.999139034 #> 9   0.001008951 -0.0062795529   0.070720757  0.0006369845 -0.001649613 #> 10  0.001702982 -0.0009432632  -0.174243448 -0.0030404684 -0.001092170 #> 11  0.001008951 -0.0062795529   0.070720757  0.0006369845 -0.001649613 #> 12  1.000100554  0.9971197656 100.588745799  0.9998191884  0.995957111 #>       segment 6 #> 1   50.00765767 #> 2   49.97689987 #> 3   50.01812646 #> 4  100.43738403 #> 5    0.09929858 #> 6    0.04291338 #> 7    0.09929858 #> 8   99.71858356 #> 9   -0.09614237 #> 10   0.04291338 #> 11  -0.09614237 #> 12  99.88324093 result@thetas[seq_len(p), ] #>      segment 1 segment 2    segment 3     segment 4 segment 5 segment 6 #> 1  0.001011082  50.00035 -0.016501485  0.0033379848  49.99535  50.00766 #> 2 -0.001572291  50.00474  0.027308617 -0.0002731255  49.99561  49.97690 #> 3 -0.001048280  49.99497 -0.000285863 -0.0022305825  50.00493  50.01813 lapply(result@thetas[seq_len(p^2) + p, ], function(thetas) matrix(thetas, p)) #> $`segment 1` #>             [,1]        [,2]        [,3] #> [1,] 1.001716184 0.003146441 0.001702982 #> [2,] 0.003146441 0.998570871 0.001008951 #> [3,] 0.001702982 0.001008951 1.000100554 #>  #> $`segment 2` #>               [,1]         [,2]          [,3] #> [1,]  1.0053160771 -0.006150921 -0.0009432632 #> [2,] -0.0061509213  0.995459173 -0.0062795529 #> [3,] -0.0009432632 -0.006279553  0.9971197656 #>  #> $`segment 3` #>            [,1]         [,2]         [,3] #> [1,] 99.8379003   0.15541198  -0.17424345 #> [2,]  0.1554120 100.25768878   0.07072076 #> [3,] -0.1742434   0.07072076 100.58874580 #>  #> $`segment 4` #>              [,1]         [,2]          [,3] #> [1,]  1.004925132 0.0033208418 -0.0030404684 #> [2,]  0.003320842 0.9940791908  0.0006369845 #> [3,] -0.003040468 0.0006369845  0.9998191884 #>  #> $`segment 5` #>              [,1]         [,2]         [,3] #> [1,]  1.011184355  0.002837378 -0.001092170 #> [2,]  0.002837378  0.999139034 -0.001649613 #> [3,] -0.001092170 -0.001649613  0.995957111 #>  #> $`segment 6` #>              [,1]        [,2]        [,3] #> [1,] 100.43738403  0.09929858  0.04291338 #> [2,]   0.09929858 99.71858356 -0.09614237 #> [3,]   0.04291338 -0.09614237 99.88324093 #>"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_poisson.html","id":null,"dir":"Reference","previous_headings":"","what":"Find change points efficiently in Poisson regression models — fastcpd_poisson","title":"Find change points efficiently in Poisson regression models — fastcpd_poisson","text":"fastcpd_poisson() fastcpd.poisson() wrapper functions fastcpd() find change points Poisson regression models. function similar fastcpd() except data default matrix data frame response variable first column thus formula required .","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_poisson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find change points efficiently in Poisson regression models — fastcpd_poisson","text":"","code":"fastcpd_poisson(data, ...)  fastcpd.poisson(data, ...)"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_poisson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find change points efficiently in Poisson regression models — fastcpd_poisson","text":"data matrix data frame response variable first column. ... arguments passed fastcpd(), example, segment_count.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_poisson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find change points efficiently in Poisson regression models — fastcpd_poisson","text":"fastcpd object.","code":""},{"path":[]},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_poisson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find change points efficiently in Poisson regression models — fastcpd_poisson","text":"","code":"# \\donttest{ if (requireNamespace(\"mvtnorm\", quietly = TRUE)) {   set.seed(1)   n <- 1100   p <- 3   x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p))   delta <- rnorm(p)   theta_0 <- c(1, 0.3, -1)   y <- c(     rpois(500, exp(x[1:500, ] %*% theta_0)),     rpois(300, exp(x[501:800, ] %*% (theta_0 + delta))),     rpois(200, exp(x[801:1000, ] %*% theta_0)),     rpois(100, exp(x[1001:1100, ] %*% (theta_0 - delta)))   )   result <- fastcpd.poisson(cbind(y, x))   summary(result)   plot(result) } #>  #> Call: #> fastcpd.poisson(data = cbind(y, x)) #>  #> Change points: #> 506 838 1003  #>  #> Cost values: #> 248.1639 221.1317 74.88469 48.95659  #>  #> Parameters: #>    segment 1  segment 2  segment 3  segment 4 #> 1  1.0154681  0.6568705  1.0371861  1.4451928 #> 2  0.2763783 -0.2131387  0.2648813  0.9910079 #> 3 -1.0493262 -0.5942795 -0.9801554 -1.4354638  # }"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Find change points efficiently in time series data — fastcpd_ts","title":"Find change points efficiently in time series data — fastcpd_ts","text":"fastcpd_ts() fastcpd.ts() wrapper functions fastcpd() find change points time series data. function similar fastcpd() except data time series family one \"ar\", \"var\", \"arma\", \"arima\" \"garch\".","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find change points efficiently in time series data — fastcpd_ts","text":"","code":"fastcpd_ts(data, family = NULL, order = c(0, 0, 0), ...)  fastcpd.ts(data, family = NULL, order = c(0, 0, 0), ...)"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find change points efficiently in time series data — fastcpd_ts","text":"data numeric vector, matrix, data frame time series object. family character string specifying family time series. value one \"ar\", \"var\", \"arima\" \"garch\". order positive integer vector length less four specifying order time series. Possible combinations family : \"ar\", NUMERIC(1): AR(\\(p\\)) model using linear regression. \"var\", NUMERIC(1): VAR(\\(p\\)) model using linear regression. \"arima\", NUMERIC(3): ARIMA(\\(p\\), \\(d\\), \\(q\\)) model using stats::arima(). \"garch\", NUMERIC(2): GARCH(\\(p\\), \\(q\\)) model. ... arguments passed fastcpd(), example, segment_count. One special argument can passed include.mean, logical value indicating whether mean included model. default value TRUE.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_ts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find change points efficiently in time series data — fastcpd_ts","text":"fastcpd object.","code":""},{"path":[]},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_ts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find change points efficiently in time series data — fastcpd_ts","text":"","code":"# \\donttest{ # Set seed for reproducibility set.seed(1)  # 1. Define Parameters n <- 500           # Total length of the time series cp1 <- 200         # First change point at time 200 cp2 <- 350         # Second change point at time 350  # Define MA(2) coefficients for each segment ensuring invertibility # MA coefficients affect invertibility; to ensure invertibility, the roots of # the MA polynomial should lie outside the unit circle.  # Segment 1: Time 1 to cp1 theta1_1 <- 0.5 theta2_1 <- -0.3  # Segment 2: Time (cp1+1) to cp2 theta1_2 <- -0.4 theta2_2 <- 0.25  # Segment 3: Time (cp2+1) to n theta1_3 <- 0.6 theta2_3 <- -0.35  # Function to check invertibility for MA(2) is_invertible_ma2 <- function(theta1, theta2) {   # The MA(2) polynomial is: 1 + theta1*z + theta2*z^2 = 0   # Compute the roots of the polynomial   roots <- polyroot(c(1, theta1, theta2))   # Invertible if all roots lie outside the unit circle   all(Mod(roots) > 1) }  # Verify invertibility for each segment stopifnot(is_invertible_ma2(theta1_1, theta2_1)) stopifnot(is_invertible_ma2(theta1_2, theta2_2)) stopifnot(is_invertible_ma2(theta1_3, theta2_3))  # 2. Simulate White Noise e <- rnorm(n + 2, mean = 0, sd = 1)  # Extra terms to handle lag  # 3. Initialize the Time Series y <- numeric(n + 2)  # Extra terms for initial lags (y[1], y[2] are zero)  # 4. Apply MA(2) Model with Change Points for (t in 3:(n + 2)) {  # Start from 3 to have enough lags for MA(2)   # Determine current segment   current_time <- t - 2  # Adjust for the extra lags   if (current_time <= cp1) {     theta <- c(theta1_1, theta2_1)   } else if (current_time <= cp2) {     theta <- c(theta1_2, theta2_2)   } else {     theta <- c(theta1_3, theta2_3)   }    # Compute MA(2) value   y[t] <- e[t] + theta[1] * e[t - 1] + theta[2] * e[t - 2] }  # Remove the initial extra terms y <- y[3:(n + 2)] time <- 1:n  # Function to get roots data for plotting get_roots_data <- function(theta1, theta2, segment) {   roots <- polyroot(c(1, theta1, theta2))   data.frame(     Re = Re(roots),     Im = Im(roots),     Distance = Mod(roots),     Segment = segment   ) }  roots_segment1 <- get_roots_data(theta1_1, theta2_1, \"Segment 1\") roots_segment2 <- get_roots_data(theta1_2, theta2_2, \"Segment 2\") roots_segment3 <- get_roots_data(theta1_3, theta2_3, \"Segment 3\")  (roots_data <- rbind(roots_segment1, roots_segment2, roots_segment3)) #>          Re            Im Distance   Segment #> 1 -1.173599 -5.752739e-16 1.173599 Segment 1 #> 2  2.840266  5.752739e-16 2.840266 Segment 1 #> 3  0.800000  1.833030e+00 2.000000 Segment 2 #> 4  0.800000 -1.833030e+00 2.000000 Segment 2 #> 5 -1.038071 -1.180701e-18 1.038071 Segment 3 #> 6  2.752357  1.180701e-18 2.752357 Segment 3  result <- fastcpd.ts(   y,   \"arma\",   c(0, 2),   lower = c(-2, -2, 1e-10),   upper = c(2, 2, Inf),   line_search = c(1, 0.1, 1e-2),   trim = 0.04 ) summary(result) #>  #> Call: #> fastcpd.ts(data = y, family = \"arma\", order = c(0, 2), lower = c(-2,  #>     -2, 1e-10), upper = c(2, 2, Inf), line_search = c(1, 0.1,  #>     0.01), trim = 0.04) #>  #> Change points: #> 203 356  #>  #> Cost values: #> 281.9365 227.2833 225.577  #>  #> Parameters: #>    segment 1  segment 2  segment 3 #> 1  0.5078739 -0.4503097  0.6216729 #> 2 -0.3659708  0.2392382 -0.3661806 #> 3  0.8648758  1.0333590  1.1822530 plot(result)  # }"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Find change points efficiently in VAR(\\(p\\)) models — fastcpd_var","title":"Find change points efficiently in VAR(\\(p\\)) models — fastcpd_var","text":"fastcpd_var() fastcpd.var() wrapper functions fastcpd_ts() find change points VAR(\\(p\\)) models. function similar fastcpd_ts() except data default matrix row observation thus formula required .","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find change points efficiently in VAR(\\(p\\)) models — fastcpd_var","text":"","code":"fastcpd_var(data, order = 0, ...)  fastcpd.var(data, order = 0, ...)"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find change points efficiently in VAR(\\(p\\)) models — fastcpd_var","text":"data matrix, data frame time series object. order positive integer specifying order VAR model. ... arguments passed fastcpd(), example, segment_count.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find change points efficiently in VAR(\\(p\\)) models — fastcpd_var","text":"fastcpd object.","code":""},{"path":[]},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find change points efficiently in VAR(\\(p\\)) models — fastcpd_var","text":"","code":"set.seed(1) n <- 300 p <- 2 theta_1 <- matrix(c(-0.3, 0.6, -0.5, 0.4, 0.2, 0.2, 0.2, -0.2), nrow = p) theta_2 <- matrix(c(0.3, -0.4, 0.1, -0.5, -0.5, -0.2, -0.5, 0.2), nrow = p) x <- matrix(0, n + 2, p) for (i in 1:200) {   x[i + 2, ] <- theta_1 %*% c(x[i + 1, ], x[i, ]) + rnorm(p, 0, 1) } for (i in 201:n) {   x[i + 2, ] <- theta_2 %*% c(x[i + 1, ], x[i, ]) + rnorm(p, 0, 1) } result <- fastcpd.var(x, 2) summary(result) #>  #> Call: #> fastcpd.var(data = x, order = 2) #>  #> Change points: #> 204  #>  #> Cost values: #> 583.9159 306.6093  #>  #> Parameters: #>    segment 1  segment 2 #> 1 -0.2524511  0.2760795 #> 2 -0.5679217  0.2764738 #> 3  0.2065672 -0.5327953 #> 4  0.2451136 -0.4303701 #> 5  0.5655444 -0.3844917 #> 6  0.3903103 -0.5302748 #> 7  0.1614109 -0.1918981 #> 8 -0.1716114  0.1671678"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_variance.html","id":null,"dir":"Reference","previous_headings":"","what":"Find change points efficiently in variance change models — fastcpd_variance","title":"Find change points efficiently in variance change models — fastcpd_variance","text":"fastcpd_variance() fastcpd.variance() wrapper functions fastcpd() find variance change. function similar fastcpd() except data default matrix data frame vector row / element observation thus formula required .","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_variance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find change points efficiently in variance change models — fastcpd_variance","text":"","code":"fastcpd_variance(data, ...)  fastcpd.variance(data, ...)"},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_variance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find change points efficiently in variance change models — fastcpd_variance","text":"data matrix, data frame vector. ... arguments passed fastcpd(), example, segment_count.","code":""},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_variance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find change points efficiently in variance change models — fastcpd_variance","text":"fastcpd object.","code":""},{"path":[]},{"path":"https://fastcpd.xingchi.li/reference/fastcpd_variance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find change points efficiently in variance change models — fastcpd_variance","text":"","code":"set.seed(1) data <- c(rnorm(300, 0, 1), rnorm(400, 0, 10), rnorm(300, 0, 1)) system.time(result <- fastcpd.variance(data)) #>    user  system elapsed  #>   0.003   0.000   0.002  summary(result) #>  #> Call: #> fastcpd.variance(data = data) #>  #> Change points: #> 300 700  #>  #> Cost values: #> 1.341031 945.1872 30.94909  #>  #> Parameters: #>   segment 1 segment 2 segment 3 #> 1 0.9287098  111.3079  1.159284 plot(result)  if (requireNamespace(\"mvtnorm\", quietly = TRUE)) {   set.seed(1)   p <- 3   data <- rbind(     mvtnorm::rmvnorm(       3e+5, rep(0, p), crossprod(matrix(runif(p^2) * 2 - 1, p))     ),     mvtnorm::rmvnorm(       4e+5, rep(0, p), crossprod(matrix(runif(p^2) * 2 - 1, p))     ),     mvtnorm::rmvnorm(       3e+5, rep(0, p), crossprod(matrix(runif(p^2) * 2 - 1, p))     )   )   result_time <- system.time(     result <- fastcpd.variance(data, r.progress = FALSE, cp_only = TRUE)   )   print(result_time)   summary(result) } #>    user  system elapsed  #>   0.683   0.100   0.783  #>  #> Call: #> fastcpd.variance(data = data, r.progress = FALSE, cp_only = TRUE) #>  #> Change points: #> 300002 700003"},{"path":"https://fastcpd.xingchi.li/reference/occupancy.html","id":null,"dir":"Reference","previous_headings":"","what":"Occupancy Detection Data Set — occupancy","title":"Occupancy Detection Data Set — occupancy","text":"Data set binary classification room occupancy temperature, humidity, light CO2 measurements. Ground-truth occupancy obtained time stamped pictures taken every minute.","code":""},{"path":"https://fastcpd.xingchi.li/reference/occupancy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Occupancy Detection Data Set — occupancy","text":"","code":"occupancy"},{"path":"https://fastcpd.xingchi.li/reference/occupancy.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Occupancy Detection Data Set — occupancy","text":"data frame 9752 rows 7 variables: date Character format \"YYYY-MM-DD hh:mm:ss\"   2015-02-11 14:48:00 2015-02-18 09:19:00 Temperature Temperature Celsius Humidity Humidity Light Light CO2 CO2 HumidityRatio Humidity Ratio Occupancy Binary variable values 0 (unoccupied) 1","code":""},{"path":"https://fastcpd.xingchi.li/reference/occupancy.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Occupancy Detection Data Set — occupancy","text":"<https://github.com/LuisM78/Occupancy-detection-data>","code":""},{"path":"https://fastcpd.xingchi.li/reference/plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the data and the change points for a fastcpd object — plot.fastcpd","title":"Plot the data and the change points for a fastcpd object — plot.fastcpd","text":"Plot data change points fastcpd object","code":""},{"path":"https://fastcpd.xingchi.li/reference/plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the data and the change points for a fastcpd object — plot.fastcpd","text":"","code":"# S3 method for class 'fastcpd' plot(   x,   color_max_count = Inf,   data_point_alpha = 0.8,   data_point_linewidth = 0.5,   data_point_size = 1,   legend_position = \"none\",   panel_background = ggplot2::element_blank(),   panel_border = ggplot2::element_rect(fill = NA, colour = \"grey20\"),   panel_grid_major = ggplot2::element_line(colour = \"grey98\"),   panel_grid_minor = ggplot2::element_line(colour = \"grey98\"),   segment_separator_alpha = 0.8,   segment_separator_color = \"grey\",   segment_separator_linetype = \"dashed\",   strip_background = ggplot2::element_rect(fill = \"grey85\", colour = \"grey20\"),   xlab = NULL,   ylab = NULL,   ... )  # S4 method for class 'fastcpd,missing' plot(   x,   color_max_count = Inf,   data_point_alpha = 0.8,   data_point_linewidth = 0.5,   data_point_size = 1,   legend_position = \"none\",   panel_background = ggplot2::element_blank(),   panel_border = ggplot2::element_rect(fill = NA, colour = \"grey20\"),   panel_grid_major = ggplot2::element_line(colour = \"grey98\"),   panel_grid_minor = ggplot2::element_line(colour = \"grey98\"),   segment_separator_alpha = 0.8,   segment_separator_color = \"grey\",   segment_separator_linetype = \"dashed\",   strip_background = ggplot2::element_rect(fill = \"grey85\", colour = \"grey20\"),   xlab = NULL,   ylab = NULL,   ... )"},{"path":"https://fastcpd.xingchi.li/reference/plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the data and the change points for a fastcpd object — plot.fastcpd","text":"x fastcpd object. color_max_count Maximum number colors use plotting segments. data_point_alpha Alpha data points. data_point_linewidth Linewidth data points. data_point_size Size data points. legend_position Position legend. panel_background Background panel. panel_border Border panel. panel_grid_major Major grid lines panel. panel_grid_minor Minor grid lines panel. segment_separator_alpha Alpha segment separator lines. segment_separator_color Color segment separator lines. segment_separator_linetype Linetype segment separator lines. strip_background Background strip. xlab Label x-axis. ylab Label y-axis. ... Ignored.","code":""},{"path":"https://fastcpd.xingchi.li/reference/plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the data and the change points for a fastcpd object — plot.fastcpd","text":"return value, called plotting.","code":""},{"path":"https://fastcpd.xingchi.li/reference/plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the data and the change points for a fastcpd object — plot.fastcpd","text":"","code":"if (requireNamespace(\"mvtnorm\", quietly = TRUE)) {   set.seed(1)   p <- 1   x <- mvtnorm::rmvnorm(300, rep(0, p), diag(p))   theta_0 <- matrix(c(1, -1, 0.5))   y <- c(     x[1:100, ] * theta_0[1, ] + rnorm(100, 0, 1),     x[101:200, ] * theta_0[2, ] + rnorm(100, 0, 1),     x[201:300, ] * theta_0[3, ] + rnorm(100, 0, 1)   )   result <- fastcpd.lm(cbind(y, x))   summary(result)   plot(result) } #>  #> Call: #> fastcpd.lm(data = cbind(y, x)) #>  #> Change points: #> 100 201  #>  #> Cost values: #> 51.02185 69.03349 48.51457  #>  #> Parameters: #>   segment 1  segment 2 segment 3 #> 1 0.9520606 -0.8307605 0.4593161"},{"path":"https://fastcpd.xingchi.li/reference/print.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the call and the change points for a fastcpd object — print.fastcpd","title":"Print the call and the change points for a fastcpd object — print.fastcpd","text":"Print call change points fastcpd object","code":""},{"path":"https://fastcpd.xingchi.li/reference/print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the call and the change points for a fastcpd object — print.fastcpd","text":"","code":"# S3 method for class 'fastcpd' print(x, ...)  # S4 method for class 'fastcpd' print(x, ...)"},{"path":"https://fastcpd.xingchi.li/reference/print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the call and the change points for a fastcpd object — print.fastcpd","text":"x fastcpd object. ... Ignored.","code":""},{"path":"https://fastcpd.xingchi.li/reference/print.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the call and the change points for a fastcpd object — print.fastcpd","text":"Return (temporarily) invisible copy fastcpd object. Called primarily printing change points model.","code":""},{"path":"https://fastcpd.xingchi.li/reference/show.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the available methods for a fastcpd object — show.fastcpd","title":"Show the available methods for a fastcpd object — show.fastcpd","text":"Show available methods fastcpd object","code":""},{"path":"https://fastcpd.xingchi.li/reference/show.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the available methods for a fastcpd object — show.fastcpd","text":"","code":"# S3 method for class 'fastcpd' show(object)  # S4 method for class 'fastcpd' show(object)"},{"path":"https://fastcpd.xingchi.li/reference/show.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the available methods for a fastcpd object — show.fastcpd","text":"object fastcpd object.","code":""},{"path":"https://fastcpd.xingchi.li/reference/show.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show the available methods for a fastcpd object — show.fastcpd","text":"return value, called showing list available methods fastcpd object.","code":""},{"path":"https://fastcpd.xingchi.li/reference/summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the summary of a fastcpd object — summary.fastcpd","title":"Show the summary of a fastcpd object — summary.fastcpd","text":"Show summary fastcpd object","code":""},{"path":"https://fastcpd.xingchi.li/reference/summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the summary of a fastcpd object — summary.fastcpd","text":"","code":"# S3 method for class 'fastcpd' summary(object, ...)  # S4 method for class 'fastcpd' summary(object, ...)"},{"path":"https://fastcpd.xingchi.li/reference/summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the summary of a fastcpd object — summary.fastcpd","text":"object fastcpd object. ... Ignored.","code":""},{"path":"https://fastcpd.xingchi.li/reference/summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show the summary of a fastcpd object — summary.fastcpd","text":"Return (temporarily) invisible copy fastcpd object. Called primarily printing summary model including call, change points, cost values estimated parameters.","code":""},{"path":"https://fastcpd.xingchi.li/reference/transcriptome.html","id":null,"dir":"Reference","previous_headings":"","what":"Transcription Profiling of 57 Human Bladder Carcinoma Samples — transcriptome","title":"Transcription Profiling of 57 Human Bladder Carcinoma Samples — transcriptome","text":"Transcriptome analysis 57 bladder carcinomas Affymetrix HG-U95A HG-U95Av2 microarrays","code":""},{"path":"https://fastcpd.xingchi.li/reference/transcriptome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transcription Profiling of 57 Human Bladder Carcinoma Samples — transcriptome","text":"","code":"transcriptome"},{"path":"https://fastcpd.xingchi.li/reference/transcriptome.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Transcription Profiling of 57 Human Bladder Carcinoma Samples — transcriptome","text":"data frame 2215 rows 43 variables: 3 Individual 3 4 Individual 4 5 Individual 5 6 Individual 6 7 Individual 7 8 Individual 8 9 Individual 9 10 Individual 10 14 Individual 14 15 Individual 15 16 Individual 16 17 Individual 17 18 Individual 18 19 Individual 19 21 Individual 21 22 Individual 22 24 Individual 24 26 Individual 26 28 Individual 28 30 Individual 30 31 Individual 31 33 Individual 33 34 Individual 34 35 Individual 35 36 Individual 36 37 Individual 37 38 Individual 38 39 Individual 39 40 Individual 40 41 Individual 41 42 Individual 42 43 Individual 43 44 Individual 44 45 Individual 45 46 Individual 46 47 Individual 47 48 Individual 48 49 Individual 49 50 Individual 50 51 Individual 51 53 Individual 53 54 Individual 54 57 Individual 57","code":""},{"path":"https://fastcpd.xingchi.li/reference/transcriptome.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Transcription Profiling of 57 Human Bladder Carcinoma Samples — transcriptome","text":"<https://www.ebi.ac.uk/biostudies/arrayexpress/studies/E-TABM-147> <https://github.com/cran/ecp/tree/master/data>","code":""},{"path":"https://fastcpd.xingchi.li/reference/transcriptome.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transcription Profiling of 57 Human Bladder Carcinoma Samples — transcriptome","text":"","code":"# \\donttest{ if (requireNamespace(\"ggplot2\", quietly = TRUE)) {   result <- fastcpd.mean(transcriptome$\"10\", trim = 0.005)   summary(result)   plot(result)    result_all <- fastcpd.mean(     transcriptome,     beta = (ncol(transcriptome) + 1) * log(nrow(transcriptome)) / 2 * 5,     trim = 0   )    plots <- lapply(     seq_len(ncol(transcriptome)), function(i) {       ggplot2::ggplot(         data = data.frame(           x = seq_along(transcriptome[, i]), y = transcriptome[, i]         ),         ggplot2::aes(x = x, y = y)       ) +         ggplot2::geom_line(color = \"steelblue\") +         ggplot2::geom_vline(           xintercept = result_all@cp_set,           color = \"red\",           linetype = \"dotted\",           linewidth = 0.5,           alpha = 0.7         ) +         ggplot2::theme_void()     }   )    if (requireNamespace(\"gridExtra\", quietly = TRUE)) {     gridExtra::grid.arrange(grobs = plots, ncol = 1, nrow = ncol(transcriptome))   } } #>  #> Call: #> fastcpd.mean(data = transcriptome$\"10\", trim = 0.005) #>  #> Change points: #> 177 264 394 534 578 656 788 811 869 934 960 1051 1141 1286 1319 1367 1567 1657 1724 1906 1972 1994 2041 2058 2143 2200  #>  #> Cost values: #> 80.49071 38.37606 71.90419 109.9683 171.8534 18.56209 58.95214 3.133287 24.77084 49.27842 36.67618 63.41361 57.65488 91.34648 7.042687 46.13709 69.31514 141.4311 290.2077 77.60234 52.61751 41.31567 71.81727 13.09335 36.00007 14.8323 12.87647  #>  #> Parameters: #>   segment 1  segment 2   segment 3  segment 4   segment 5   segment 6 #> 1 0.1190983 -0.1536289 -0.09267099 0.04273128 -0.09614537 -0.05387782 #>    segment 7  segment 8 segment 9 segment 10 segment 11 segment 12  segment 13 #> 1 0.05691421 -0.1948394  0.131278  -0.106936 0.04207402  0.2234673 -0.04063204 #>   segment 14 segment 15 segment 16  segment 17 segment 18  segment 19 #> 1  0.2078473 -0.1606692   0.137678 -0.03118501  -0.102344 -0.02422461 #>   segment 20 segment 21 segment 22 segment 23 segment 24 segment 25  segment 26 #> 1  0.1770554 -0.4549208  0.2467106  0.3936517 -0.2434067 -0.1881482 -0.05634799 #>   segment 27 #> 1 -0.3037632   # }"},{"path":"https://fastcpd.xingchi.li/reference/uk_seatbelts.html","id":null,"dir":"Reference","previous_headings":"","what":"UK Seatbelts Data — uk_seatbelts","title":"UK Seatbelts Data — uk_seatbelts","text":"Road Casualties Great Britain 1969–84.","code":""},{"path":"https://fastcpd.xingchi.li/reference/uk_seatbelts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UK Seatbelts Data — uk_seatbelts","text":"","code":"uk_seatbelts"},{"path":"https://fastcpd.xingchi.li/reference/uk_seatbelts.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"UK Seatbelts Data — uk_seatbelts","text":"uk_seatbelts multiple time series, columns DriversKilled car drivers killed. front front-seat passengers killed seriously injured. rear rear-seat passengers killed seriously injured. kms distance driven. PetrolPrice petrol price. VanKilled number van (‘light goods vehicle’) drivers. law 0/1: law effect month?","code":""},{"path":"https://fastcpd.xingchi.li/reference/uk_seatbelts.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"UK Seatbelts Data — uk_seatbelts","text":"R package datasets","code":""},{"path":"https://fastcpd.xingchi.li/reference/uk_seatbelts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"UK Seatbelts Data — uk_seatbelts","text":"","code":"if (requireNamespace(\"ggplot2\", quietly = TRUE)) {   result_ar <- fastcpd.ar(diff(uk_seatbelts[, \"drivers\"], 12), 1, beta = \"BIC\")   summary(result_ar)   plot(result_ar)    result_lm <- suppressMessages(fastcpd.lm(     diff(uk_seatbelts[, c(\"drivers\", \"kms\", \"PetrolPrice\", \"law\")], lag = 12)   ))    # Compute change point dates:   cp_dates <- as.POSIXlt(as.Date(\"1969-01-01\", format = \"%Y-%m-%d\"))   cp_dates$mon <- cp_dates$mon + (1 + result_lm@cp_set + 12)   cp_dates <- as.Date(cp_dates)    # Convert the time series to Date objects:   # For a monthly ts object, extract year and month manually.   time_vals <- time(uk_seatbelts)   years <- floor(time_vals)   months <- round((time_vals - years) * 12 + 1)   dates <- as.Date(paste(years, months, \"01\", sep = \"-\"), format = \"%Y-%m-%d\")    # Prepare the data frame for plotting   # 'color' is defined similarly to the original code.   uk_seatbelts_df <- data.frame(     dates = dates,     drivers = as.numeric(uk_seatbelts[, \"drivers\"]),     color = as.factor((dates < cp_dates[1]) + (dates < cp_dates[2]))   )    p <- ggplot2::ggplot(     data = uk_seatbelts_df,     ggplot2::aes(x = dates, y = drivers, color = color)   ) +     ggplot2::geom_line() +     ggplot2::geom_vline(       xintercept = cp_dates,       linetype = \"dashed\",       color = \"red\"     ) +     ggplot2::scale_x_date(date_labels = \"%b %Y\", date_breaks = \"1 year\") +     ggplot2::annotate(       \"text\",       x = cp_dates,       y = 1025,       label = format(cp_dates, \"%b %Y\"),       color = \"blue\"     ) +     ggplot2::theme_bw() +     ggplot2::theme(legend.position = \"none\")   print(p) } #>  #> Call: #> fastcpd.ar(data = diff(uk_seatbelts[, \"drivers\"], 12), order = 1,  #>     beta = \"BIC\") #>  #> Change points: #> 71 158  #>  #> Cost values: #> 1294599 914677.1 310959.6  #>  #> Parameters: #>   segment 1   segment 2 segment 3 #> 1 0.5543967 -0.07501079 0.7825427"},{"path":"https://fastcpd.xingchi.li/reference/variance_arma.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance estimation for ARMA model with change points — variance_arma","title":"Variance estimation for ARMA model with change points — variance_arma","text":"Estimate variance block take average.","code":""},{"path":"https://fastcpd.xingchi.li/reference/variance_arma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variance estimation for ARMA model with change points — variance_arma","text":"","code":"variance_arma(data, p, q, max_order = p * q)  variance.arma(data, p, q, max_order = p * q)"},{"path":"https://fastcpd.xingchi.li/reference/variance_arma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variance estimation for ARMA model with change points — variance_arma","text":"data one-column matrix vector. p order autoregressive part. q order moving average part. max_order maximum order AR model consider.","code":""},{"path":"https://fastcpd.xingchi.li/reference/variance_arma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variance estimation for ARMA model with change points — variance_arma","text":"numeric value representing variance.","code":""},{"path":"https://fastcpd.xingchi.li/reference/variance_arma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variance estimation for ARMA model with change points — variance_arma","text":"","code":"set.seed(1) n <- 300 w <- rnorm(n + 3, 0, 10) x <- rep(0, n + 3) for (i in 1:200) {   x[i + 3] <- 0.1 * x[i + 2] - 0.3 * x[i + 1] + 0.1 * x[i] +     0.1 * w[i + 2] + 0.5 * w[i + 1] + w[i + 3] } for (i in 201:n) {   x[i + 3] <- 0.3 * x[i + 2] + 0.1 * x[i + 1] - 0.3 * x[i] -     0.6 * w[i + 2] - 0.1 * w[i + 1] + w[i + 3] } (result <- variance.arma(x[-seq_len(3)], p = 3, q = 2)) #> $table #>         sigma2      AIC      BIC #> AR(1) 104.8647 4.659337 4.671683 #> AR(2) 100.2594 4.621094 4.645786 #> AR(3) 115.3102 4.767626 4.804664 #> AR(4) 105.4397 4.684806 4.734190 #> AR(5) 115.4258 4.781962 4.843691 #> AR(6) 117.0668 4.802745 4.876821 #>  #> $sigma2_aic #> [1] 100.2594 #>  #> $sigma2_bic #> [1] 100.2594 #>"},{"path":"https://fastcpd.xingchi.li/reference/variance_lm.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance estimation for linear models with change points — variance_lm","title":"Variance estimation for linear models with change points — variance_lm","text":"Estimate variance block take average.","code":""},{"path":"https://fastcpd.xingchi.li/reference/variance_lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variance estimation for linear models with change points — variance_lm","text":"","code":"variance_lm(data, d = 1, block_size = ncol(data) - d + 1, outlier_iqr = Inf)  variance.lm(data, d = 1, block_size = ncol(data) - d + 1, outlier_iqr = Inf)"},{"path":"https://fastcpd.xingchi.li/reference/variance_lm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variance estimation for linear models with change points — variance_lm","text":"data matrix data frame response variable first column. d dimension response variable. block_size size blocks use variance estimation. outlier_iqr number interquartile ranges use threshold outlier detection.","code":""},{"path":"https://fastcpd.xingchi.li/reference/variance_lm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variance estimation for linear models with change points — variance_lm","text":"numeric value representing variance.","code":""},{"path":"https://fastcpd.xingchi.li/reference/variance_lm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variance estimation for linear models with change points — variance_lm","text":"","code":"if (requireNamespace(\"mvtnorm\", quietly = TRUE)) {   set.seed(1)   n <- 300   p <- 4   x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p))   theta <- rbind(c(1, 3.2, -1, 0), c(-1, -0.5, 2.5, -2), c(0.8, 0, 1, 2))   y <- c(     x[1:100, ] %*% theta[1, ] + rnorm(100, 0, 3),     x[101:200, ] %*% theta[2, ] + rnorm(100, 0, 3),     x[201:n, ] %*% theta[3, ] + rnorm(100, 0, 3)   )   (sigma2 <- variance.lm(cbind(y, x)))    set.seed(1)   n <- 300   p <- 4   d <- 2   x <- mvtnorm::rmvnorm(n, rep(0, p), diag(p))   theta <- cbind(c(1, 3.2, -1, 0), c(-1, -0.5, 2.5, -2), c(0.8, 0, 1, 2))   theta <- cbind(theta, theta)   y <- rbind(     x[1:100, ] %*% theta[, 1:2] +       mvtnorm::rmvnorm(100, rep(0, d), diag(3, d)),     x[101:200, ] %*% theta[, 3:4] +       mvtnorm::rmvnorm(100, rep(0, d), diag(3, d)),     x[201:n, ] %*% theta[, 5:6] +       mvtnorm::rmvnorm(100, rep(0, d), diag(3, d))   )   (sigma <- variance.lm(cbind(y, x), d = d)) } #>            [,1]       [,2] #> [1,] 3.71946553 0.01962422 #> [2,] 0.03459023 3.59825273"},{"path":"https://fastcpd.xingchi.li/reference/variance_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance estimation for mean change models — variance_mean","title":"Variance estimation for mean change models — variance_mean","text":"Implement Rice estimator variance mean change models.","code":""},{"path":"https://fastcpd.xingchi.li/reference/variance_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variance estimation for mean change models — variance_mean","text":"","code":"variance_mean(data)  variance.mean(data)"},{"path":"https://fastcpd.xingchi.li/reference/variance_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variance estimation for mean change models — variance_mean","text":"data matrix data frame data points row.","code":""},{"path":"https://fastcpd.xingchi.li/reference/variance_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variance estimation for mean change models — variance_mean","text":"matrix representing variance-covariance matrix numeric value representing variance.","code":""},{"path":"https://fastcpd.xingchi.li/reference/variance_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variance estimation for mean change models — variance_mean","text":"","code":"if (requireNamespace(\"mvtnorm\", quietly = TRUE)) {   set.seed(1)   p <- 3   data <- rbind(     mvtnorm::rmvnorm(300, mean = rep(0, p), sigma = diag(100, p)),     mvtnorm::rmvnorm(400, mean = rep(50, p), sigma = diag(100, p)),     mvtnorm::rmvnorm(300, mean = rep(2, p), sigma = diag(100, p))   )   (sigma <- variance.mean(data)) } #>             [,1]        [,2]       [,3] #> [1,] 113.5442077  -0.1433207  -2.973472 #> [2,]  -0.1433207 106.1627730   8.430343 #> [3,]  -2.9734719   8.4303433 112.602989"},{"path":"https://fastcpd.xingchi.li/reference/variance_median.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance estimation for median change models — variance_median","title":"Variance estimation for median change models — variance_median","text":"Implement Rice estimator.","code":""},{"path":"https://fastcpd.xingchi.li/reference/variance_median.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variance estimation for median change models — variance_median","text":"","code":"variance_median(data)  variance.median(data)"},{"path":"https://fastcpd.xingchi.li/reference/variance_median.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variance estimation for median change models — variance_median","text":"data vector data points.","code":""},{"path":"https://fastcpd.xingchi.li/reference/variance_median.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variance estimation for median change models — variance_median","text":"numeric value representing variance.","code":""},{"path":"https://fastcpd.xingchi.li/reference/variance_median.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variance estimation for median change models — variance_median","text":"","code":"(sigma2 <- variance.median(well_log)) #> [1] 5803645"},{"path":"https://fastcpd.xingchi.li/reference/well_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Well-log Dataset from Numerical Bayesian Methods Applied to Signal Processing — well_log","title":"Well-log Dataset from Numerical Bayesian Methods Applied to Signal Processing — well_log","text":"well-known well-log dataset used many changepoint papers obtained Alan Turing Institute GitHub repository licensed MIT license.","code":""},{"path":"https://fastcpd.xingchi.li/reference/well_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Well-log Dataset from Numerical Bayesian Methods Applied to Signal Processing — well_log","text":"","code":"well_log"},{"path":"https://fastcpd.xingchi.li/reference/well_log.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Well-log Dataset from Numerical Bayesian Methods Applied to Signal Processing — well_log","text":"Time-Series length 4050.","code":""},{"path":"https://fastcpd.xingchi.li/reference/well_log.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Well-log Dataset from Numerical Bayesian Methods Applied to Signal Processing — well_log","text":"<https://github.com/alan-turing-institute/TCPD>","code":""},{"path":"https://fastcpd.xingchi.li/reference/well_log.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Well-log Dataset from Numerical Bayesian Methods Applied to Signal Processing — well_log","text":"","code":"result <- fastcpd.mean(well_log, trim = 0.001) summary(result) #>  #> Call: #> fastcpd.mean(data = well_log, trim = 0.001) #>  #> Change points: #> 7 19 356 448 717 844 1034 1070 1215 1369 1428 1526 1685 1866 2047 2409 2469 2531 2591 2777 3490 3533 3672 3744 3855 3886 3945 3963 4035  #>  #> Cost values: #> 16.91676 38.86712 210.3847 68.36128 179.7825 78.94805 95.02146 23.20542 713.0629 1077.902 139.2378 292.0271 89.21581 105.3906 100.7872 174.6923 25.33967 31.33531 21.49939 893.0716 576.5011 62.34357 72.94392 65.09989 55.41323 36.90478 134.989 57.99145 51.65122 17.6364  #>  #> Parameters: #>   segment 1 segment 2 segment 3 segment 4 segment 5 segment 6 segment 7 #> 1    131889  99849.77  112027.4  110326.7  112927.9  111704.2  113602.4 #>   segment 8 segment 9 segment 10 segment 11 segment 12 segment 13 segment 14 #> 1  105619.2  126801.8   126664.1   124647.5   125292.5   134977.4   114811.5 #>   segment 15 segment 16 segment 17 segment 18 segment 19 segment 20 segment 21 #> 1   129263.3   119356.9   135435.4   119580.8   129117.2   114845.8   110800.3 #>   segment 22 segment 23 segment 24 segment 25 segment 26 segment 27 segment 28 #> 1   112094.9   110050.3   111688.1     107527   111524.8   108912.4   73923.62 #>   segment 29 segment 30 #> 1   110564.8   105222.2 plot(result)  # \\donttest{ if (requireNamespace(\"matrixStats\", quietly = TRUE)) {   sigma2 <- variance.median(well_log)   median_loss <- function(data) {     sum(abs(data - matrixStats::colMedians(data))) / sqrt(sigma2) / 2   }   result <- fastcpd(     formula = ~ x - 1,     data = cbind.data.frame(x = well_log),     cost = median_loss,     trim = 0.002   )   summary(result)    segment_starts <- c(1, result@cp_set)   segment_ends <- c(result@cp_set - 1, length(well_log))   residual <- NULL   for (segment_index in seq_along(segment_starts)) {     segment <-       well_log[segment_starts[segment_index]:segment_ends[segment_index]]     residual <- c(residual, segment - median(segment))   }    result@residuals <- matrix(residual)   result@data <- data.frame(x = c(well_log))   plot(result) } #>  #> Call: #> fastcpd(formula = ~x - 1, data = cbind.data.frame(x = well_log),  #>     cost = median_loss, trim = 0.002) #>  #> Change points: #> 19 577 1034 1070 1216 1361 1428 1526 1685 1866 2047 2409 2469 2531 2591 2775 3744 3855 3945 3963  #>  #> Parameters: #>  [1] segment 1  segment 2  segment 3  segment 4  segment 5  segment 6  #>  [7] segment 7  segment 8  segment 9  segment 10 segment 11 segment 12 #> [13] segment 13 segment 14 segment 15 segment 16 segment 17 segment 18 #> [19] segment 19 segment 20 segment 21 #> <0 rows> (or 0-length row.names) #> Built-in plot should only work for built-in families.  # }"},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-0161","dir":"Changelog","previous_headings":"","what":"fastcpd 0.16.1","title":"fastcpd 0.16.1","text":"CRAN release: 2025-03-20 Skip tests CRAN.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-0160","dir":"Changelog","previous_headings":"","what":"fastcpd 0.16.0","title":"fastcpd 0.16.0","text":"CRAN release: 2025-03-13 Performance improvement. Less package dependencies.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-0150","dir":"Changelog","previous_headings":"","what":"fastcpd 0.15.0","title":"fastcpd 0.15.0","text":"Remove constants. Add parameter variance_estimation allowing users specify variance covariance matrix known.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-0147","dir":"Changelog","previous_headings":"","what":"fastcpd 0.14.7","title":"fastcpd 0.14.7","text":"Simplify methods initialization.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-0146","dir":"Changelog","previous_headings":"","what":"fastcpd 0.14.6","title":"fastcpd 0.14.6","text":"CRAN release: 2024-11-05 Update package comparison remove packages breaking seed setting.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-0145","dir":"Changelog","previous_headings":"","what":"fastcpd 0.14.5","title":"fastcpd 0.14.5","text":"Add pre-compiled vignettes.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-0144","dir":"Changelog","previous_headings":"","what":"fastcpd 0.14.4","title":"fastcpd 0.14.4","text":"Simplify code. Expose fastcpd_impl API use packages.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-0143","dir":"Changelog","previous_headings":"","what":"fastcpd 0.14.3","title":"fastcpd 0.14.3","text":"CRAN release: 2024-04-26 Skip certain tests CRAN.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-0142","dir":"Changelog","previous_headings":"","what":"fastcpd 0.14.2","title":"fastcpd 0.14.2","text":"Fix CRAN noSuggests error.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-0141","dir":"Changelog","previous_headings":"","what":"fastcpd 0.14.1","title":"fastcpd 0.14.1","text":"CRAN release: 2024-04-18 Fix possible numeric issues CRAN breaking updates packages.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-0140","dir":"Changelog","previous_headings":"","what":"fastcpd 0.14.0","title":"fastcpd 0.14.0","text":"CRAN release: 2024-04-16 Correct mBIC. Add citation.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-0132","dir":"Changelog","previous_headings":"","what":"fastcpd 0.13.2","title":"fastcpd 0.13.2","text":"Remove package check examples. Use proper pruning coefficients MBIC MDL. Make residuals matrices. Use preprocess faster mean change detection. Update examples demonstrating faster mean change. Replace comparison packages vignettes strange dependencies results eval = FALSE.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-0131","dir":"Changelog","previous_headings":"","what":"fastcpd 0.13.1","title":"fastcpd 0.13.1","text":"CRAN release: 2024-04-01 Default pruning lasso. Comment gfpop due https://github.com/doccstat/fastcpd/issues/10.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-0130","dir":"Changelog","previous_headings":"","what":"fastcpd 0.13.0","title":"fastcpd 0.13.0","text":"Update documentations.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-0124","dir":"Changelog","previous_headings":"","what":"fastcpd 0.12.4","title":"fastcpd 0.12.4","text":"Customizable pretty plots.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-0123","dir":"Changelog","previous_headings":"","what":"fastcpd 0.12.3","title":"fastcpd 0.12.3","text":"Remove pruning parameter replace convexity_coef = -Inf.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-0122","dir":"Changelog","previous_headings":"","what":"fastcpd 0.12.2","title":"fastcpd 0.12.2","text":"CRAN release: 2024-03-19 Update vignettes.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-0121","dir":"Changelog","previous_headings":"","what":"fastcpd 0.12.1","title":"fastcpd 0.12.1","text":"CRAN release: 2024-03-12 Remove useless C++ codes. Add debug points C++. Add examples data well_log. Add detection comparison well_log data. Add variance estimator median change. Deprecate winsorize_minval winsorize_maxval.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-0120","dir":"Changelog","previous_headings":"","what":"fastcpd 0.12.0","title":"fastcpd 0.12.0","text":"Add Rice estimation ARMA model variance estimation. Add time comparison using Well-log data vignettes.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-0113","dir":"Changelog","previous_headings":"","what":"fastcpd 0.11.3","title":"fastcpd 0.11.3","text":"Add Rice estimator mean change variance estimation.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-0112","dir":"Changelog","previous_headings":"","what":"fastcpd 0.11.2","title":"fastcpd 0.11.2","text":"Export variance estimator function linear models.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-0111","dir":"Changelog","previous_headings":"","what":"fastcpd 0.11.1","title":"fastcpd 0.11.1","text":"Add package comparison CptNonPar, gfpop, InspectChangepoint, jointseg, Rbeast VARDetect.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-0110","dir":"Changelog","previous_headings":"","what":"fastcpd 0.11.0","title":"fastcpd 0.11.0","text":"Note: now , MBIC used default penalty selection beta parameter. Add penalty selection criteria using BIC: (p + 1) * log(nrow(data)) / 2 Modified BIC: (p + 2) * log(nrow(data)) / 2 adjusted cost function. MDL: (p + 2) * log(nrow(data)) / 2 adjusted cost function. mean time, numeric value can passed beta well explicitly specify penalty BIC.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-0103","dir":"Changelog","previous_headings":"","what":"fastcpd 0.10.3","title":"fastcpd 0.10.3","text":"CRAN release: 2024-01-24 Add package check examples tests.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-0102","dir":"Changelog","previous_headings":"","what":"fastcpd 0.10.2","title":"fastcpd 0.10.2","text":"Remove bcp according ","code":"Package ‘bcp’ was removed from the CRAN repository.  Formerly available versions can be obtained from the archive.  Archived on 2024-01-12 as email to the maintainer is undeliverable.  A summary of the most recent check results can be obtained from the check results archive.  Please use the canonical form https://CRAN.R-project.org/package=bcp to link to this page."},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-0101","dir":"Changelog","previous_headings":"","what":"fastcpd 0.10.1","title":"fastcpd 0.10.1","text":"CRAN release: 2024-01-09 Increase test coverage. Use interactive() check current R session interactive.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-0100","dir":"Changelog","previous_headings":"","what":"fastcpd 0.10.0","title":"fastcpd 0.10.0","text":"CRAN release: 2023-12-21 Add package comparison packages.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-099","dir":"Changelog","previous_headings":"","what":"fastcpd 0.9.9","title":"fastcpd 0.9.9","text":"CRAN release: 2023-12-11 Add small shiny app.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-098","dir":"Changelog","previous_headings":"","what":"fastcpd 0.9.8","title":"fastcpd 0.9.8","text":"Preliminary support ARMA(p, q) model parameter order = c(p, q) family \"arma\". Add fastcpd.arma / fastcpd_arma ARMA(p, q) model. Add adaptive increasing beta values.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-097","dir":"Changelog","previous_headings":"","what":"fastcpd 0.9.7","title":"fastcpd 0.9.7","text":"Add lower upper parameters denote lower upper bounds parameters. Add line search. Add hardcoded ARMA(3, 2).","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-096","dir":"Changelog","previous_headings":"","what":"fastcpd 0.9.6","title":"fastcpd 0.9.6","text":"Add bitcoin well_log data. Add residual calculation mean family. Add plots bitcoin data. Fix residual calculation time series data seegments small. Handle variance estimation errors.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-095","dir":"Changelog","previous_headings":"","what":"fastcpd 0.9.5","title":"fastcpd 0.9.5","text":"Add wrapper functions AR(p) family: fastcpd.ar / fastcpd_ar, ARIMA(p, d, q) family: fastcpd.arima / fastcpd_arima, GARCH(p, q) family: fastcpd.garch / fastcpd_garch, linear regression family: fastcpd.lm / fastcpd_lm, logistic regression family: fastcpd.binomial / fastcpd_binomial, poisson regression family: fastcpd.poisson / fastcpd_poisson, penalized linear regression family: fastcpd.lasso / fastcpd_lasso, MA(q) model: fastcpd.ma / fastcpd_ma, mean change: fastcpd.mean / fastcpd_mean, variance change: fastcpd.variance / fastcpd_variance, mean variance change: fastcpd.meanvariance / fastcpd_meanvariance / fastcpd.mv / fastcpd_mv. Replace \"gaussian\" family \"lm\". Add progress bar. Fix design matrix formula bug.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-094","dir":"Changelog","previous_headings":"","what":"fastcpd 0.9.4","title":"fastcpd 0.9.4","text":"Fix sanity check. Add small AR(1) data gallery. Fix VAR(p) model bug. Add VAR(2) example Gallery. Remove commented code.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-093","dir":"Changelog","previous_headings":"","what":"fastcpd 0.9.3","title":"fastcpd 0.9.3","text":"Deprecate “vanilla” family vanilla_percentage parameter. Add check utility functions. Add MA(4) example. Fix bug beta updated old beta still use. Remove tests estimating variance “gaussian” family dynamically. Merge beta updating get_segment_statistics.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-092","dir":"Changelog","previous_headings":"","what":"fastcpd 0.9.2","title":"fastcpd 0.9.2","text":"Add gallery vignettes. Remove cheatsheets pdf package. Use forecast package ARIMA model. Use fGarch package GARCH model.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-091","dir":"Changelog","previous_headings":"","what":"fastcpd 0.9.1","title":"fastcpd 0.9.1","text":"Wrap && around || parentheses. Add ma(4) example using custom cost function. Add full support AR(p), MA(q) ARIMA(p, d, q) models.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-090","dir":"Changelog","previous_headings":"","what":"fastcpd 0.9.0","title":"fastcpd 0.9.0","text":"CRAN release: 2023-10-19 Submit CRAN update.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-084","dir":"Changelog","previous_headings":"","what":"fastcpd 0.8.4","title":"fastcpd 0.8.4","text":"Add cheatsheets. Refactor code utilize cost_function_wrapper. Optimize warm start.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-083","dir":"Changelog","previous_headings":"","what":"fastcpd 0.8.3","title":"fastcpd 0.8.3","text":"Add fastcpd.ts / fastcpd_ts time series data. Fix pre segmengation bug lasso. Fix bug related vanilla_percentage parameter lasso. Add tests invalid family fastcpd.ts. Remove cp_only = TRUE default family “custom”. Improved plotting “ar” “var” families. Add test coverage cp_only = TRUE fastcpd_ts. Increase test coverage. Provide user selection ggplot2 installed.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-082","dir":"Changelog","previous_headings":"","what":"fastcpd 0.8.2","title":"fastcpd 0.8.2","text":"Add cheatsheets WIP. Add smaller examples test penalized linear regression.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-081","dir":"Changelog","previous_headings":"","what":"fastcpd 0.8.1","title":"fastcpd 0.8.1","text":"Add new “ar” family autoregressive models. Add new “var” family vector autoregressive models.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-080","dir":"Changelog","previous_headings":"","what":"fastcpd 0.8.0","title":"fastcpd 0.8.0","text":"Deal following: Separate use internal C++ cost functions user-defined R cost functions. Add Codecov Icicle plot README. Remove cost_optim cost_update RcppExports.R. Estimate variance “gaussian” family dynamically.","code":"Due to the excessive calls to `glmnet` between R and C++, it is better to use the R implementation of `fastcpd` for lasso."},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-076","dir":"Changelog","previous_headings":"","what":"fastcpd 0.7.6","title":"fastcpd 0.7.6","text":"Move default cost functions definition inside fastcpd definition. Define constant unordered set store family sets. Avoid using length(formals(cost)) check number arguments cost function. Introduce internal family “vanilla”.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-075","dir":"Changelog","previous_headings":"","what":"fastcpd 0.7.5","title":"fastcpd 0.7.5","text":"Add variance estimation example linear regression. Update reference page. Add validation family. Add user selection ggplot2 installed. Add AR(1) using forecast example tests.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-074","dir":"Changelog","previous_headings":"","what":"fastcpd 0.7.4","title":"fastcpd 0.7.4","text":"Update website UI. Update fastcpd documentation.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-073","dir":"Changelog","previous_headings":"","what":"fastcpd 0.7.3","title":"fastcpd 0.7.3","text":"Allow multiple response variables formula. Add fastcpd logo README.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-072","dir":"Changelog","previous_headings":"","what":"fastcpd 0.7.2","title":"fastcpd 0.7.2","text":"CRAN release: 2023-09-23 Add suggested package checking tests. Try solve amazing clang-ASAN error CRAN:","code":"Error in dyn.load(file, DLLpath = DLLpath, ...) :   unable to load shared object '/data/gannet/ripley/R/test-clang/mvtnorm/libs/mvtnorm.so':   /data/gannet/ripley/R/test-clang/mvtnorm/libs/mvtnorm.so: undefined symbol: _ZNK7Fortran7runtime10Terminator5CrashEPKcz Calls: <Anonymous> ... asNamespace -> loadNamespace -> library.dynam -> dyn.load"},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-071","dir":"Changelog","previous_headings":"","what":"fastcpd 0.7.1","title":"fastcpd 0.7.1","text":"Add package citation.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-070","dir":"Changelog","previous_headings":"","what":"fastcpd 0.7.0","title":"fastcpd 0.7.0","text":"CRAN release: 2023-09-21 Remove C++ unit tests using catch commented code since new version development version Rcpp yet available CRAN. Related pull request: https://github.com/RcppCore/Rcpp/pull/1274. Add documentation fastcpd method.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-065","dir":"Changelog","previous_headings":"","what":"fastcpd 0.6.5","title":"fastcpd 0.6.5","text":"Add experiments.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-064","dir":"Changelog","previous_headings":"","what":"fastcpd 0.6.4","title":"fastcpd 0.6.4","text":"Check warning messages tests. encapsulation FastcpdParameters members.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-063","dir":"Changelog","previous_headings":"","what":"fastcpd 0.6.3","title":"fastcpd 0.6.3","text":"Add CRAN release badge.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-062","dir":"Changelog","previous_headings":"","what":"fastcpd 0.6.2","title":"fastcpd 0.6.2","text":"CRAN release: 2023-09-14 Address CRAN comments. Add experiments.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-061","dir":"Changelog","previous_headings":"","what":"fastcpd 0.6.1","title":"fastcpd 0.6.1","text":"Address CRAN comments.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-060","dir":"Changelog","previous_headings":"","what":"fastcpd 0.6.0","title":"fastcpd 0.6.0","text":"Submit CRAN release.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-057","dir":"Changelog","previous_headings":"","what":"fastcpd 0.5.7","title":"fastcpd 0.5.7","text":"Fix loss function custom mean variance change.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-056","dir":"Changelog","previous_headings":"","what":"fastcpd 0.5.6","title":"fastcpd 0.5.6","text":"Add stargazers README.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-055","dir":"Changelog","previous_headings":"","what":"fastcpd 0.5.5","title":"fastcpd 0.5.5","text":"Add example test multivariate mean shift. Add example test multivariate variance change. Add example test multivariate mean variance change. Add test linear regression multi-dimensional responses.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-054","dir":"Changelog","previous_headings":"","what":"fastcpd 0.5.4","title":"fastcpd 0.5.4","text":"Fix bug change point detected.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-053","dir":"Changelog","previous_headings":"","what":"fastcpd 0.5.3","title":"fastcpd 0.5.3","text":"Add experiments commented sake test time without affecting test coverage. Add examples README. Add CRAN manual using R CMD Rd2pdf . --output=man/figures/manual.pdf --force ---preview stackoverflow. Add example multiple epochs using custom cost functions. Add table contents README.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-052","dir":"Changelog","previous_headings":"","what":"fastcpd 0.5.2","title":"fastcpd 0.5.2","text":"Add one-dimensional linear regression example plot.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-051","dir":"Changelog","previous_headings":"","what":"fastcpd 0.5.1","title":"fastcpd 0.5.1","text":"Prepare CRAN release.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-050","dir":"Changelog","previous_headings":"","what":"fastcpd 0.5.0","title":"fastcpd 0.5.0","text":"Rewrite whole package C++ except LASSO due excessive calls R C++ glmnet.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-040","dir":"Changelog","previous_headings":"","what":"fastcpd 0.4.0","title":"fastcpd 0.4.0","text":"Add transition vanilla PELT SeN using vanilla_percentage parameter.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-033","dir":"Changelog","previous_headings":"","what":"fastcpd 0.3.3","title":"fastcpd 0.3.3","text":"Merge implementation vanilla PELT SeN. Encapsulate implementation binding new coefficients previous coefficients. Rewrite fastcpd parameters updating C++.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-032","dir":"Changelog","previous_headings":"","what":"fastcpd 0.3.2","title":"fastcpd 0.3.2","text":"Integrate initialization update theta_hat, theta_sum hessian. Combine theta estimation single function. Add parameter vanilla_percentage denote method switching vanilla PETL SeN. Add documentation cp_only parameter. Add preparation merging vanilla PELT SeN.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-031","dir":"Changelog","previous_headings":"","what":"fastcpd 0.3.1","title":"fastcpd 0.3.1","text":"Add examples tests fastcpd. Rearrange C++ functions. Add precondition check.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-030","dir":"Changelog","previous_headings":"","what":"fastcpd 0.3.0","title":"fastcpd 0.3.0","text":"Bump test coverage class methods fastcpd.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-029","dir":"Changelog","previous_headings":"","what":"fastcpd 0.2.9","title":"fastcpd 0.2.9","text":"Fix Poisson regression bug related lfactorial.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-028","dir":"Changelog","previous_headings":"","what":"fastcpd 0.2.8","title":"fastcpd 0.2.8","text":"Make penalized linear regression estimated coefficients output sparse.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-027","dir":"Changelog","previous_headings":"","what":"fastcpd 0.2.7","title":"fastcpd 0.2.7","text":"Fix mean change example bug. Update documentation redirect README pkgdown generated webpage. Add contact methods ways file ticket.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-026","dir":"Changelog","previous_headings":"","what":"fastcpd 0.2.6","title":"fastcpd 0.2.6","text":"Add C++ sanity check Logistic regression data, .e. binomial family. Add examples tests fastcpd. Rename C++ source files follow Unix convention. Update documentation link README.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-025","dir":"Changelog","previous_headings":"","what":"fastcpd 0.2.5","title":"fastcpd 0.2.5","text":"Hide internal functions documentation. Export fastcpd class.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-024","dir":"Changelog","previous_headings":"","what":"fastcpd 0.2.4","title":"fastcpd 0.2.4","text":"Add column name thetas slot fastcpd class. Fix plot residuals responses appear plot. Default cp_only FALSE. Remove residuals summary method.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-023","dir":"Changelog","previous_headings":"","what":"fastcpd 0.2.3","title":"fastcpd 0.2.3","text":"Add missing examples linear regression LASSO.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-022","dir":"Changelog","previous_headings":"","what":"fastcpd 0.2.2","title":"fastcpd 0.2.2","text":"Add examples illustrate use fastcpd function. Indicating internal functions users use .","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-021","dir":"Changelog","previous_headings":"","what":"fastcpd 0.2.1","title":"fastcpd 0.2.1","text":"Add examples README.","code":""},{"path":"https://fastcpd.xingchi.li/news/index.html","id":"fastcpd-020","dir":"Changelog","previous_headings":"","what":"fastcpd 0.2.0","title":"fastcpd 0.2.0","text":"Added NEWS.md file track changes package.","code":""}]
